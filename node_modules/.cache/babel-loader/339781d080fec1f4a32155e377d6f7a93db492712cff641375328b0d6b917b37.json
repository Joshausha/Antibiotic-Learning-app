{"ast":null,"code":"/**\n * useLocalStorage Hook\n * Custom hook to persist state in localStorage with automatic JSON serialization\n * \n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if nothing is stored\n * @returns {Array} - [storedValue, setValue]\n */import{useState,useEffect}from'react';const useLocalStorage=(key,initialValue)=>{// Validate key parameter\nif(typeof key!=='string'||!key){console.error('useLocalStorage: key must be a non-empty string');key='fallback-key';}// State to store our value\nconst[storedValue,setStoredValue]=useState(()=>{try{// Check if localStorage is available\nif(!window.localStorage){return initialValue;}// Get from local storage by key\nconst item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nconsole.warn(\"Error reading localStorage key \\\"\".concat(key,\"\\\":\"),error);return initialValue;}});// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nconst setValue=value=>{try{// Allow value to be a function so we have the same API as useState\nconst valueToStore=value instanceof Function?value(storedValue):value;// Check if value is actually changing to avoid unnecessary operations\nif(JSON.stringify(valueToStore)===JSON.stringify(storedValue)){return;}// Save state\nsetStoredValue(valueToStore);// Save to local storage\nif(window.localStorage){if(valueToStore===undefined){window.localStorage.removeItem(key);}else{window.localStorage.setItem(key,JSON.stringify(valueToStore));}}}catch(error){// A more advanced implementation would handle the error case\nconsole.error(\"Error setting localStorage key \\\"\".concat(key,\"\\\":\"),error);}};// Listen for changes to this localStorage key from other tabs/windows\nuseEffect(()=>{const handleStorageChange=e=>{if(e.key===key&&e.newValue!==null){try{setStoredValue(JSON.parse(e.newValue));}catch(error){console.warn(\"Error parsing localStorage value for key \\\"\".concat(key,\"\\\":\"),error);}}};// Add event listener\nwindow.addEventListener('storage',handleStorageChange);// Cleanup\nreturn()=>{window.removeEventListener('storage',handleStorageChange);};},[key]);// Clear function\nconst clearValue=()=>{setValue(undefined);};// Check if value exists\nconst hasValue=()=>{try{return window.localStorage.getItem(key)!==null;}catch(_unused){return false;}};return[storedValue,setValue,{clearValue,hasValue}];};export default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","console","error","storedValue","setStoredValue","window","localStorage","item","getItem","JSON","parse","warn","concat","setValue","value","valueToStore","Function","stringify","undefined","removeItem","setItem","handleStorageChange","e","newValue","addEventListener","removeEventListener","clearValue","hasValue","_unused"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useLocalStorage.js"],"sourcesContent":["/**\n * useLocalStorage Hook\n * Custom hook to persist state in localStorage with automatic JSON serialization\n * \n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if nothing is stored\n * @returns {Array} - [storedValue, setValue]\n */\n\nimport { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  // Validate key parameter\n  if (typeof key !== 'string' || !key) {\n    console.error('useLocalStorage: key must be a non-empty string');\n    key = 'fallback-key';\n  }\n\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Check if localStorage is available\n      if (!window.localStorage) {\n        return initialValue;\n      }\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      \n      // Check if value is actually changing to avoid unnecessary operations\n      if (JSON.stringify(valueToStore) === JSON.stringify(storedValue)) {\n        return;\n      }\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to local storage\n      if (window.localStorage) {\n        if (valueToStore === undefined) {\n          window.localStorage.removeItem(key);\n        } else {\n          window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        }\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Listen for changes to this localStorage key from other tabs/windows\n  useEffect(() => {\n    const handleStorageChange = (e) => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.warn(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n\n    // Add event listener\n    window.addEventListener('storage', handleStorageChange);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key]);\n\n  // Clear function\n  const clearValue = () => {\n    setValue(undefined);\n  };\n\n  // Check if value exists\n  const hasValue = () => {\n    try {\n      return window.localStorage.getItem(key) !== null;\n    } catch {\n      return false;\n    }\n  };\n\n  return [storedValue, setValue, { clearValue, hasValue }];\n};\n\nexport default useLocalStorage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}