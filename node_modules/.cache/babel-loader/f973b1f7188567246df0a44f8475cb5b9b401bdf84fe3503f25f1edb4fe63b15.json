{"ast":null,"code":"/**\n * useSearch Hook\n * Custom hook to handle search functionality with filtering logic\n * \n * @param {Array} items - The array of items to search through\n * @param {Array} searchFields - The fields to search within each item\n * @returns {Object} - { searchTerm, setSearchTerm, filteredItems }\n */import{useState,useMemo}from'react';// Helper function to get nested field values (e.g., 'category.name')\nconst getNestedFieldValue=(obj,fieldPath)=>{return fieldPath.split('.').reduce((current,key)=>{return current&&current[key]!==undefined?current[key]:'';},obj);};const useSearch=function(){let items=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let searchFields=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const[searchTerm,setSearchTerm]=useState('');// Memoized filtered results to optimize performance\nconst filteredItems=useMemo(()=>{if(!searchTerm.trim()){return items;}const lowercaseSearchTerm=searchTerm.toLowerCase();return items.filter(item=>{return searchFields.some(field=>{const fieldValue=getNestedFieldValue(item,field);if(Array.isArray(fieldValue)){// Handle array fields (like commonPathogens)\nreturn fieldValue.some(arrayItem=>String(arrayItem).toLowerCase().includes(lowercaseSearchTerm));}// Handle string fields\nreturn String(fieldValue).toLowerCase().includes(lowercaseSearchTerm);});});},[items,searchTerm,searchFields]);// Clear search function\nconst clearSearch=()=>{setSearchTerm('');};// Search statistics\nconst searchStats={totalItems:items.length,filteredItems:filteredItems.length,isFiltered:searchTerm.trim().length>0,searchTerm:searchTerm.trim()};return{searchTerm,setSearchTerm,filteredItems,clearSearch,searchStats};};export default useSearch;","map":{"version":3,"names":["useState","useMemo","getNestedFieldValue","obj","fieldPath","split","reduce","current","key","undefined","useSearch","items","arguments","length","searchFields","searchTerm","setSearchTerm","filteredItems","trim","lowercaseSearchTerm","toLowerCase","filter","item","some","field","fieldValue","Array","isArray","arrayItem","String","includes","clearSearch","searchStats","totalItems","isFiltered"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useSearch.js"],"sourcesContent":["/**\n * useSearch Hook\n * Custom hook to handle search functionality with filtering logic\n * \n * @param {Array} items - The array of items to search through\n * @param {Array} searchFields - The fields to search within each item\n * @returns {Object} - { searchTerm, setSearchTerm, filteredItems }\n */\n\nimport { useState, useMemo } from 'react';\n\n// Helper function to get nested field values (e.g., 'category.name')\nconst getNestedFieldValue = (obj, fieldPath) => {\n  return fieldPath.split('.').reduce((current, key) => {\n    return current && current[key] !== undefined ? current[key] : '';\n  }, obj);\n};\n\nconst useSearch = (items = [], searchFields = []) => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Memoized filtered results to optimize performance\n  const filteredItems = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return items;\n    }\n\n    const lowercaseSearchTerm = searchTerm.toLowerCase();\n\n    return items.filter(item => {\n      return searchFields.some(field => {\n        const fieldValue = getNestedFieldValue(item, field);\n        \n        if (Array.isArray(fieldValue)) {\n          // Handle array fields (like commonPathogens)\n          return fieldValue.some(arrayItem => \n            String(arrayItem).toLowerCase().includes(lowercaseSearchTerm)\n          );\n        }\n        \n        // Handle string fields\n        return String(fieldValue).toLowerCase().includes(lowercaseSearchTerm);\n      });\n    });\n  }, [items, searchTerm, searchFields]);\n\n  // Clear search function\n  const clearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Search statistics\n  const searchStats = {\n    totalItems: items.length,\n    filteredItems: filteredItems.length,\n    isFiltered: searchTerm.trim().length > 0,\n    searchTerm: searchTerm.trim()\n  };\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    filteredItems,\n    clearSearch,\n    searchStats\n  };\n};\n\nexport default useSearch;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,OAASA,QAAQ,CAAEC,OAAO,KAAQ,OAAO,CAEzC;AACA,KAAM,CAAAC,mBAAmB,CAAGA,CAACC,GAAG,CAAEC,SAAS,GAAK,CAC9C,MAAO,CAAAA,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,OAAO,CAAEC,GAAG,GAAK,CACnD,MAAO,CAAAD,OAAO,EAAIA,OAAO,CAACC,GAAG,CAAC,GAAKC,SAAS,CAAGF,OAAO,CAACC,GAAG,CAAC,CAAG,EAAE,CAClE,CAAC,CAAEL,GAAG,CAAC,CACT,CAAC,CAED,KAAM,CAAAO,SAAS,CAAG,QAAAA,CAAA,CAAmC,IAAlC,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAH,SAAA,CAAAG,SAAA,IAAG,EAAE,IAAE,CAAAE,YAAY,CAAAF,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAH,SAAA,CAAAG,SAAA,IAAG,EAAE,CAC9C,KAAM,CAACG,UAAU,CAAEC,aAAa,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAEhD;AACA,KAAM,CAAAiB,aAAa,CAAGhB,OAAO,CAAC,IAAM,CAClC,GAAI,CAACc,UAAU,CAACG,IAAI,CAAC,CAAC,CAAE,CACtB,MAAO,CAAAP,KAAK,CACd,CAEA,KAAM,CAAAQ,mBAAmB,CAAGJ,UAAU,CAACK,WAAW,CAAC,CAAC,CAEpD,MAAO,CAAAT,KAAK,CAACU,MAAM,CAACC,IAAI,EAAI,CAC1B,MAAO,CAAAR,YAAY,CAACS,IAAI,CAACC,KAAK,EAAI,CAChC,KAAM,CAAAC,UAAU,CAAGvB,mBAAmB,CAACoB,IAAI,CAAEE,KAAK,CAAC,CAEnD,GAAIE,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,CAAE,CAC7B;AACA,MAAO,CAAAA,UAAU,CAACF,IAAI,CAACK,SAAS,EAC9BC,MAAM,CAACD,SAAS,CAAC,CAACR,WAAW,CAAC,CAAC,CAACU,QAAQ,CAACX,mBAAmB,CAC9D,CAAC,CACH,CAEA;AACA,MAAO,CAAAU,MAAM,CAACJ,UAAU,CAAC,CAACL,WAAW,CAAC,CAAC,CAACU,QAAQ,CAACX,mBAAmB,CAAC,CACvE,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CAAE,CAACR,KAAK,CAAEI,UAAU,CAAED,YAAY,CAAC,CAAC,CAErC;AACA,KAAM,CAAAiB,WAAW,CAAGA,CAAA,GAAM,CACxBf,aAAa,CAAC,EAAE,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAAgB,WAAW,CAAG,CAClBC,UAAU,CAAEtB,KAAK,CAACE,MAAM,CACxBI,aAAa,CAAEA,aAAa,CAACJ,MAAM,CACnCqB,UAAU,CAAEnB,UAAU,CAACG,IAAI,CAAC,CAAC,CAACL,MAAM,CAAG,CAAC,CACxCE,UAAU,CAAEA,UAAU,CAACG,IAAI,CAAC,CAC9B,CAAC,CAED,MAAO,CACLH,UAAU,CACVC,aAAa,CACbC,aAAa,CACbc,WAAW,CACXC,WACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAtB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}