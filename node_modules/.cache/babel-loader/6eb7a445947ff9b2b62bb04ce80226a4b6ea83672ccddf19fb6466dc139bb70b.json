{"ast":null,"code":"/**\n * usePathogenData Hook\n * Custom hook for managing pathogen data, search, and condition lookup\n * Provides pathogen exploration functionality with filtering and cross-references\n */import{useMemo,useState}from'react';import{buildIndexes,searchPathogens,getConditionsForPathogen,getAntibioticsForPathogen}from'../utils/dataIndexer';const usePathogenData=medicalConditions=>{const[searchQuery,setSearchQuery]=useState('');const[gramFilter,setGramFilter]=useState('all');// 'all', 'positive', 'negative'\nconst[typeFilter,setTypeFilter]=useState('all');// 'all', 'bacteria', 'virus', 'fungus'\nconst[sortBy,setSortBy]=useState('name');// 'name', 'count', 'conditions'\nconst[selectedPathogen,setSelectedPathogen]=useState(null);// Build indexes once when conditions data changes\nconst indexes=useMemo(()=>{if(!medicalConditions||medicalConditions.length===0){return null;}return buildIndexes(medicalConditions);},[medicalConditions]);// Get filtered and sorted pathogens\nconst pathogens=useMemo(()=>{if(!indexes)return[];return searchPathogens(indexes,{query:searchQuery,gramStatus:gramFilter,pathogenType:typeFilter,sortBy:sortBy});},[indexes,searchQuery,gramFilter,typeFilter,sortBy]);// Get conditions for selected pathogen\nconst selectedPathogenConditions=useMemo(()=>{if(!indexes||!selectedPathogen)return[];return getConditionsForPathogen(indexes,selectedPathogen.name);},[indexes,selectedPathogen]);// Get antibiotics for selected pathogen\nconst selectedPathogenAntibiotics=useMemo(()=>{if(!indexes||!selectedPathogen)return[];return getAntibioticsForPathogen(indexes,selectedPathogen.name);},[indexes,selectedPathogen]);// Get pathogen statistics\nconst pathogenStats=useMemo(()=>{if(!indexes)return null;const gramPositive=indexes.gramPositivePathogens.length;const gramNegative=indexes.gramNegativePathogens.length;const total=indexes.pathogens.length;// Calculate condition coverage\nconst pathogenConditionCounts=indexes.pathogens.map(p=>p.conditions.length);const maxConditions=Math.max(...pathogenConditionCounts,0);const avgConditions=pathogenConditionCounts.length>0?(pathogenConditionCounts.reduce((a,b)=>a+b,0)/pathogenConditionCounts.length).toFixed(1):0;return{total,gramPositive,gramNegative,unknown:total-gramPositive-gramNegative,maxConditions,avgConditions};},[indexes]);// Get gram status distribution for filtered results\nconst filteredStats=useMemo(()=>{const gramPositiveCount=pathogens.filter(p=>p.gramStatus==='positive').length;const gramNegativeCount=pathogens.filter(p=>p.gramStatus==='negative').length;const unknownCount=pathogens.filter(p=>p.gramStatus==='unknown').length;return{total:pathogens.length,gramPositive:gramPositiveCount,gramNegative:gramNegativeCount,unknown:unknownCount};},[pathogens]);// Search functions\nconst searchPathogens=query=>{setSearchQuery(query);};const filterByGramStatus=status=>{setGramFilter(status);};const filterByType=type=>{setTypeFilter(type);};const setSortOrder=order=>{setSortBy(order);};const selectPathogen=pathogen=>{setSelectedPathogen(pathogen);};const clearSelection=()=>{setSelectedPathogen(null);};const clearFilters=()=>{setSearchQuery('');setGramFilter('all');setTypeFilter('all');setSortBy('name');};// Get pathogen by name (for external lookups)\nconst getPathogenByName=name=>{if(!indexes)return null;return indexes.pathogens.find(p=>p.name===name);};// Find similar pathogens (same gram status or conditions)\nconst findSimilarPathogens=pathogen=>{if(!indexes||!pathogen)return[];return indexes.pathogens.filter(p=>p.name!==pathogen.name).filter(p=>{// Same gram status\nif(p.gramStatus===pathogen.gramStatus&&pathogen.gramStatus!=='unknown'){return true;}// Shared conditions\nconst sharedConditions=p.conditions.filter(c=>pathogen.conditions.includes(c));return sharedConditions.length>0;}).sort((a,b)=>{// Sort by number of shared conditions\nconst aShared=a.conditions.filter(c=>pathogen.conditions.includes(c)).length;const bShared=b.conditions.filter(c=>pathogen.conditions.includes(c)).length;return bShared-aShared;}).slice(0,5);// Top 5 similar pathogens\n};return{// Data\npathogens,selectedPathogen,selectedPathogenConditions,selectedPathogenAntibiotics,indexes,// Statistics\npathogenStats,filteredStats,// Search state\nsearchQuery,gramFilter,typeFilter,sortBy,// Actions\nsearchPathogens:query=>setSearchQuery(query),filterByGramStatus,filterByType,setSortOrder,selectPathogen,clearSelection,clearFilters,// Utilities\ngetPathogenByName,findSimilarPathogens,// Loading state\nisLoading:!indexes};};export default usePathogenData;","map":{"version":3,"names":["useMemo","useState","buildIndexes","searchPathogens","getConditionsForPathogen","getAntibioticsForPathogen","usePathogenData","medicalConditions","searchQuery","setSearchQuery","gramFilter","setGramFilter","typeFilter","setTypeFilter","sortBy","setSortBy","selectedPathogen","setSelectedPathogen","indexes","length","pathogens","query","gramStatus","pathogenType","selectedPathogenConditions","name","selectedPathogenAntibiotics","pathogenStats","gramPositive","gramPositivePathogens","gramNegative","gramNegativePathogens","total","pathogenConditionCounts","map","p","conditions","maxConditions","Math","max","avgConditions","reduce","a","b","toFixed","unknown","filteredStats","gramPositiveCount","filter","gramNegativeCount","unknownCount","filterByGramStatus","status","filterByType","type","setSortOrder","order","selectPathogen","pathogen","clearSelection","clearFilters","getPathogenByName","find","findSimilarPathogens","sharedConditions","c","includes","sort","aShared","bShared","slice","isLoading"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/usePathogenData.js"],"sourcesContent":["/**\n * usePathogenData Hook\n * Custom hook for managing pathogen data, search, and condition lookup\n * Provides pathogen exploration functionality with filtering and cross-references\n */\n\nimport { useMemo, useState } from 'react';\nimport { buildIndexes, searchPathogens, getConditionsForPathogen, getAntibioticsForPathogen } from '../utils/dataIndexer';\n\nconst usePathogenData = (medicalConditions) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [gramFilter, setGramFilter] = useState('all'); // 'all', 'positive', 'negative'\n  const [typeFilter, setTypeFilter] = useState('all'); // 'all', 'bacteria', 'virus', 'fungus'\n  const [sortBy, setSortBy] = useState('name'); // 'name', 'count', 'conditions'\n  const [selectedPathogen, setSelectedPathogen] = useState(null);\n\n  // Build indexes once when conditions data changes\n  const indexes = useMemo(() => {\n    if (!medicalConditions || medicalConditions.length === 0) {\n      return null;\n    }\n    return buildIndexes(medicalConditions);\n  }, [medicalConditions]);\n\n  // Get filtered and sorted pathogens\n  const pathogens = useMemo(() => {\n    if (!indexes) return [];\n    \n    return searchPathogens(indexes, {\n      query: searchQuery,\n      gramStatus: gramFilter,\n      pathogenType: typeFilter,\n      sortBy: sortBy\n    });\n  }, [indexes, searchQuery, gramFilter, typeFilter, sortBy]);\n\n  // Get conditions for selected pathogen\n  const selectedPathogenConditions = useMemo(() => {\n    if (!indexes || !selectedPathogen) return [];\n    return getConditionsForPathogen(indexes, selectedPathogen.name);\n  }, [indexes, selectedPathogen]);\n\n  // Get antibiotics for selected pathogen\n  const selectedPathogenAntibiotics = useMemo(() => {\n    if (!indexes || !selectedPathogen) return [];\n    return getAntibioticsForPathogen(indexes, selectedPathogen.name);\n  }, [indexes, selectedPathogen]);\n\n  // Get pathogen statistics\n  const pathogenStats = useMemo(() => {\n    if (!indexes) return null;\n    \n    const gramPositive = indexes.gramPositivePathogens.length;\n    const gramNegative = indexes.gramNegativePathogens.length;\n    const total = indexes.pathogens.length;\n    \n    // Calculate condition coverage\n    const pathogenConditionCounts = indexes.pathogens.map(p => p.conditions.length);\n    const maxConditions = Math.max(...pathogenConditionCounts, 0);\n    const avgConditions = pathogenConditionCounts.length > 0 \n      ? (pathogenConditionCounts.reduce((a, b) => a + b, 0) / pathogenConditionCounts.length).toFixed(1)\n      : 0;\n\n    return {\n      total,\n      gramPositive,\n      gramNegative,\n      unknown: total - gramPositive - gramNegative,\n      maxConditions,\n      avgConditions\n    };\n  }, [indexes]);\n\n  // Get gram status distribution for filtered results\n  const filteredStats = useMemo(() => {\n    const gramPositiveCount = pathogens.filter(p => p.gramStatus === 'positive').length;\n    const gramNegativeCount = pathogens.filter(p => p.gramStatus === 'negative').length;\n    const unknownCount = pathogens.filter(p => p.gramStatus === 'unknown').length;\n    \n    return {\n      total: pathogens.length,\n      gramPositive: gramPositiveCount,\n      gramNegative: gramNegativeCount,\n      unknown: unknownCount\n    };\n  }, [pathogens]);\n\n  // Search functions\n  const searchPathogens = (query) => {\n    setSearchQuery(query);\n  };\n\n  const filterByGramStatus = (status) => {\n    setGramFilter(status);\n  };\n\n  const filterByType = (type) => {\n    setTypeFilter(type);\n  };\n\n  const setSortOrder = (order) => {\n    setSortBy(order);\n  };\n\n  const selectPathogen = (pathogen) => {\n    setSelectedPathogen(pathogen);\n  };\n\n  const clearSelection = () => {\n    setSelectedPathogen(null);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setGramFilter('all');\n    setTypeFilter('all');\n    setSortBy('name');\n  };\n\n  // Get pathogen by name (for external lookups)\n  const getPathogenByName = (name) => {\n    if (!indexes) return null;\n    return indexes.pathogens.find(p => p.name === name);\n  };\n\n  // Find similar pathogens (same gram status or conditions)\n  const findSimilarPathogens = (pathogen) => {\n    if (!indexes || !pathogen) return [];\n    \n    return indexes.pathogens\n      .filter(p => p.name !== pathogen.name)\n      .filter(p => {\n        // Same gram status\n        if (p.gramStatus === pathogen.gramStatus && pathogen.gramStatus !== 'unknown') {\n          return true;\n        }\n        \n        // Shared conditions\n        const sharedConditions = p.conditions.filter(c => pathogen.conditions.includes(c));\n        return sharedConditions.length > 0;\n      })\n      .sort((a, b) => {\n        // Sort by number of shared conditions\n        const aShared = a.conditions.filter(c => pathogen.conditions.includes(c)).length;\n        const bShared = b.conditions.filter(c => pathogen.conditions.includes(c)).length;\n        return bShared - aShared;\n      })\n      .slice(0, 5); // Top 5 similar pathogens\n  };\n\n  return {\n    // Data\n    pathogens,\n    selectedPathogen,\n    selectedPathogenConditions,\n    selectedPathogenAntibiotics,\n    indexes,\n    \n    // Statistics\n    pathogenStats,\n    filteredStats,\n    \n    // Search state\n    searchQuery,\n    gramFilter,\n    typeFilter,\n    sortBy,\n    \n    // Actions\n    searchPathogens: (query) => setSearchQuery(query),\n    filterByGramStatus,\n    filterByType,\n    setSortOrder,\n    selectPathogen,\n    clearSelection,\n    clearFilters,\n    \n    // Utilities\n    getPathogenByName,\n    findSimilarPathogens,\n    \n    // Loading state\n    isLoading: !indexes\n  };\n};\n\nexport default usePathogenData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}