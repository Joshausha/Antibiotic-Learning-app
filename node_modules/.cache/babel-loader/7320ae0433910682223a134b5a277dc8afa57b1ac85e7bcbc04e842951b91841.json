{"ast":null,"code":"import _objectSpread from\"/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * useQuizProgress Hook\n * Custom hook to track quiz completion history and progress analytics\n * \n * @returns {Object} - Quiz progress state and methods\n */import{useState,useEffect,useCallback}from'react';import useLocalStorage from'./useLocalStorage';const useQuizProgress=()=>{const[quizHistory,setQuizHistory]=useLocalStorage('quizHistory',[]);const[currentSession,setCurrentSession]=useState(null);// Calculate statistics\nconst stats={totalQuizzes:quizHistory.length,averageScore:quizHistory.length>0?Math.round(quizHistory.reduce((sum,quiz)=>sum+quiz.scorePercentage,0)/quizHistory.length):0,bestScore:quizHistory.length>0?Math.max(...quizHistory.map(quiz=>quiz.scorePercentage)):0,recentQuizzes:quizHistory.slice(-5).reverse(),// Last 5 quizzes\nimprovementTrend:calculateImprovementTrend(quizHistory),weakAreas:identifyWeakAreas(quizHistory),streakCount:calculateStreakCount(quizHistory)};// Start a new quiz session\nconst startQuiz=useCallback((quizId,totalQuestions)=>{const session={quizId,totalQuestions,startTime:new Date().toISOString(),answers:[],currentQuestion:0};setCurrentSession(session);return session;},[]);// Record an answer\nconst recordAnswer=useCallback((questionIndex,selectedAnswer,correctAnswer,questionText)=>{if(!currentSession)return;const answerRecord={questionIndex,questionText,selectedAnswer,correctAnswer,isCorrect:selectedAnswer===correctAnswer,timestamp:new Date().toISOString()};setCurrentSession(prev=>_objectSpread(_objectSpread({},prev),{},{answers:[...prev.answers,answerRecord],currentQuestion:questionIndex+1}));},[currentSession]);// Complete the quiz and save to history\nconst completeQuiz=useCallback(()=>{if(!currentSession||currentSession.answers.length===0)return null;const endTime=new Date().toISOString();const correctAnswers=currentSession.answers.filter(answer=>answer.isCorrect).length;const scorePercentage=Math.round(correctAnswers/currentSession.totalQuestions*100);const completedQuiz=_objectSpread(_objectSpread({},currentSession),{},{endTime,correctAnswers,scorePercentage,duration:calculateDuration(currentSession.startTime,endTime),completedAt:endTime});// Add to history\nsetQuizHistory(prev=>[...prev,completedQuiz]);// Clear current session\nsetCurrentSession(null);return completedQuiz;},[currentSession,setQuizHistory]);// Reset current session\nconst resetCurrentSession=useCallback(()=>{setCurrentSession(null);},[]);// Clear all history\nconst clearHistory=useCallback(()=>{setQuizHistory([]);},[setQuizHistory]);// Get performance for a specific topic/category\nconst getTopicPerformance=useCallback(topic=>{const topicQuizzes=quizHistory.filter(quiz=>quiz.answers.some(answer=>answer.questionText.toLowerCase().includes(topic.toLowerCase())));if(topicQuizzes.length===0)return null;const totalTopicQuestions=topicQuizzes.reduce((sum,quiz)=>sum+quiz.answers.filter(answer=>answer.questionText.toLowerCase().includes(topic.toLowerCase())).length,0);const correctTopicAnswers=topicQuizzes.reduce((sum,quiz)=>sum+quiz.answers.filter(answer=>answer.questionText.toLowerCase().includes(topic.toLowerCase())&&answer.isCorrect).length,0);return{topic,totalQuestions:totalTopicQuestions,correctAnswers:correctTopicAnswers,accuracy:Math.round(correctTopicAnswers/totalTopicQuestions*100)};},[quizHistory]);return{// State\nquizHistory,currentSession,stats,// Actions\nstartQuiz,recordAnswer,completeQuiz,resetCurrentSession,clearHistory,getTopicPerformance};};// Helper functions\nfunction calculateDuration(startTime,endTime){const start=new Date(startTime);const end=new Date(endTime);const durationMs=end-start;const minutes=Math.floor(durationMs/60000);const seconds=Math.floor(durationMs%60000/1000);return\"\".concat(minutes,\"m \").concat(seconds,\"s\");}function calculateImprovementTrend(history){if(history.length<2)return'insufficient_data';const recent=history.slice(-5);const older=history.slice(-10,-5);if(older.length===0)return'insufficient_data';const recentAvg=recent.reduce((sum,quiz)=>sum+quiz.scorePercentage,0)/recent.length;const olderAvg=older.reduce((sum,quiz)=>sum+quiz.scorePercentage,0)/older.length;const difference=recentAvg-olderAvg;if(difference>5)return'improving';if(difference<-5)return'declining';return'stable';}function identifyWeakAreas(history){const topicPerformance={};history.forEach(quiz=>{quiz.answers.forEach(answer=>{// Extract topic from question (simplified - in real app you'd have better categorization)\nconst topics=extractTopicsFromQuestion(answer.questionText);topics.forEach(topic=>{if(!topicPerformance[topic]){topicPerformance[topic]={correct:0,total:0};}topicPerformance[topic].total++;if(answer.isCorrect){topicPerformance[topic].correct++;}});});});// Find topics with < 70% accuracy\nreturn Object.entries(topicPerformance).map(_ref=>{let[topic,data]=_ref;return{topic,accuracy:Math.round(data.correct/data.total*100),totalQuestions:data.total};}).filter(item=>item.accuracy<70&&item.totalQuestions>=3).sort((a,b)=>a.accuracy-b.accuracy);}function extractTopicsFromQuestion(questionText){const topics=[];const text=questionText.toLowerCase();// Simple topic extraction based on keywords\nif(text.includes('pneumonia'))topics.push('pneumonia');if(text.includes('uti')||text.includes('urinary'))topics.push('uti');if(text.includes('sepsis'))topics.push('sepsis');if(text.includes('meningitis'))topics.push('meningitis');if(text.includes('antibiotic')||text.includes('antimicrobial'))topics.push('antibiotics');return topics.length>0?topics:['general'];}function calculateStreakCount(history){if(history.length===0)return 0;let streak=0;// Count consecutive quizzes with score >= 80%\nfor(let i=history.length-1;i>=0;i--){if(history[i].scorePercentage>=80){streak++;}else{break;}}return streak;}export default useQuizProgress;","map":{"version":3,"names":["useState","useEffect","useCallback","useLocalStorage","useQuizProgress","quizHistory","setQuizHistory","currentSession","setCurrentSession","stats","totalQuizzes","length","averageScore","Math","round","reduce","sum","quiz","scorePercentage","bestScore","max","map","recentQuizzes","slice","reverse","improvementTrend","calculateImprovementTrend","weakAreas","identifyWeakAreas","streakCount","calculateStreakCount","startQuiz","quizId","totalQuestions","session","startTime","Date","toISOString","answers","currentQuestion","recordAnswer","questionIndex","selectedAnswer","correctAnswer","questionText","answerRecord","isCorrect","timestamp","prev","_objectSpread","completeQuiz","endTime","correctAnswers","filter","answer","completedQuiz","duration","calculateDuration","completedAt","resetCurrentSession","clearHistory","getTopicPerformance","topic","topicQuizzes","some","toLowerCase","includes","totalTopicQuestions","correctTopicAnswers","accuracy","start","end","durationMs","minutes","floor","seconds","concat","history","recent","older","recentAvg","olderAvg","difference","topicPerformance","forEach","topics","extractTopicsFromQuestion","correct","total","Object","entries","_ref","data","item","sort","a","b","text","push","streak","i"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useQuizProgress.js"],"sourcesContent":["/**\n * useQuizProgress Hook\n * Custom hook to track quiz completion history and progress analytics\n * \n * @returns {Object} - Quiz progress state and methods\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from './useLocalStorage';\n\nconst useQuizProgress = () => {\n  const [quizHistory, setQuizHistory] = useLocalStorage('quizHistory', []);\n  const [currentSession, setCurrentSession] = useState(null);\n\n  // Calculate statistics\n  const stats = {\n    totalQuizzes: quizHistory.length,\n    averageScore: quizHistory.length > 0 \n      ? Math.round(quizHistory.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / quizHistory.length)\n      : 0,\n    bestScore: quizHistory.length > 0\n      ? Math.max(...quizHistory.map(quiz => quiz.scorePercentage))\n      : 0,\n    recentQuizzes: quizHistory.slice(-5).reverse(), // Last 5 quizzes\n    improvementTrend: calculateImprovementTrend(quizHistory),\n    weakAreas: identifyWeakAreas(quizHistory),\n    streakCount: calculateStreakCount(quizHistory)\n  };\n\n  // Start a new quiz session\n  const startQuiz = useCallback((quizId, totalQuestions) => {\n    const session = {\n      quizId,\n      totalQuestions,\n      startTime: new Date().toISOString(),\n      answers: [],\n      currentQuestion: 0\n    };\n    setCurrentSession(session);\n    return session;\n  }, []);\n\n  // Record an answer\n  const recordAnswer = useCallback((questionIndex, selectedAnswer, correctAnswer, questionText) => {\n    if (!currentSession) return;\n\n    const answerRecord = {\n      questionIndex,\n      questionText,\n      selectedAnswer,\n      correctAnswer,\n      isCorrect: selectedAnswer === correctAnswer,\n      timestamp: new Date().toISOString()\n    };\n\n    setCurrentSession(prev => ({\n      ...prev,\n      answers: [...prev.answers, answerRecord],\n      currentQuestion: questionIndex + 1\n    }));\n  }, [currentSession]);\n\n  // Complete the quiz and save to history\n  const completeQuiz = useCallback(() => {\n    if (!currentSession || currentSession.answers.length === 0) return null;\n\n    const endTime = new Date().toISOString();\n    const correctAnswers = currentSession.answers.filter(answer => answer.isCorrect).length;\n    const scorePercentage = Math.round((correctAnswers / currentSession.totalQuestions) * 100);\n    \n    const completedQuiz = {\n      ...currentSession,\n      endTime,\n      correctAnswers,\n      scorePercentage,\n      duration: calculateDuration(currentSession.startTime, endTime),\n      completedAt: endTime\n    };\n\n    // Add to history\n    setQuizHistory(prev => [...prev, completedQuiz]);\n    \n    // Clear current session\n    setCurrentSession(null);\n\n    return completedQuiz;\n  }, [currentSession, setQuizHistory]);\n\n  // Reset current session\n  const resetCurrentSession = useCallback(() => {\n    setCurrentSession(null);\n  }, []);\n\n  // Clear all history\n  const clearHistory = useCallback(() => {\n    setQuizHistory([]);\n  }, [setQuizHistory]);\n\n  // Get performance for a specific topic/category\n  const getTopicPerformance = useCallback((topic) => {\n    const topicQuizzes = quizHistory.filter(quiz => \n      quiz.answers.some(answer => \n        answer.questionText.toLowerCase().includes(topic.toLowerCase())\n      )\n    );\n\n    if (topicQuizzes.length === 0) return null;\n\n    const totalTopicQuestions = topicQuizzes.reduce((sum, quiz) => \n      sum + quiz.answers.filter(answer => \n        answer.questionText.toLowerCase().includes(topic.toLowerCase())\n      ).length, 0\n    );\n\n    const correctTopicAnswers = topicQuizzes.reduce((sum, quiz) => \n      sum + quiz.answers.filter(answer => \n        answer.questionText.toLowerCase().includes(topic.toLowerCase()) && answer.isCorrect\n      ).length, 0\n    );\n\n    return {\n      topic,\n      totalQuestions: totalTopicQuestions,\n      correctAnswers: correctTopicAnswers,\n      accuracy: Math.round((correctTopicAnswers / totalTopicQuestions) * 100)\n    };\n  }, [quizHistory]);\n\n  return {\n    // State\n    quizHistory,\n    currentSession,\n    stats,\n    \n    // Actions\n    startQuiz,\n    recordAnswer,\n    completeQuiz,\n    resetCurrentSession,\n    clearHistory,\n    getTopicPerformance\n  };\n};\n\n// Helper functions\nfunction calculateDuration(startTime, endTime) {\n  const start = new Date(startTime);\n  const end = new Date(endTime);\n  const durationMs = end - start;\n  const minutes = Math.floor(durationMs / 60000);\n  const seconds = Math.floor((durationMs % 60000) / 1000);\n  return `${minutes}m ${seconds}s`;\n}\n\nfunction calculateImprovementTrend(history) {\n  if (history.length < 2) return 'insufficient_data';\n  \n  const recent = history.slice(-5);\n  const older = history.slice(-10, -5);\n  \n  if (older.length === 0) return 'insufficient_data';\n  \n  const recentAvg = recent.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / recent.length;\n  const olderAvg = older.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / older.length;\n  \n  const difference = recentAvg - olderAvg;\n  \n  if (difference > 5) return 'improving';\n  if (difference < -5) return 'declining';\n  return 'stable';\n}\n\nfunction identifyWeakAreas(history) {\n  const topicPerformance = {};\n  \n  history.forEach(quiz => {\n    quiz.answers.forEach(answer => {\n      // Extract topic from question (simplified - in real app you'd have better categorization)\n      const topics = extractTopicsFromQuestion(answer.questionText);\n      \n      topics.forEach(topic => {\n        if (!topicPerformance[topic]) {\n          topicPerformance[topic] = { correct: 0, total: 0 };\n        }\n        \n        topicPerformance[topic].total++;\n        if (answer.isCorrect) {\n          topicPerformance[topic].correct++;\n        }\n      });\n    });\n  });\n  \n  // Find topics with < 70% accuracy\n  return Object.entries(topicPerformance)\n    .map(([topic, data]) => ({\n      topic,\n      accuracy: Math.round((data.correct / data.total) * 100),\n      totalQuestions: data.total\n    }))\n    .filter(item => item.accuracy < 70 && item.totalQuestions >= 3)\n    .sort((a, b) => a.accuracy - b.accuracy);\n}\n\nfunction extractTopicsFromQuestion(questionText) {\n  const topics = [];\n  const text = questionText.toLowerCase();\n  \n  // Simple topic extraction based on keywords\n  if (text.includes('pneumonia')) topics.push('pneumonia');\n  if (text.includes('uti') || text.includes('urinary')) topics.push('uti');\n  if (text.includes('sepsis')) topics.push('sepsis');\n  if (text.includes('meningitis')) topics.push('meningitis');\n  if (text.includes('antibiotic') || text.includes('antimicrobial')) topics.push('antibiotics');\n  \n  return topics.length > 0 ? topics : ['general'];\n}\n\nfunction calculateStreakCount(history) {\n  if (history.length === 0) return 0;\n  \n  let streak = 0;\n  // Count consecutive quizzes with score >= 80%\n  for (let i = history.length - 1; i >= 0; i--) {\n    if (history[i].scorePercentage >= 80) {\n      streak++;\n    } else {\n      break;\n    }\n  }\n  \n  return streak;\n}\n\nexport default useQuizProgress;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}