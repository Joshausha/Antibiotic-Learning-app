{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useLocalStorage Hook\n * Custom hook to persist state in localStorage with automatic JSON serialization\n * \n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if nothing is stored\n * @returns {Array} - [storedValue, setValue]\n */\n\nimport { useState, useEffect } from 'react';\nconst useLocalStorage = (key, initialValue) => {\n  _s();\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Check if localStorage is available\n      if (!window.localStorage) {\n        return initialValue;\n      }\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n      if (window.localStorage) {\n        if (valueToStore === undefined) {\n          window.localStorage.removeItem(key);\n        } else {\n          window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        }\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Listen for changes to this localStorage key from other tabs/windows\n  useEffect(() => {\n    const handleStorageChange = e => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.warn(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n\n    // Add event listener\n    window.addEventListener('storage', handleStorageChange);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key]);\n\n  // Clear function\n  const clearValue = () => {\n    setValue(undefined);\n  };\n\n  // Check if value exists\n  const hasValue = () => {\n    try {\n      return window.localStorage.getItem(key) !== null;\n    } catch {\n      return false;\n    }\n  };\n  return [storedValue, setValue, {\n    clearValue,\n    hasValue\n  }];\n};\n_s(useLocalStorage, \"A9ceEQnarhGLTor+v7EF8bQX8r0=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","window","localStorage","item","getItem","JSON","parse","error","console","warn","setValue","value","valueToStore","Function","undefined","removeItem","setItem","stringify","handleStorageChange","e","newValue","addEventListener","removeEventListener","clearValue","hasValue"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useLocalStorage.js"],"sourcesContent":["/**\n * useLocalStorage Hook\n * Custom hook to persist state in localStorage with automatic JSON serialization\n * \n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if nothing is stored\n * @returns {Array} - [storedValue, setValue]\n */\n\nimport { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Check if localStorage is available\n      if (!window.localStorage) {\n        return initialValue;\n      }\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to local storage\n      if (window.localStorage) {\n        if (valueToStore === undefined) {\n          window.localStorage.removeItem(key);\n        } else {\n          window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        }\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Listen for changes to this localStorage key from other tabs/windows\n  useEffect(() => {\n    const handleStorageChange = (e) => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.warn(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n\n    // Add event listener\n    window.addEventListener('storage', handleStorageChange);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key]);\n\n  // Clear function\n  const clearValue = () => {\n    setValue(undefined);\n  };\n\n  // Check if value exists\n  const hasValue = () => {\n    try {\n      return window.localStorage.getItem(key) !== null;\n    } catch {\n      return false;\n    }\n  };\n\n  return [storedValue, setValue, { clearValue, hasValue }];\n};\n\nexport default useLocalStorage;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,IAAI,CAACQ,MAAM,CAACC,YAAY,EAAE;QACxB,OAAOL,YAAY;MACrB;MACA;MACA,MAAMM,IAAI,GAAGF,MAAM,CAACC,YAAY,CAACE,OAAO,CAACR,GAAG,CAAC;MAC7C;MACA,OAAOO,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,GAAGN,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,IAAI,CAAC,mCAAmCb,GAAG,IAAI,EAAEW,KAAK,CAAC;MAC/D,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA;EACA,MAAMa,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACZ,WAAW,CAAC,GAAGY,KAAK;;MAE3E;MACAX,cAAc,CAACY,YAAY,CAAC;;MAE5B;MACA,IAAIX,MAAM,CAACC,YAAY,EAAE;QACvB,IAAIU,YAAY,KAAKE,SAAS,EAAE;UAC9Bb,MAAM,CAACC,YAAY,CAACa,UAAU,CAACnB,GAAG,CAAC;QACrC,CAAC,MAAM;UACLK,MAAM,CAACC,YAAY,CAACc,OAAO,CAACpB,GAAG,EAAES,IAAI,CAACY,SAAS,CAACL,YAAY,CAAC,CAAC;QAChE;MACF;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,IAAI,EAAEW,KAAK,CAAC;IAClE;EACF,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACd,MAAMwB,mBAAmB,GAAIC,CAAC,IAAK;MACjC,IAAIA,CAAC,CAACvB,GAAG,KAAKA,GAAG,IAAIuB,CAAC,CAACC,QAAQ,KAAK,IAAI,EAAE;QACxC,IAAI;UACFpB,cAAc,CAACK,IAAI,CAACC,KAAK,CAACa,CAAC,CAACC,QAAQ,CAAC,CAAC;QACxC,CAAC,CAAC,OAAOb,KAAK,EAAE;UACdC,OAAO,CAACC,IAAI,CAAC,6CAA6Cb,GAAG,IAAI,EAAEW,KAAK,CAAC;QAC3E;MACF;IACF,CAAC;;IAED;IACAN,MAAM,CAACoB,gBAAgB,CAAC,SAAS,EAAEH,mBAAmB,CAAC;;IAEvD;IACA,OAAO,MAAM;MACXjB,MAAM,CAACqB,mBAAmB,CAAC,SAAS,EAAEJ,mBAAmB,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,CAACtB,GAAG,CAAC,CAAC;;EAET;EACA,MAAM2B,UAAU,GAAGA,CAAA,KAAM;IACvBb,QAAQ,CAACI,SAAS,CAAC;EACrB,CAAC;;EAED;EACA,MAAMU,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAI;MACF,OAAOvB,MAAM,CAACC,YAAY,CAACE,OAAO,CAACR,GAAG,CAAC,KAAK,IAAI;IAClD,CAAC,CAAC,MAAM;MACN,OAAO,KAAK;IACd;EACF,CAAC;EAED,OAAO,CAACG,WAAW,EAAEW,QAAQ,EAAE;IAAEa,UAAU;IAAEC;EAAS,CAAC,CAAC;AAC1D,CAAC;AAAC1B,EAAA,CA/EIH,eAAe;AAiFrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}