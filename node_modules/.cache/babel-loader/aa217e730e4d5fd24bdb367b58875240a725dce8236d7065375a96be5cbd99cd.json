{"ast":null,"code":"/**\n * useAntibioticData Hook\n * Custom hook for managing antibiotic data, search, and condition lookup\n * Provides antibiotic exploration functionality with drug class filtering and cross-references\n */import{useMemo,useState}from'react';import{buildIndexes,searchAntibiotics,getConditionsForAntibiotic,getDrugClassStats,findCombinationTherapyConditions}from'../utils/dataIndexer';const useAntibioticData=medicalConditions=>{const[searchQuery,setSearchQuery]=useState('');const[drugClassFilter,setDrugClassFilter]=useState('all');const[sortBy,setSortBy]=useState('name');// 'name', 'count', 'conditions', 'class'\nconst[selectedAntibiotic,setSelectedAntibiotic]=useState(null);// Build indexes once when conditions data changes\nconst indexes=useMemo(()=>{if(!medicalConditions||medicalConditions.length===0){return null;}return buildIndexes(medicalConditions);},[medicalConditions]);// Get filtered and sorted antibiotics\nconst antibiotics=useMemo(()=>{if(!indexes)return[];return searchAntibiotics(indexes,{query:searchQuery,drugClass:drugClassFilter,sortBy:sortBy});},[indexes,searchQuery,drugClassFilter,sortBy]);// Get conditions for selected antibiotic\nconst selectedAntibioticConditions=useMemo(()=>{if(!indexes||!selectedAntibiotic)return[];return getConditionsForAntibiotic(indexes,selectedAntibiotic.name);},[indexes,selectedAntibiotic]);// Get drug class statistics\nconst drugClassStats=useMemo(()=>{if(!indexes)return[];return getDrugClassStats(indexes);},[indexes]);// Get available drug classes for filtering\nconst availableDrugClasses=useMemo(()=>{if(!indexes)return[];return Array.from(indexes.drugClassToAntibiotics.keys()).sort();},[indexes]);// Get antibiotic statistics\nconst antibioticStats=useMemo(()=>{if(!indexes)return null;const total=indexes.antibiotics.length;const conditionCounts=indexes.antibiotics.map(a=>a.conditions.length);const maxConditions=Math.max(...conditionCounts,0);const avgConditions=conditionCounts.length>0?(conditionCounts.reduce((a,b)=>a+b,0)/conditionCounts.length).toFixed(1):0;// Calculate most used antibiotics\nconst topAntibiotics=[...indexes.antibiotics].sort((a,b)=>b.count-a.count).slice(0,5);return{total,maxConditions,avgConditions,topAntibiotics,drugClassCount:availableDrugClasses.length};},[indexes,availableDrugClasses]);// Get filtered statistics\nconst filteredStats=useMemo(()=>{const drugClassCounts={};antibiotics.forEach(antibiotic=>{drugClassCounts[antibiotic.class]=(drugClassCounts[antibiotic.class]||0)+1;});return{total:antibiotics.length,byDrugClass:drugClassCounts};},[antibiotics]);// Search and filter functions\nconst searchAntibioticsFunction=query=>{setSearchQuery(query);};const filterByDrugClass=drugClass=>{setDrugClassFilter(drugClass);};const setSortOrder=order=>{setSortBy(order);};const selectAntibiotic=antibiotic=>{setSelectedAntibiotic(antibiotic);};const clearSelection=()=>{setSelectedAntibiotic(null);};const clearFilters=()=>{setSearchQuery('');setDrugClassFilter('all');setSortBy('name');};// Get antibiotic by name (for external lookups)\nconst getAntibioticByName=name=>{if(!indexes)return null;return indexes.antibiotics.find(a=>a.name===name);};// Find alternative antibiotics (same drug class or similar spectrum)\nconst findAlternativeAntibiotics=antibiotic=>{if(!indexes||!antibiotic)return[];return indexes.antibiotics.filter(a=>a.name!==antibiotic.name).filter(a=>{// Same drug class\nif(a.class===antibiotic.class){return true;}// Shared conditions (similar spectrum)\nconst sharedConditions=a.conditions.filter(c=>antibiotic.conditions.includes(c));return sharedConditions.length>0;}).sort((a,b)=>{// Prioritize same drug class\nif(a.class===antibiotic.class&&b.class!==antibiotic.class)return-1;if(b.class===antibiotic.class&&a.class!==antibiotic.class)return 1;// Then sort by number of shared conditions\nconst aShared=a.conditions.filter(c=>antibiotic.conditions.includes(c)).length;const bShared=b.conditions.filter(c=>antibiotic.conditions.includes(c)).length;return bShared-aShared;}).slice(0,8);// Top 8 alternatives\n};// Find combination therapies involving this antibiotic\nconst findCombinationTherapies=antibiotic=>{if(!indexes||!antibiotic)return[];// Find other antibiotics that appear in combination with this one\nconst combinations=new Map();antibiotic.therapyContexts.forEach(context=>{const contextLower=context.toLowerCase();// Look for PLUS/+ indicators\nif(contextLower.includes('plus')||contextLower.includes(' + ')){indexes.antibiotics.forEach(otherAntibiotic=>{if(otherAntibiotic.name!==antibiotic.name&&contextLower.includes(otherAntibiotic.name.toLowerCase())){if(!combinations.has(otherAntibiotic.name)){combinations.set(otherAntibiotic.name,{antibiotic:otherAntibiotic,contexts:[]});}combinations.get(otherAntibiotic.name).contexts.push(context);}});}});return Array.from(combinations.values());};// Get resistance information (based on therapy context patterns)\nconst getResistanceInfo=antibiotic=>{if(!indexes||!antibiotic)return null;const resistancePatterns=[];antibiotic.therapyContexts.forEach(context=>{const contextLower=context.toLowerCase();if(contextLower.includes('mrsa')&&contextLower.includes(antibiotic.name.toLowerCase())){resistancePatterns.push('Active against MRSA');}if(contextLower.includes('resistant')||contextLower.includes('resistance')){resistancePatterns.push('Consider resistance patterns');}if(contextLower.includes('susceptible')||contextLower.includes('susceptibility')){resistancePatterns.push('Requires susceptibility testing');}});return resistancePatterns.length>0?Array.from(new Set(resistancePatterns)):null;};return{// Data\nantibiotics,selectedAntibiotic,selectedAntibioticConditions,drugClassStats,availableDrugClasses,// Statistics\nantibioticStats,filteredStats,// Search state\nsearchQuery,drugClassFilter,sortBy,// Actions\nsearchAntibiotics:searchAntibioticsFunction,filterByDrugClass,setSortOrder,selectAntibiotic,clearSelection,clearFilters,// Utilities\ngetAntibioticByName,findAlternativeAntibiotics,findCombinationTherapies,getResistanceInfo,// Loading state\nisLoading:!indexes};};export default useAntibioticData;","map":{"version":3,"names":["useMemo","useState","buildIndexes","searchAntibiotics","getConditionsForAntibiotic","getDrugClassStats","findCombinationTherapyConditions","useAntibioticData","medicalConditions","searchQuery","setSearchQuery","drugClassFilter","setDrugClassFilter","sortBy","setSortBy","selectedAntibiotic","setSelectedAntibiotic","indexes","length","antibiotics","query","drugClass","selectedAntibioticConditions","name","drugClassStats","availableDrugClasses","Array","from","drugClassToAntibiotics","keys","sort","antibioticStats","total","conditionCounts","map","a","conditions","maxConditions","Math","max","avgConditions","reduce","b","toFixed","topAntibiotics","count","slice","drugClassCount","filteredStats","drugClassCounts","forEach","antibiotic","class","byDrugClass","searchAntibioticsFunction","filterByDrugClass","setSortOrder","order","selectAntibiotic","clearSelection","clearFilters","getAntibioticByName","find","findAlternativeAntibiotics","filter","sharedConditions","c","includes","aShared","bShared","findCombinationTherapies","combinations","Map","therapyContexts","context","contextLower","toLowerCase","otherAntibiotic","has","set","contexts","get","push","values","getResistanceInfo","resistancePatterns","Set","isLoading"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useAntibioticData.js"],"sourcesContent":["/**\n * useAntibioticData Hook\n * Custom hook for managing antibiotic data, search, and condition lookup\n * Provides antibiotic exploration functionality with drug class filtering and cross-references\n */\n\nimport { useMemo, useState } from 'react';\nimport { buildIndexes, searchAntibiotics, getConditionsForAntibiotic, getDrugClassStats, findCombinationTherapyConditions } from '../utils/dataIndexer';\n\nconst useAntibioticData = (medicalConditions) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [drugClassFilter, setDrugClassFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('name'); // 'name', 'count', 'conditions', 'class'\n  const [selectedAntibiotic, setSelectedAntibiotic] = useState(null);\n\n  // Build indexes once when conditions data changes\n  const indexes = useMemo(() => {\n    if (!medicalConditions || medicalConditions.length === 0) {\n      return null;\n    }\n    return buildIndexes(medicalConditions);\n  }, [medicalConditions]);\n\n  // Get filtered and sorted antibiotics\n  const antibiotics = useMemo(() => {\n    if (!indexes) return [];\n    \n    return searchAntibiotics(indexes, {\n      query: searchQuery,\n      drugClass: drugClassFilter,\n      sortBy: sortBy\n    });\n  }, [indexes, searchQuery, drugClassFilter, sortBy]);\n\n  // Get conditions for selected antibiotic\n  const selectedAntibioticConditions = useMemo(() => {\n    if (!indexes || !selectedAntibiotic) return [];\n    return getConditionsForAntibiotic(indexes, selectedAntibiotic.name);\n  }, [indexes, selectedAntibiotic]);\n\n  // Get drug class statistics\n  const drugClassStats = useMemo(() => {\n    if (!indexes) return [];\n    return getDrugClassStats(indexes);\n  }, [indexes]);\n\n  // Get available drug classes for filtering\n  const availableDrugClasses = useMemo(() => {\n    if (!indexes) return [];\n    return Array.from(indexes.drugClassToAntibiotics.keys()).sort();\n  }, [indexes]);\n\n  // Get antibiotic statistics\n  const antibioticStats = useMemo(() => {\n    if (!indexes) return null;\n    \n    const total = indexes.antibiotics.length;\n    const conditionCounts = indexes.antibiotics.map(a => a.conditions.length);\n    const maxConditions = Math.max(...conditionCounts, 0);\n    const avgConditions = conditionCounts.length > 0 \n      ? (conditionCounts.reduce((a, b) => a + b, 0) / conditionCounts.length).toFixed(1)\n      : 0;\n\n    // Calculate most used antibiotics\n    const topAntibiotics = [...indexes.antibiotics]\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      total,\n      maxConditions,\n      avgConditions,\n      topAntibiotics,\n      drugClassCount: availableDrugClasses.length\n    };\n  }, [indexes, availableDrugClasses]);\n\n  // Get filtered statistics\n  const filteredStats = useMemo(() => {\n    const drugClassCounts = {};\n    antibiotics.forEach(antibiotic => {\n      drugClassCounts[antibiotic.class] = (drugClassCounts[antibiotic.class] || 0) + 1;\n    });\n    \n    return {\n      total: antibiotics.length,\n      byDrugClass: drugClassCounts\n    };\n  }, [antibiotics]);\n\n  // Search and filter functions\n  const searchAntibioticsFunction = (query) => {\n    setSearchQuery(query);\n  };\n\n  const filterByDrugClass = (drugClass) => {\n    setDrugClassFilter(drugClass);\n  };\n\n  const setSortOrder = (order) => {\n    setSortBy(order);\n  };\n\n  const selectAntibiotic = (antibiotic) => {\n    setSelectedAntibiotic(antibiotic);\n  };\n\n  const clearSelection = () => {\n    setSelectedAntibiotic(null);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setDrugClassFilter('all');\n    setSortBy('name');\n  };\n\n  // Get antibiotic by name (for external lookups)\n  const getAntibioticByName = (name) => {\n    if (!indexes) return null;\n    return indexes.antibiotics.find(a => a.name === name);\n  };\n\n  // Find alternative antibiotics (same drug class or similar spectrum)\n  const findAlternativeAntibiotics = (antibiotic) => {\n    if (!indexes || !antibiotic) return [];\n    \n    return indexes.antibiotics\n      .filter(a => a.name !== antibiotic.name)\n      .filter(a => {\n        // Same drug class\n        if (a.class === antibiotic.class) {\n          return true;\n        }\n        \n        // Shared conditions (similar spectrum)\n        const sharedConditions = a.conditions.filter(c => antibiotic.conditions.includes(c));\n        return sharedConditions.length > 0;\n      })\n      .sort((a, b) => {\n        // Prioritize same drug class\n        if (a.class === antibiotic.class && b.class !== antibiotic.class) return -1;\n        if (b.class === antibiotic.class && a.class !== antibiotic.class) return 1;\n        \n        // Then sort by number of shared conditions\n        const aShared = a.conditions.filter(c => antibiotic.conditions.includes(c)).length;\n        const bShared = b.conditions.filter(c => antibiotic.conditions.includes(c)).length;\n        return bShared - aShared;\n      })\n      .slice(0, 8); // Top 8 alternatives\n  };\n\n  // Find combination therapies involving this antibiotic\n  const findCombinationTherapies = (antibiotic) => {\n    if (!indexes || !antibiotic) return [];\n    \n    // Find other antibiotics that appear in combination with this one\n    const combinations = new Map();\n    \n    antibiotic.therapyContexts.forEach(context => {\n      const contextLower = context.toLowerCase();\n      \n      // Look for PLUS/+ indicators\n      if (contextLower.includes('plus') || contextLower.includes(' + ')) {\n        indexes.antibiotics.forEach(otherAntibiotic => {\n          if (otherAntibiotic.name !== antibiotic.name && \n              contextLower.includes(otherAntibiotic.name.toLowerCase())) {\n            if (!combinations.has(otherAntibiotic.name)) {\n              combinations.set(otherAntibiotic.name, {\n                antibiotic: otherAntibiotic,\n                contexts: []\n              });\n            }\n            combinations.get(otherAntibiotic.name).contexts.push(context);\n          }\n        });\n      }\n    });\n    \n    return Array.from(combinations.values());\n  };\n\n  // Get resistance information (based on therapy context patterns)\n  const getResistanceInfo = (antibiotic) => {\n    if (!indexes || !antibiotic) return null;\n    \n    const resistancePatterns = [];\n    \n    antibiotic.therapyContexts.forEach(context => {\n      const contextLower = context.toLowerCase();\n      \n      if (contextLower.includes('mrsa') && contextLower.includes(antibiotic.name.toLowerCase())) {\n        resistancePatterns.push('Active against MRSA');\n      }\n      if (contextLower.includes('resistant') || contextLower.includes('resistance')) {\n        resistancePatterns.push('Consider resistance patterns');\n      }\n      if (contextLower.includes('susceptible') || contextLower.includes('susceptibility')) {\n        resistancePatterns.push('Requires susceptibility testing');\n      }\n    });\n    \n    return resistancePatterns.length > 0 ? Array.from(new Set(resistancePatterns)) : null;\n  };\n\n  return {\n    // Data\n    antibiotics,\n    selectedAntibiotic,\n    selectedAntibioticConditions,\n    drugClassStats,\n    availableDrugClasses,\n    \n    // Statistics\n    antibioticStats,\n    filteredStats,\n    \n    // Search state\n    searchQuery,\n    drugClassFilter,\n    sortBy,\n    \n    // Actions\n    searchAntibiotics: searchAntibioticsFunction,\n    filterByDrugClass,\n    setSortOrder,\n    selectAntibiotic,\n    clearSelection,\n    clearFilters,\n    \n    // Utilities\n    getAntibioticByName,\n    findAlternativeAntibiotics,\n    findCombinationTherapies,\n    getResistanceInfo,\n    \n    // Loading state\n    isLoading: !indexes\n  };\n};\n\nexport default useAntibioticData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}