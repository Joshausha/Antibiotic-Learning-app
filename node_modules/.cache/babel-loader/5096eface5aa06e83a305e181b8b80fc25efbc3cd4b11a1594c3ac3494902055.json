{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useSearch Hook\n * Custom hook to handle search functionality with filtering logic\n * \n * @param {Array} items - The array of items to search through\n * @param {Array} searchFields - The fields to search within each item\n * @returns {Object} - { searchTerm, setSearchTerm, filteredItems }\n */\n\nimport { useState, useMemo } from 'react';\n\n// Helper function to get nested field values (e.g., 'category.name')\nconst getNestedFieldValue = (obj, fieldPath) => {\n  return fieldPath.split('.').reduce((current, key) => {\n    return current && current[key] !== undefined ? current[key] : '';\n  }, obj);\n};\nconst useSearch = (items = [], searchFields = []) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Memoized filtered results to optimize performance\n  const filteredItems = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return items;\n    }\n    const lowercaseSearchTerm = searchTerm.toLowerCase();\n    return items.filter(item => {\n      return searchFields.some(field => {\n        const fieldValue = getNestedFieldValue(item, field);\n        if (Array.isArray(fieldValue)) {\n          // Handle array fields (like commonPathogens)\n          return fieldValue.some(arrayItem => String(arrayItem).toLowerCase().includes(lowercaseSearchTerm));\n        }\n\n        // Handle string fields\n        return String(fieldValue).toLowerCase().includes(lowercaseSearchTerm);\n      });\n    });\n  }, [items, searchTerm, searchFields]);\n\n  // Clear search function\n  const clearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Search statistics\n  const searchStats = {\n    totalItems: items.length,\n    filteredItems: filteredItems.length,\n    isFiltered: searchTerm.trim().length > 0,\n    searchTerm: searchTerm.trim()\n  };\n  return {\n    searchTerm,\n    setSearchTerm,\n    filteredItems,\n    clearSearch,\n    searchStats\n  };\n};\n_s(useSearch, \"4m75ZBf+qShK4sGqTg6KsTQuNbQ=\");\nexport default useSearch;","map":{"version":3,"names":["useState","useMemo","getNestedFieldValue","obj","fieldPath","split","reduce","current","key","undefined","useSearch","items","searchFields","_s","searchTerm","setSearchTerm","filteredItems","trim","lowercaseSearchTerm","toLowerCase","filter","item","some","field","fieldValue","Array","isArray","arrayItem","String","includes","clearSearch","searchStats","totalItems","length","isFiltered"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useSearch.js"],"sourcesContent":["/**\n * useSearch Hook\n * Custom hook to handle search functionality with filtering logic\n * \n * @param {Array} items - The array of items to search through\n * @param {Array} searchFields - The fields to search within each item\n * @returns {Object} - { searchTerm, setSearchTerm, filteredItems }\n */\n\nimport { useState, useMemo } from 'react';\n\n// Helper function to get nested field values (e.g., 'category.name')\nconst getNestedFieldValue = (obj, fieldPath) => {\n  return fieldPath.split('.').reduce((current, key) => {\n    return current && current[key] !== undefined ? current[key] : '';\n  }, obj);\n};\n\nconst useSearch = (items = [], searchFields = []) => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Memoized filtered results to optimize performance\n  const filteredItems = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return items;\n    }\n\n    const lowercaseSearchTerm = searchTerm.toLowerCase();\n\n    return items.filter(item => {\n      return searchFields.some(field => {\n        const fieldValue = getNestedFieldValue(item, field);\n        \n        if (Array.isArray(fieldValue)) {\n          // Handle array fields (like commonPathogens)\n          return fieldValue.some(arrayItem => \n            String(arrayItem).toLowerCase().includes(lowercaseSearchTerm)\n          );\n        }\n        \n        // Handle string fields\n        return String(fieldValue).toLowerCase().includes(lowercaseSearchTerm);\n      });\n    });\n  }, [items, searchTerm, searchFields]);\n\n  // Clear search function\n  const clearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Search statistics\n  const searchStats = {\n    totalItems: items.length,\n    filteredItems: filteredItems.length,\n    isFiltered: searchTerm.trim().length > 0,\n    searchTerm: searchTerm.trim()\n  };\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    filteredItems,\n    clearSearch,\n    searchStats\n  };\n};\n\nexport default useSearch;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,OAAO,QAAQ,OAAO;;AAEzC;AACA,MAAMC,mBAAmB,GAAGA,CAACC,GAAG,EAAEC,SAAS,KAAK;EAC9C,OAAOA,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,OAAO,EAAEC,GAAG,KAAK;IACnD,OAAOD,OAAO,IAAIA,OAAO,CAACC,GAAG,CAAC,KAAKC,SAAS,GAAGF,OAAO,CAACC,GAAG,CAAC,GAAG,EAAE;EAClE,CAAC,EAAEL,GAAG,CAAC;AACT,CAAC;AAED,MAAMO,SAAS,GAAGA,CAACC,KAAK,GAAG,EAAE,EAAEC,YAAY,GAAG,EAAE,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMgB,aAAa,GAAGf,OAAO,CAAC,MAAM;IAClC,IAAI,CAACa,UAAU,CAACG,IAAI,CAAC,CAAC,EAAE;MACtB,OAAON,KAAK;IACd;IAEA,MAAMO,mBAAmB,GAAGJ,UAAU,CAACK,WAAW,CAAC,CAAC;IAEpD,OAAOR,KAAK,CAACS,MAAM,CAACC,IAAI,IAAI;MAC1B,OAAOT,YAAY,CAACU,IAAI,CAACC,KAAK,IAAI;QAChC,MAAMC,UAAU,GAAGtB,mBAAmB,CAACmB,IAAI,EAAEE,KAAK,CAAC;QAEnD,IAAIE,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;UAC7B;UACA,OAAOA,UAAU,CAACF,IAAI,CAACK,SAAS,IAC9BC,MAAM,CAACD,SAAS,CAAC,CAACR,WAAW,CAAC,CAAC,CAACU,QAAQ,CAACX,mBAAmB,CAC9D,CAAC;QACH;;QAEA;QACA,OAAOU,MAAM,CAACJ,UAAU,CAAC,CAACL,WAAW,CAAC,CAAC,CAACU,QAAQ,CAACX,mBAAmB,CAAC;MACvE,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,KAAK,EAAEG,UAAU,EAAEF,YAAY,CAAC,CAAC;;EAErC;EACA,MAAMkB,WAAW,GAAGA,CAAA,KAAM;IACxBf,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;;EAED;EACA,MAAMgB,WAAW,GAAG;IAClBC,UAAU,EAAErB,KAAK,CAACsB,MAAM;IACxBjB,aAAa,EAAEA,aAAa,CAACiB,MAAM;IACnCC,UAAU,EAAEpB,UAAU,CAACG,IAAI,CAAC,CAAC,CAACgB,MAAM,GAAG,CAAC;IACxCnB,UAAU,EAAEA,UAAU,CAACG,IAAI,CAAC;EAC9B,CAAC;EAED,OAAO;IACLH,UAAU;IACVC,aAAa;IACbC,aAAa;IACbc,WAAW;IACXC;EACF,CAAC;AACH,CAAC;AAAClB,EAAA,CAhDIH,SAAS;AAkDf,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}