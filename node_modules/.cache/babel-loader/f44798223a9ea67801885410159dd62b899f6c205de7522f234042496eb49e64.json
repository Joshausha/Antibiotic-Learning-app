{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useUserSession Hook\n * Manages user session statistics and interaction tracking\n * Extracted from usePathogenRecommendations for better separation of concerns\n */\n\nimport { useState, useCallback } from 'react';\nconst useUserSession = indexes => {\n  _s();\n  const [sessionStats, setSessionStats] = useState({\n    totalViewed: 0,\n    averageTimePerPathogen: 0,\n    preferredCategories: new Map(),\n    gramStatusFocus: new Map(),\n    explorationDepth: 0\n  });\n  const [userPreferences, setUserPreferences] = useState({\n    systematicLearning: false,\n    preferSimilarPathogens: true,\n    includeRecentlyViewed: false,\n    difficultyLevel: 'adaptive',\n    focusAreas: []\n  });\n\n  /**\n   * Records a user interaction with a pathogen\n   */\n  const recordInteraction = useCallback((pathogen, interactionType = 'view', timeSpent = 0) => {\n    setSessionStats(prevStats => {\n      const newStats = {\n        ...prevStats,\n        totalViewed: prevStats.totalViewed + 1,\n        explorationDepth: prevStats.explorationDepth + 1\n      };\n\n      // Update average time per pathogen\n      const totalTime = prevStats.averageTimePerPathogen * prevStats.totalViewed + timeSpent;\n      newStats.averageTimePerPathogen = totalTime / newStats.totalViewed;\n\n      // Update category preferences\n      if (pathogen.conditions) {\n        pathogen.conditions.forEach(conditionId => {\n          const condition = indexes === null || indexes === void 0 ? void 0 : indexes.conditions.find(c => c.id === conditionId);\n          if (condition) {\n            const currentCount = newStats.preferredCategories.get(condition.category) || 0;\n            newStats.preferredCategories.set(condition.category, currentCount + 1);\n          }\n        });\n      }\n\n      // Update gram status preferences\n      if (pathogen.gramStatus) {\n        const currentCount = newStats.gramStatusFocus.get(pathogen.gramStatus) || 0;\n        newStats.gramStatusFocus.set(pathogen.gramStatus, currentCount + 1);\n      }\n      return newStats;\n    });\n  }, [indexes]);\n\n  /**\n   * Resets session statistics\n   */\n  const resetSession = useCallback(() => {\n    setSessionStats({\n      totalViewed: 0,\n      averageTimePerPathogen: 0,\n      preferredCategories: new Map(),\n      gramStatusFocus: new Map(),\n      explorationDepth: 0\n    });\n  }, []);\n\n  /**\n   * Updates user preferences\n   */\n  const updatePreferences = useCallback(newPreferences => {\n    setUserPreferences(prev => ({\n      ...prev,\n      ...newPreferences\n    }));\n  }, []);\n  return {\n    sessionStats,\n    userPreferences,\n    recordInteraction,\n    resetSession,\n    updatePreferences,\n    setUserPreferences\n  };\n};\n_s(useUserSession, \"DX5h8S4tUqVRG+sunlC/tTnsRMk=\");\nexport default useUserSession;","map":{"version":3,"names":["useState","useCallback","useUserSession","indexes","_s","sessionStats","setSessionStats","totalViewed","averageTimePerPathogen","preferredCategories","Map","gramStatusFocus","explorationDepth","userPreferences","setUserPreferences","systematicLearning","preferSimilarPathogens","includeRecentlyViewed","difficultyLevel","focusAreas","recordInteraction","pathogen","interactionType","timeSpent","prevStats","newStats","totalTime","conditions","forEach","conditionId","condition","find","c","id","currentCount","get","category","set","gramStatus","resetSession","updatePreferences","newPreferences","prev"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useUserSession.js"],"sourcesContent":["/**\n * useUserSession Hook\n * Manages user session statistics and interaction tracking\n * Extracted from usePathogenRecommendations for better separation of concerns\n */\n\nimport { useState, useCallback } from 'react';\n\nconst useUserSession = (indexes) => {\n  const [sessionStats, setSessionStats] = useState({\n    totalViewed: 0,\n    averageTimePerPathogen: 0,\n    preferredCategories: new Map(),\n    gramStatusFocus: new Map(),\n    explorationDepth: 0\n  });\n\n  const [userPreferences, setUserPreferences] = useState({\n    systematicLearning: false,\n    preferSimilarPathogens: true,\n    includeRecentlyViewed: false,\n    difficultyLevel: 'adaptive',\n    focusAreas: []\n  });\n\n  /**\n   * Records a user interaction with a pathogen\n   */\n  const recordInteraction = useCallback((pathogen, interactionType = 'view', timeSpent = 0) => {\n    setSessionStats(prevStats => {\n      const newStats = {\n        ...prevStats,\n        totalViewed: prevStats.totalViewed + 1,\n        explorationDepth: prevStats.explorationDepth + 1\n      };\n\n      // Update average time per pathogen\n      const totalTime = (prevStats.averageTimePerPathogen * prevStats.totalViewed) + timeSpent;\n      newStats.averageTimePerPathogen = totalTime / newStats.totalViewed;\n\n      // Update category preferences\n      if (pathogen.conditions) {\n        pathogen.conditions.forEach(conditionId => {\n          const condition = indexes?.conditions.find(c => c.id === conditionId);\n          if (condition) {\n            const currentCount = newStats.preferredCategories.get(condition.category) || 0;\n            newStats.preferredCategories.set(condition.category, currentCount + 1);\n          }\n        });\n      }\n\n      // Update gram status preferences\n      if (pathogen.gramStatus) {\n        const currentCount = newStats.gramStatusFocus.get(pathogen.gramStatus) || 0;\n        newStats.gramStatusFocus.set(pathogen.gramStatus, currentCount + 1);\n      }\n\n      return newStats;\n    });\n  }, [indexes]);\n\n  /**\n   * Resets session statistics\n   */\n  const resetSession = useCallback(() => {\n    setSessionStats({\n      totalViewed: 0,\n      averageTimePerPathogen: 0,\n      preferredCategories: new Map(),\n      gramStatusFocus: new Map(),\n      explorationDepth: 0\n    });\n  }, []);\n\n  /**\n   * Updates user preferences\n   */\n  const updatePreferences = useCallback((newPreferences) => {\n    setUserPreferences(prev => ({\n      ...prev,\n      ...newPreferences\n    }));\n  }, []);\n\n  return {\n    sessionStats,\n    userPreferences,\n    recordInteraction,\n    resetSession,\n    updatePreferences,\n    setUserPreferences\n  };\n};\n\nexport default useUserSession;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}