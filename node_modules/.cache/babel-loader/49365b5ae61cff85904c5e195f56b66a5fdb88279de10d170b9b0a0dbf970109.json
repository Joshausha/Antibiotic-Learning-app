{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * usePathogenRecommendations Hook (Refactored)\n * Simplified recommendation engine focusing on core functionality\n * Uses extracted utilities and separate hooks for better maintainability\n */\n\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { analyzeBehaviorPatterns, calculatePathogenRecommendations, generateLearningPath, categorizeRecommendations } from '../utils/recommendationEngine';\nimport useUserSession from './useUserSession';\nconst usePathogenRecommendations = (indexes, selectedPathogen, userBehavior = {}) => {\n  _s();\n  const [recommendations, setRecommendations] = useState([]);\n  const [learningPath, setLearningPath] = useState([]);\n\n  // Use separate session management hook\n  const {\n    sessionStats,\n    userPreferences,\n    recordInteraction,\n    resetSession,\n    updatePreferences,\n    setUserPreferences\n  } = useUserSession(indexes);\n\n  // Analyze user behavior patterns (memoized for performance)\n  const behaviorAnalysis = useMemo(() => {\n    return analyzeBehaviorPatterns(userBehavior);\n  }, [userBehavior]);\n\n  // Calculate recommendations when dependencies change\n  const calculateRecommendations = useCallback(() => {\n    if (!indexes || !selectedPathogen) {\n      setRecommendations([]);\n      return;\n    }\n    const newRecommendations = calculatePathogenRecommendations(indexes, selectedPathogen, behaviorAnalysis, userPreferences);\n    setRecommendations(newRecommendations);\n  }, [indexes, selectedPathogen, behaviorAnalysis, userPreferences]);\n\n  // Generate learning path when dependencies change\n  const regenerateLearningPath = useCallback(() => {\n    if (!indexes) {\n      setLearningPath([]);\n      return;\n    }\n    const newLearningPath = generateLearningPath(indexes, userPreferences, behaviorAnalysis);\n    setLearningPath(newLearningPath);\n  }, [indexes, userPreferences, behaviorAnalysis]);\n\n  // Auto-calculate recommendations when selectedPathogen changes\n  useEffect(() => {\n    calculateRecommendations();\n  }, [calculateRecommendations]);\n\n  // Auto-generate learning path when preferences change\n  useEffect(() => {\n    regenerateLearningPath();\n  }, [regenerateLearningPath]);\n\n  // Categorize recommendations for UI display\n  const getRecommendationsByCategory = useMemo(() => {\n    return categorizeRecommendations(recommendations, selectedPathogen);\n  }, [recommendations, selectedPathogen]);\n  return {\n    // Core data\n    recommendations,\n    learningPath,\n    userPreferences,\n    sessionStats,\n    behaviorAnalysis,\n    // Actions\n    recordInteraction,\n    setUserPreferences: updatePreferences,\n    refreshRecommendations: calculateRecommendations,\n    regenerateLearningPath,\n    resetSession,\n    // Derived data\n    getRecommendationsByCategory\n  };\n};\n_s(usePathogenRecommendations, \"fpLttgHLP3OolsoHTUmUvkPv1fU=\", false, function () {\n  return [useUserSession];\n});\nexport default usePathogenRecommendations;","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","analyzeBehaviorPatterns","calculatePathogenRecommendations","generateLearningPath","categorizeRecommendations","useUserSession","usePathogenRecommendations","indexes","selectedPathogen","userBehavior","_s","recommendations","setRecommendations","learningPath","setLearningPath","sessionStats","userPreferences","recordInteraction","resetSession","updatePreferences","setUserPreferences","behaviorAnalysis","calculateRecommendations","newRecommendations","regenerateLearningPath","newLearningPath","getRecommendationsByCategory","refreshRecommendations"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/usePathogenRecommendations.js"],"sourcesContent":["/**\n * usePathogenRecommendations Hook (Refactored)\n * Simplified recommendation engine focusing on core functionality\n * Uses extracted utilities and separate hooks for better maintainability\n */\n\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  analyzeBehaviorPatterns, \n  calculatePathogenRecommendations, \n  generateLearningPath,\n  categorizeRecommendations \n} from '../utils/recommendationEngine';\nimport useUserSession from './useUserSession';\n\nconst usePathogenRecommendations = (indexes, selectedPathogen, userBehavior = {}) => {\n  const [recommendations, setRecommendations] = useState([]);\n  const [learningPath, setLearningPath] = useState([]);\n\n  // Use separate session management hook\n  const {\n    sessionStats,\n    userPreferences,\n    recordInteraction,\n    resetSession,\n    updatePreferences,\n    setUserPreferences\n  } = useUserSession(indexes);\n\n  // Analyze user behavior patterns (memoized for performance)\n  const behaviorAnalysis = useMemo(() => {\n    return analyzeBehaviorPatterns(userBehavior);\n  }, [userBehavior]);\n\n  // Calculate recommendations when dependencies change\n  const calculateRecommendations = useCallback(() => {\n    if (!indexes || !selectedPathogen) {\n      setRecommendations([]);\n      return;\n    }\n\n    const newRecommendations = calculatePathogenRecommendations(\n      indexes,\n      selectedPathogen,\n      behaviorAnalysis,\n      userPreferences\n    );\n    \n    setRecommendations(newRecommendations);\n  }, [indexes, selectedPathogen, behaviorAnalysis, userPreferences]);\n\n  // Generate learning path when dependencies change\n  const regenerateLearningPath = useCallback(() => {\n    if (!indexes) {\n      setLearningPath([]);\n      return;\n    }\n\n    const newLearningPath = generateLearningPath(\n      indexes,\n      userPreferences,\n      behaviorAnalysis\n    );\n    \n    setLearningPath(newLearningPath);\n  }, [indexes, userPreferences, behaviorAnalysis]);\n\n  // Auto-calculate recommendations when selectedPathogen changes\n  useEffect(() => {\n    calculateRecommendations();\n  }, [calculateRecommendations]);\n\n  // Auto-generate learning path when preferences change\n  useEffect(() => {\n    regenerateLearningPath();\n  }, [regenerateLearningPath]);\n\n  // Categorize recommendations for UI display\n  const getRecommendationsByCategory = useMemo(() => {\n    return categorizeRecommendations(recommendations, selectedPathogen);\n  }, [recommendations, selectedPathogen]);\n\n  return {\n    // Core data\n    recommendations,\n    learningPath,\n    userPreferences,\n    sessionStats,\n    behaviorAnalysis,\n    \n    // Actions\n    recordInteraction,\n    setUserPreferences: updatePreferences,\n    refreshRecommendations: calculateRecommendations,\n    regenerateLearningPath,\n    resetSession,\n    \n    // Derived data\n    getRecommendationsByCategory\n  };\n};\n\nexport default usePathogenRecommendations;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AACjE,SACEC,uBAAuB,EACvBC,gCAAgC,EAChCC,oBAAoB,EACpBC,yBAAyB,QACpB,+BAA+B;AACtC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,MAAMC,0BAA0B,GAAGA,CAACC,OAAO,EAAEC,gBAAgB,EAAEC,YAAY,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAM;IACJkB,YAAY;IACZC,eAAe;IACfC,iBAAiB;IACjBC,YAAY;IACZC,iBAAiB;IACjBC;EACF,CAAC,GAAGf,cAAc,CAACE,OAAO,CAAC;;EAE3B;EACA,MAAMc,gBAAgB,GAAGtB,OAAO,CAAC,MAAM;IACrC,OAAOE,uBAAuB,CAACQ,YAAY,CAAC;EAC9C,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMa,wBAAwB,GAAGtB,WAAW,CAAC,MAAM;IACjD,IAAI,CAACO,OAAO,IAAI,CAACC,gBAAgB,EAAE;MACjCI,kBAAkB,CAAC,EAAE,CAAC;MACtB;IACF;IAEA,MAAMW,kBAAkB,GAAGrB,gCAAgC,CACzDK,OAAO,EACPC,gBAAgB,EAChBa,gBAAgB,EAChBL,eACF,CAAC;IAEDJ,kBAAkB,CAACW,kBAAkB,CAAC;EACxC,CAAC,EAAE,CAAChB,OAAO,EAAEC,gBAAgB,EAAEa,gBAAgB,EAAEL,eAAe,CAAC,CAAC;;EAElE;EACA,MAAMQ,sBAAsB,GAAGxB,WAAW,CAAC,MAAM;IAC/C,IAAI,CAACO,OAAO,EAAE;MACZO,eAAe,CAAC,EAAE,CAAC;MACnB;IACF;IAEA,MAAMW,eAAe,GAAGtB,oBAAoB,CAC1CI,OAAO,EACPS,eAAe,EACfK,gBACF,CAAC;IAEDP,eAAe,CAACW,eAAe,CAAC;EAClC,CAAC,EAAE,CAAClB,OAAO,EAAES,eAAe,EAAEK,gBAAgB,CAAC,CAAC;;EAEhD;EACAvB,SAAS,CAAC,MAAM;IACdwB,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACA,wBAAwB,CAAC,CAAC;;EAE9B;EACAxB,SAAS,CAAC,MAAM;IACd0B,sBAAsB,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACA,sBAAsB,CAAC,CAAC;;EAE5B;EACA,MAAME,4BAA4B,GAAG3B,OAAO,CAAC,MAAM;IACjD,OAAOK,yBAAyB,CAACO,eAAe,EAAEH,gBAAgB,CAAC;EACrE,CAAC,EAAE,CAACG,eAAe,EAAEH,gBAAgB,CAAC,CAAC;EAEvC,OAAO;IACL;IACAG,eAAe;IACfE,YAAY;IACZG,eAAe;IACfD,YAAY;IACZM,gBAAgB;IAEhB;IACAJ,iBAAiB;IACjBG,kBAAkB,EAAED,iBAAiB;IACrCQ,sBAAsB,EAAEL,wBAAwB;IAChDE,sBAAsB;IACtBN,YAAY;IAEZ;IACAQ;EACF,CAAC;AACH,CAAC;AAAChB,EAAA,CArFIJ,0BAA0B;EAAA,QAY1BD,cAAc;AAAA;AA2EpB,eAAeC,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}