{"ast":null,"code":"import _objectSpread from\"/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Advanced Data Parser\n * Extracts and normalizes pathogen and antibiotic information from medical conditions data\n * Handles complex text patterns and creates standardized lists for multi-dimensional exploration\n *//**\n * Extract and normalize pathogen names from commonPathogens arrays\n * @param {string} pathogenText - Raw pathogen text from data\n * @returns {Object} - Normalized pathogen info with metadata\n */export const parsePathogen=pathogenText=>{if(!pathogenText||typeof pathogenText!=='string'){return null;}// Clean up the text\nlet cleanText=pathogenText.trim();// Remove citation markers and references\ncleanText=cleanText.replace(/\\[cite.*?\\]/g,'');cleanText=cleanText.replace(/\\(cite.*?\\)/g,'');// Skip entries that are clearly not pathogens (references, notes, etc.)\nconst nonPathogenPatterns=[/^RCTs for/i,/^Observational studies/i,/et al/i,/^Studies/i,/^Research/i];if(nonPathogenPatterns.some(pattern=>pattern.test(cleanText))){return null;}// Extract the main pathogen name\nlet mainName=cleanText;let details='';let gramStatus='unknown';let pathogenType='bacteria';let spectrumCategory='typical';// New: typical, atypical, mixed\n// Handle parenthetical information\nconst parenthesesMatch=cleanText.match(/^([^(]+)\\s*\\(([^)]+)\\)/);if(parenthesesMatch){mainName=parenthesesMatch[1].trim();details=parenthesesMatch[2].trim();}// Determine gram status based on pathogen name\nconst gramPositivePatterns=[/staphylococcus/i,/streptococcus/i,/enterococcus/i,/clostridium/i,/corynebacterium/i,/bacillus/i,/listeria/i];const gramNegativePatterns=[/escherichia/i,/klebsiella/i,/pseudomonas/i,/enterobacter/i,/proteus/i,/citrobacter/i,/haemophilus/i,/moraxella/i,/neisseria/i,/enterobacterales/i,/salmonella/i,/shigella/i,/acinetobacter/i,/stenotrophomonas/i];// Enhanced atypical organism patterns\nconst atypicalPatterns=[/mycoplasma/i,/chlamydia/i,/legionella/i,/rickettsia/i,/coxiella/i,/ehrlichia/i,/anaplasma/i,/bartonella/i,/francisella/i,/brucella/i];// Determine spectrum category and gram status\nif(atypicalPatterns.some(pattern=>pattern.test(mainName))){spectrumCategory='atypical';gramStatus='atypical';// Special category for atypical organisms\n}else if(gramPositivePatterns.some(pattern=>pattern.test(mainName))){gramStatus='positive';spectrumCategory='typical';}else if(gramNegativePatterns.some(pattern=>pattern.test(mainName))){gramStatus='negative';spectrumCategory='typical';}// Determine pathogen type with enhanced categories\nif(/virus/i.test(cleanText)||/viral/i.test(cleanText)||/HSV/i.test(cleanText)){pathogenType='virus';spectrumCategory='atypical';}else if(/fungal/i.test(cleanText)||/candida/i.test(cleanText)||/aspergillus/i.test(cleanText)){pathogenType='fungus';spectrumCategory='atypical';}else if(/mycobacteri/i.test(cleanText)){pathogenType='mycobacteria';spectrumCategory='atypical';gramStatus='acid-fast';// Special classification for mycobacteria\n}else if(atypicalPatterns.some(pattern=>pattern.test(mainName))){pathogenType='atypical bacteria';}// Standardize common abbreviations\nconst abbreviationMap={'S aureus':'Staphylococcus aureus','S pyogenes':'Streptococcus pyogenes','S pneumoniae':'Streptococcus pneumoniae','E coli':'Escherichia coli','E faecalis':'Enterococcus faecalis','E faecium':'Enterococcus faecium','H influenzae':'Haemophilus influenzae','P aeruginosa':'Pseudomonas aeruginosa','K kingae':'Kingella kingae','K pneumoniae':'Klebsiella pneumoniae','M catarrhalis':'Moraxella catarrhalis','N meningitidis':'Neisseria meningitidis','M pneumoniae':'Mycoplasma pneumoniae','C pneumoniae':'Chlamydia pneumoniae','L pneumophila':'Legionella pneumophila','GBS':'Group B Streptococcus','HSV':'Herpes Simplex Virus'};const standardizedName=abbreviationMap[mainName]||mainName;return{originalText:pathogenText,name:standardizedName,shortName:mainName,details:details,gramStatus:gramStatus,type:pathogenType,spectrumCategory:spectrumCategory,// New field for visualization grouping\nisValid:true};};;/**\n * Extract antibiotic names from therapy strings\n * @param {string} therapyText - Raw therapy text from empiricTherapy\n * @returns {Array} - Array of antibiotic objects with metadata\n */export const parseAntibiotics=therapyText=>{if(!therapyText||typeof therapyText!=='string'){return[];}let cleanText=therapyText.trim();// Remove non-drug instructions and context\nconst instructionPatterns=[/Consider surgical drainage[^.]*\\./i,/Drainage[^.]*\\./i,/Choice depends on[^.]*\\./i,/These are empiric[^.]*\\./i,/if.*available\\)/i,/some experts[^)]*\\)/i];instructionPatterns.forEach(pattern=>{cleanText=cleanText.replace(pattern,'');});// Handle empty or non-specific guidance\nif(!cleanText.trim()||/choice depends/i.test(cleanText)||/guided by culture/i.test(cleanText)){return[];}const antibiotics=[];// Split on combinations and alternatives\nconst segments=cleanText.split(/\\s+(?:PLUS|plus|\\+|OR|or)\\s+/i);segments.forEach(segment=>{const antibiotic=parseAntibiotic(segment.trim());if(antibiotic){antibiotics.push(antibiotic);}});return antibiotics;};/**\n * Parse individual antibiotic from text segment\n * @param {string} text - Text segment containing antibiotic name\n * @returns {Object|null} - Antibiotic object or null if invalid\n */const parseAntibiotic=text=>{if(!text||text.length<2)return null;// Remove parenthetical information\nlet cleanName=text.replace(/\\([^)]*\\)/g,'').trim();// Remove dosing information and routes\ncleanName=cleanName.replace(/\\d+\\s*(mg|g|units|mcg).*$/i,'');cleanName=cleanName.replace(/\\b(IV|PO|IM|oral|intravenous|intramuscular)\\b/gi,'');// Skip if it's not actually a drug name\nconst nonDrugPatterns=[/^if\\b/i,/^for\\b/i,/^consider\\b/i,/^add\\b/i,/days?$/i,/weeks?$/i,/\\d+\\s*days?/i,/allergyb?:?/i,/standard/i,/treatment/i];if(nonDrugPatterns.some(pattern=>pattern.test(cleanName))){return null;}// Standardize drug names\nconst drugMap={'Ampicillin-sulbactam':'Ampicillin/sulbactam','Ampicillin- sulbactam':'Ampicillin/sulbactam','Amoxicillin-clavulanate':'Amoxicillin/clavulanate','Amoxicillin- clavulanate':'Amoxicillin/clavulanate','Piperacillin-tazobactam':'Piperacillin/tazobactam','Piperacillin- tazobactam':'Piperacillin/tazobactam','TMP-SMX':'Trimethoprim/sulfamethoxazole','TMP/SMX':'Trimethoprim/sulfamethoxazole'};const standardizedName=drugMap[cleanName]||cleanName;// Determine drug class\nconst drugClass=getDrugClass(standardizedName);return{originalText:text,name:standardizedName,class:drugClass,isValid:true};};/**\n * Determine drug class based on antibiotic name\n * @param {string} drugName - Standardized drug name\n * @returns {string} - Drug class\n */const getDrugClass=drugName=>{const drugClasses={'Penicillins':['Penicillin','Ampicillin','Amoxicillin','Oxacillin','Nafcillin','Ampicillin/sulbactam','Amoxicillin/clavulanate','Piperacillin/tazobactam'],'Cephalosporins':['Cefazolin','Cephalexin','Ceftriaxone','Cefotaxime','Ceftazidime','Cefepime','Cefdinir','Cefpodoxime','Cefuroxime','Ceftaroline'],'Glycopeptides':['Vancomycin'],'Lincosamides':['Clindamycin'],'Oxazolidinones':['Linezolid'],'Lipopeptides':['Daptomycin'],'Macrolides':['Azithromycin','Erythromycin'],'Aminoglycosides':['Gentamicin','Amikacin','Tobramycin'],'Fluoroquinolones':['Ciprofloxacin','Levofloxacin'],'Tetracyclines':['Doxycycline'],'Folate Antagonists':['Trimethoprim/sulfamethoxazole'],'Nitroimidazoles':['Metronidazole'],'Nitrofurans':['Nitrofurantoin'],'Antivirals':['Acyclovir']};for(const[className,drugs]of Object.entries(drugClasses)){if(drugs.some(drug=>drugName.includes(drug)||drug.includes(drugName))){return className;}}return'Other';};// Enhanced antibiotic spectrum database with coverage scoring and visualization data\nexport const antibioticSpectrumData={// Penicillins\n'Penicillin':{class:'Penicillins',subclass:'Natural Penicillins',spectrum:{gramPositive:9,// Score 0-10\ngramNegative:2,atypical:1,anaerobes:7},coverage:{typical:['Streptococcus pyogenes','Streptococcus pneumoniae','Enterococcus faecalis'],limited:['Staphylococcus aureus (MSSA only)'],resistant:['MRSA','Most gram-negatives','Atypicals']},mechanismOfAction:'Cell wall synthesis inhibition',resistance:['Beta-lactamase production','PBP mutations'],visualProperties:{color:'#3b82f6',position:{angle:0,radius:0.8}}},'Ampicillin':{class:'Penicillins',subclass:'Aminopenicillins',spectrum:{gramPositive:8,gramNegative:5,atypical:1,anaerobes:6},coverage:{typical:['Enterococcus species','Listeria monocytogenes','Some E. coli'],limited:['Streptococcus species','Haemophilus influenzae (if sensitive)'],resistant:['MRSA','Most Enterobacterales','Pseudomonas']},mechanismOfAction:'Cell wall synthesis inhibition',resistance:['Beta-lactamase production'],visualProperties:{color:'#3b82f6',position:{angle:30,radius:0.8}}},'Amoxicillin':{class:'Penicillins',subclass:'Aminopenicillins',spectrum:{gramPositive:8,gramNegative:5,atypical:1,anaerobes:6},coverage:{typical:['Streptococcus pneumoniae','Enterococcus faecalis','Some E. coli'],limited:['Haemophilus influenzae','Moraxella catarrhalis'],resistant:['MRSA','Beta-lactamase producing organisms']},mechanismOfAction:'Cell wall synthesis inhibition',resistance:['Beta-lactamase production'],visualProperties:{color:'#3b82f6',position:{angle:45,radius:0.8}}},'Amoxicillin/clavulanate':{class:'Penicillins',subclass:'Beta-lactamase inhibitor combinations',spectrum:{gramPositive:8,gramNegative:7,atypical:1,anaerobes:8},coverage:{typical:['MSSA','Streptococcus species','H. influenzae','M. catarrhalis','E. coli'],limited:['Some Klebsiella species','Anaerobes'],resistant:['MRSA','Pseudomonas','ESBL producers']},mechanismOfAction:'Cell wall synthesis inhibition + beta-lactamase inhibition',resistance:['ESBL production','AmpC beta-lactamases'],visualProperties:{color:'#1e40af',position:{angle:60,radius:0.9}}},'Piperacillin/tazobactam':{class:'Penicillins',subclass:'Antipseudomonal penicillins',spectrum:{gramPositive:7,gramNegative:9,atypical:1,anaerobes:9},coverage:{typical:['Pseudomonas aeruginosa','Most Enterobacterales','MSSA','Streptococcus species'],limited:['Some ESBL producers','Anaerobes'],resistant:['MRSA','Enterococcus faecium','Carbapenem-resistant organisms']},mechanismOfAction:'Cell wall synthesis inhibition + beta-lactamase inhibition',resistance:['Carbapenemases','AmpC hyperproduction'],visualProperties:{color:'#1e40af',position:{angle:75,radius:1.0}}},// Cephalosporins\n'Cefazolin':{class:'Cephalosporins',subclass:'1st Generation',spectrum:{gramPositive:9,gramNegative:4,atypical:0,anaerobes:2},coverage:{typical:['MSSA','Streptococcus species','Some E. coli','Proteus mirabilis'],limited:['Klebsiella pneumoniae'],resistant:['MRSA','Enterococcus','Pseudomonas','Anaerobes']},mechanismOfAction:'Cell wall synthesis inhibition',resistance:['Beta-lactamase production','PBP mutations'],visualProperties:{color:'#10b981',position:{angle:90,radius:0.8}}},'Ceftriaxone':{class:'Cephalosporins',subclass:'3rd Generation',spectrum:{gramPositive:7,gramNegative:8,atypical:0,anaerobes:1},coverage:{typical:['Streptococcus pneumoniae','Most Enterobacterales','H. influenzae','N. meningitidis'],limited:['Some MSSA','Moraxella catarrhalis'],resistant:['MRSA','Enterococcus','Pseudomonas','ESBL producers']},mechanismOfAction:'Cell wall synthesis inhibition',resistance:['ESBL production','AmpC beta-lactamases'],visualProperties:{color:'#059669',position:{angle:120,radius:0.9}}},'Cefepime':{class:'Cephalosporins',subclass:'4th Generation',spectrum:{gramPositive:7,gramNegative:9,atypical:0,anaerobes:1},coverage:{typical:['Pseudomonas aeruginosa','Most Enterobacterales','Streptococcus pneumoniae'],limited:['Some ESBL producers','MSSA'],resistant:['MRSA','Enterococcus','Carbapenem-resistant organisms']},mechanismOfAction:'Cell wall synthesis inhibition',resistance:['Carbapenemases','AmpC hyperproduction'],visualProperties:{color:'#047857',position:{angle:135,radius:1.0}}},// Glycopeptides\n'Vancomycin':{class:'Glycopeptides',subclass:'Glycopeptides',spectrum:{gramPositive:10,gramNegative:0,atypical:0,anaerobes:8},coverage:{typical:['MRSA','MSSA','Enterococcus faecalis','CoNS','C. difficile (oral)'],limited:['Streptococcus species'],resistant:['Gram-negatives','VRE','Some atypicals']},mechanismOfAction:'Cell wall synthesis inhibition (different target than beta-lactams)',resistance:['van gene cluster','Thick cell wall (hetero-resistance)'],visualProperties:{color:'#7c3aed',position:{angle:150,radius:0.9}}},// Lincosamides\n'Clindamycin':{class:'Lincosamides',subclass:'Lincosamides',spectrum:{gramPositive:8,gramNegative:1,atypical:2,anaerobes:9},coverage:{typical:['MSSA','Streptococcus species','Anaerobes (most)'],limited:['Some MRSA (if D-test negative)','Some atypicals'],resistant:['Gram-negatives','Enterococcus','C. difficile']},mechanismOfAction:'Protein synthesis inhibition (50S ribosomal subunit)',resistance:['erm genes (inducible)','lincosamide resistance'],visualProperties:{color:'#dc2626',position:{angle:180,radius:0.8}}},// Macrolides\n'Azithromycin':{class:'Macrolides',subclass:'Azalides',spectrum:{gramPositive:6,gramNegative:3,atypical:9,anaerobes:4},coverage:{typical:['Streptococcus pyogenes','Some Streptococcus pneumoniae','H. influenzae'],atypical:['Mycoplasma pneumoniae','Chlamydia species','Legionella pneumophila'],resistant:['MRSA','Most Enterobacterales','Pseudomonas']},mechanismOfAction:'Protein synthesis inhibition (50S ribosomal subunit)',resistance:['erm genes','efflux pumps'],visualProperties:{color:'#f59e0b',position:{angle:210,radius:0.8}}},// Fluoroquinolones\n'Ciprofloxacin':{class:'Fluoroquinolones',subclass:'Fluoroquinolones',spectrum:{gramPositive:5,gramNegative:9,atypical:7,anaerobes:2},coverage:{typical:['Pseudomonas aeruginosa','Most Enterobacterales','Some Streptococcus species'],atypical:['Some Mycoplasma','Some Chlamydia'],resistant:['MRSA','Streptococcus pneumoniae','Anaerobes']},mechanismOfAction:'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',resistance:['gyr/par mutations','efflux pumps','qnr genes'],visualProperties:{color:'#8b5cf6',position:{angle:240,radius:0.9}}},'Levofloxacin':{class:'Fluoroquinolones',subclass:'Respiratory Fluoroquinolones',spectrum:{gramPositive:7,gramNegative:8,atypical:8,anaerobes:3},coverage:{typical:['Streptococcus pneumoniae','Most Enterobacterales','Some Pseudomonas'],atypical:['Mycoplasma pneumoniae','Chlamydia species','Legionella pneumophila'],resistant:['MRSA (variable)','Anaerobes']},mechanismOfAction:'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',resistance:['gyr/par mutations','efflux pumps'],visualProperties:{color:'#7c3aed',position:{angle:255,radius:0.9}}},// Aminoglycosides\n'Gentamicin':{class:'Aminoglycosides',subclass:'Aminoglycosides',spectrum:{gramPositive:6,gramNegative:8,atypical:0,anaerobes:0},coverage:{typical:['Most Enterobacterales','Pseudomonas aeruginosa','Staphylococcus species (synergy)'],limited:['Enterococcus (synergy only)'],resistant:['Streptococcus','Anaerobes','Atypicals']},mechanismOfAction:'Protein synthesis inhibition (30S ribosomal subunit)',resistance:['Aminoglycoside-modifying enzymes','16S rRNA methylases'],visualProperties:{color:'#ef4444',position:{angle:270,radius:0.7}}},// Oxazolidinones\n'Linezolid':{class:'Oxazolidinones',subclass:'Oxazolidinones',spectrum:{gramPositive:10,gramNegative:0,atypical:2,anaerobes:7},coverage:{typical:['MRSA','VRE','All Streptococcus species','CoNS'],limited:['Some anaerobes'],resistant:['Gram-negatives','Most atypicals']},mechanismOfAction:'Protein synthesis inhibition (50S ribosomal subunit, unique binding site)',resistance:['cfr gene','23S rRNA mutations'],visualProperties:{color:'#be185d',position:{angle:300,radius:0.8}}},// Lipopeptides\n'Daptomycin':{class:'Lipopeptides',subclass:'Lipopeptides',spectrum:{gramPositive:10,gramNegative:0,atypical:0,anaerobes:8},coverage:{typical:['MRSA','VRE','All Staphylococcus species','Most Streptococcus species'],limited:['Enterococcus species'],resistant:['Gram-negatives','Atypicals','Pneumonia (inactivated by surfactant)']},mechanismOfAction:'Cell membrane depolarization',resistance:['Cell membrane changes','mprF mutations'],visualProperties:{color:'#991b1b',position:{angle:330,radius:0.8}}}};// Spectrum scoring utilities\nexport const calculateSpectrumScore=(antibiotic,pathogenCategory)=>{const data=antibioticSpectrumData[antibiotic];if(!data)return 0;switch(pathogenCategory){case'positive':return data.spectrum.gramPositive;case'negative':return data.spectrum.gramNegative;case'atypical':return data.spectrum.atypical;case'anaerobes':return data.spectrum.anaerobes;default:return 0;}};export const getAntibioticsBySpectrum=function(pathogenCategory){let minScore=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;return Object.entries(antibioticSpectrumData).filter(_ref=>{let[name,data]=_ref;return calculateSpectrumScore(name,pathogenCategory)>=minScore;}).map(_ref2=>{let[name,data]=_ref2;return _objectSpread({name,score:calculateSpectrumScore(name,pathogenCategory),class:data.class},data);}).sort((a,b)=>b.score-a.score);};export const getSpectrumOverlap=(antibiotic1,antibiotic2)=>{const data1=antibioticSpectrumData[antibiotic1];const data2=antibioticSpectrumData[antibiotic2];if(!data1||!data2)return 0;const categories=['gramPositive','gramNegative','atypical','anaerobes'];let totalOverlap=0;categories.forEach(category=>{const min=Math.min(data1.spectrum[category],data2.spectrum[category]);const max=Math.max(data1.spectrum[category],data2.spectrum[category]);totalOverlap+=max>0?min/max:0;});return totalOverlap/categories.length;};// Drug class color mapping for visualizations\nexport const drugClassColors={'Penicillins':'#3b82f6','Cephalosporins':'#10b981','Glycopeptides':'#7c3aed','Lincosamides':'#dc2626','Macrolides':'#f59e0b','Fluoroquinolones':'#8b5cf6','Aminoglycosides':'#ef4444','Oxazolidinones':'#be185d','Lipopeptides':'#991b1b','Tetracyclines':'#059669','Folate Antagonists':'#0d9488','Nitroimidazoles':'#7c2d12','Nitrofurans':'#a21caf','Antivirals':'#1e40af'};// Neo4j Graph Database Schema and Data Transformation Utilities\n// Neo4j Schema Design\nexport const neo4jSchema={nodeTypes:{PATHOGEN:{properties:['id','name','gramStatus','type','spectrumCategory'],indexes:['name','gramStatus','type']},ANTIBIOTIC:{properties:['id','name','class','subclass','mechanismOfAction'],indexes:['name','class']},CONDITION:{properties:['id','name','category','severity'],indexes:['name','category']},DRUG_CLASS:{properties:['id','name','mechanism','spectrumType'],indexes:['name']}},relationshipTypes:{TREATS:{from:'ANTIBIOTIC',to:'PATHOGEN',properties:['effectiveness','resistance_risk','clinical_evidence']},CAUSES:{from:'PATHOGEN',to:'CONDITION',properties:['frequency','severity','typical_presentation']},BELONGS_TO:{from:'ANTIBIOTIC',to:'DRUG_CLASS',properties:[]},SYNERGISTIC_WITH:{from:'ANTIBIOTIC',to:'ANTIBIOTIC',properties:['synergy_score','mechanism']},RESISTANT_TO:{from:'PATHOGEN',to:'ANTIBIOTIC',properties:['resistance_mechanism','prevalence']},ALTERNATIVE_TO:{from:'ANTIBIOTIC',to:'ANTIBIOTIC',properties:['similarity_score','clinical_context']}}};// Transform medical conditions data to Neo4j format\nexport const transformToNeo4jFormat=medicalConditions=>{const nodes=[];const relationships=[];// Track unique entities\nconst pathogenSet=new Set();const antibioticSet=new Set();const conditionSet=new Set();const drugClassSet=new Set();medicalConditions.forEach(condition=>{// Create condition node\nconst conditionNode={type:'CONDITION',id:condition.id,properties:{name:condition.name,category:condition.category,description:condition.description,severity:condition.severity||'unknown'}};if(!conditionSet.has(condition.id)){nodes.push(conditionNode);conditionSet.add(condition.id);}// Process pathogens\nif(condition.commonPathogens){condition.commonPathogens.forEach(pathogenText=>{const pathogen=parsePathogen(pathogenText);if(pathogen&&pathogen.isValid){const pathogenId=pathogen.name.toLowerCase().replace(/\\s+/g,'_');// Create pathogen node\nif(!pathogenSet.has(pathogenId)){const pathogenNode={type:'PATHOGEN',id:pathogenId,properties:{name:pathogen.name,gramStatus:pathogen.gramStatus,type:pathogen.type,spectrumCategory:pathogen.spectrumCategory}};nodes.push(pathogenNode);pathogenSet.add(pathogenId);}// Create CAUSES relationship\nrelationships.push({type:'CAUSES',from:{type:'PATHOGEN',id:pathogenId},to:{type:'CONDITION',id:condition.id},properties:{frequency:'common',// Would be derived from clinical data\nseverity:condition.severity||'moderate'}});}});}// Process empiric therapy antibiotics\nif(condition.empiricTherapy){Object.entries(condition.empiricTherapy).forEach(_ref3=>{let[context,therapy]=_ref3;const antibiotics=parseAntibiotics(therapy);antibiotics.forEach(antibiotic=>{if(antibiotic&&antibiotic.isValid){const antibioticId=antibiotic.name.toLowerCase().replace(/\\s+/g,'_').replace(/\\//g,'_');// Create antibiotic node\nif(!antibioticSet.has(antibioticId)){var _antibioticSpectrumDa;const antibioticNode={type:'ANTIBIOTIC',id:antibioticId,properties:{name:antibiotic.name,class:antibiotic.class,mechanismOfAction:((_antibioticSpectrumDa=antibioticSpectrumData[antibiotic.name])===null||_antibioticSpectrumDa===void 0?void 0:_antibioticSpectrumDa.mechanismOfAction)||'unknown'}};nodes.push(antibioticNode);antibioticSet.add(antibioticId);// Create drug class node and relationship\nconst drugClassId=antibiotic.class.toLowerCase().replace(/\\s+/g,'_');if(!drugClassSet.has(drugClassId)){var _antibioticSpectrumDa2;const drugClassNode={type:'DRUG_CLASS',id:drugClassId,properties:{name:antibiotic.class,mechanism:((_antibioticSpectrumDa2=antibioticSpectrumData[antibiotic.name])===null||_antibioticSpectrumDa2===void 0?void 0:_antibioticSpectrumDa2.mechanismOfAction)||'unknown'}};nodes.push(drugClassNode);drugClassSet.add(drugClassId);}// Create BELONGS_TO relationship\nrelationships.push({type:'BELONGS_TO',from:{type:'ANTIBIOTIC',id:antibioticId},to:{type:'DRUG_CLASS',id:drugClassId},properties:{}});}// Create treatment relationships with pathogens\nif(condition.commonPathogens){condition.commonPathogens.forEach(pathogenText=>{const pathogen=parsePathogen(pathogenText);if(pathogen&&pathogen.isValid){const pathogenId=pathogen.name.toLowerCase().replace(/\\s+/g,'_');const effectiveness=calculateTreatmentEffectiveness(antibiotic,pathogen);relationships.push({type:'TREATS',from:{type:'ANTIBIOTIC',id:antibioticId},to:{type:'PATHOGEN',id:pathogenId},properties:{effectiveness:effectiveness,clinical_evidence:context,resistance_risk:calculateResistanceRisk(antibiotic,pathogen)}});}});}}});});}});// Add synergy relationships\nconst synergies=identifyAntibioticSynergies(Array.from(antibioticSet));relationships.push(...synergies);return{nodes,relationships};};// Calculate treatment effectiveness based on spectrum data\nconst calculateTreatmentEffectiveness=(antibiotic,pathogen)=>{const spectrumData=antibioticSpectrumData[antibiotic.name];if(!spectrumData)return 5;// Default moderate effectiveness\nswitch(pathogen.gramStatus){case'positive':return spectrumData.spectrum.gramPositive;case'negative':return spectrumData.spectrum.gramNegative;case'atypical':return spectrumData.spectrum.atypical;default:return 5;}};// Calculate resistance risk\nconst calculateResistanceRisk=(antibiotic,pathogen)=>{const spectrumData=antibioticSpectrumData[antibiotic.name];if(!spectrumData||!spectrumData.resistance)return'moderate';// Risk factors based on resistance mechanisms\nconst riskFactors=spectrumData.resistance.length;if(riskFactors<=1)return'low';if(riskFactors<=3)return'moderate';return'high';};// Identify potential antibiotic synergies\nconst identifyAntibioticSynergies=antibioticIds=>{const synergies=[];const knownSynergies=[{pair:['ampicillin','gentamicin'],mechanism:'cell_wall_aminoglycoside_synergy',score:8},{pair:['vancomycin','gentamicin'],mechanism:'cell_wall_aminoglycoside_synergy',score:7},{pair:['piperacillin_tazobactam','vancomycin'],mechanism:'broad_spectrum_combination',score:6}];knownSynergies.forEach(synergy=>{const[drug1,drug2]=synergy.pair;if(antibioticIds.includes(drug1)&&antibioticIds.includes(drug2)){synergies.push({type:'SYNERGISTIC_WITH',from:{type:'ANTIBIOTIC',id:drug1},to:{type:'ANTIBIOTIC',id:drug2},properties:{synergy_score:synergy.score,mechanism:synergy.mechanism}});}});return synergies;};// Generate Cypher queries for Neo4j\nexport const generateCypherQueries=neo4jData=>{const{nodes,relationships}=neo4jData;const queries=[];// Node creation queries\nconst nodeQueries=nodes.reduce((acc,node)=>{const nodeType=node.type;if(!acc[nodeType])acc[nodeType]=[];acc[nodeType].push(node);return acc;},{});Object.entries(nodeQueries).forEach(_ref4=>{let[type,nodeList]=_ref4;const batchSize=100;for(let i=0;i<nodeList.length;i+=batchSize){const batch=nodeList.slice(i,i+batchSize);const query=\"\\n        UNWIND $nodes AS node\\n        CREATE (n:\".concat(type,\")\\n        SET n = node.properties\\n        SET n.id = node.id\\n      \");queries.push({query,parameters:{nodes:batch}});}});// Relationship creation queries\nconst relQueries=relationships.reduce((acc,rel)=>{const relType=rel.type;if(!acc[relType])acc[relType]=[];acc[relType].push(rel);return acc;},{});Object.entries(relQueries).forEach(_ref5=>{let[type,relList]=_ref5;const batchSize=100;for(let i=0;i<relList.length;i+=batchSize){const batch=relList.slice(i,i+batchSize);const query=\"\\n        UNWIND $relationships AS rel\\n        MATCH (from:\".concat(batch[0].from.type,\" {id: rel.from.id})\\n        MATCH (to:\").concat(batch[0].to.type,\" {id: rel.to.id})\\n        CREATE (from)-[r:\").concat(type,\"]->(to)\\n        SET r = rel.properties\\n      \");queries.push({query,parameters:{relationships:batch}});}});return queries;};// Advanced graph analysis queries\nexport const advancedGraphQueries={// Find shortest antibiotic path between two pathogens\nfindTreatmentPath:(pathogen1,pathogen2)=>\"\\n    MATCH path = shortestPath(\\n      (p1:PATHOGEN {name: $pathogen1})-[:TREATS*..4]-(p2:PATHOGEN {name: $pathogen2})\\n    )\\n    RETURN path, length(path) as pathLength\\n  \",// Identify super-bugs (highly connected resistant pathogens)\nfindSuperbugs:()=>\"\\n    MATCH (p:PATHOGEN)-[r:RESISTANT_TO]->(a:ANTIBIOTIC)\\n    WITH p, count(r) as resistanceCount\\n    WHERE resistanceCount > 3\\n    RETURN p.name, resistanceCount\\n    ORDER BY resistanceCount DESC\\n    LIMIT 10\\n  \",// Find antibiotic alternatives based on spectrum similarity\nfindAlternatives:antibiotic=>\"\\n    MATCH (target:ANTIBIOTIC {name: $antibiotic})-[:TREATS]->(p:PATHOGEN)\\n    MATCH (alt:ANTIBIOTIC)-[:TREATS]->(p)\\n    WHERE alt <> target\\n    WITH alt, count(p) as sharedPathogens\\n    MATCH (alt)-[:TREATS]->(allP:PATHOGEN)\\n    WITH alt, sharedPathogens, count(allP) as totalPathogens\\n    RETURN alt.name, sharedPathogens, totalPathogens, \\n           toFloat(sharedPathogens)/totalPathogens as similarity\\n    ORDER BY similarity DESC\\n    LIMIT 5\\n  \",// Community detection for drug classes\nfindDrugCommunities:()=>\"\\n    CALL gds.louvain.stream('antibioticGraph')\\n    YIELD nodeId, communityId\\n    MATCH (a:ANTIBIOTIC)-[:BELONGS_TO]->(dc:DRUG_CLASS)\\n    WHERE id(a) = nodeId\\n    RETURN dc.name, communityId, collect(a.name) as antibiotics\\n  \"};// Export utility for generating complete Neo4j dataset\nexport const generateNeo4jDataset=medicalConditions=>{const neo4jData=transformToNeo4jFormat(medicalConditions);const cypherQueries=generateCypherQueries(neo4jData);return{schema:neo4jSchema,data:neo4jData,queries:cypherQueries,advancedQueries:advancedGraphQueries,statistics:{nodeCount:neo4jData.nodes.length,relationshipCount:neo4jData.relationships.length,nodeTypes:Object.keys(neo4jSchema.nodeTypes),relationshipTypes:Object.keys(neo4jSchema.relationshipTypes)}};};/**\n * ANTIBIOTIC LEARNING APP - ADVANCED VISUALIZATION DOCUMENTATION\n * ==============================================================\n * \n * This module provides comprehensive data visualization capabilities for pediatric\n * antibiotic learning, including Venn diagrams, rotating wheels, radar charts,\n * and Neo4j graph database integration.\n * \n * @version 2.0.0\n * @author Claude AI Assistant\n * @date 2024\n */// =============================================================================\n// PATHOGEN CLASSIFICATION SYSTEM\n// =============================================================================\n/**\n * Enhanced pathogen classification supporting typical and atypical organisms\n * \n * Categories:\n * - Gram Positive: Traditional gram-positive bacteria (Staphylococcus, Streptococcus, etc.)\n * - Gram Negative: Traditional gram-negative bacteria (E. coli, Pseudomonas, etc.)\n * - Atypical: Mycoplasma, Chlamydia, Legionella, and other special organisms\n * - Acid-fast: Mycobacteria (special classification)\n * \n * Usage:\n * const pathogen = parsePathogen(\"Mycoplasma pneumoniae\");\n * // Returns: { gramStatus: 'atypical', spectrumCategory: 'atypical', ... }\n */// =============================================================================\n// ANTIBIOTIC SPECTRUM DATABASE\n// =============================================================================\n/**\n * Comprehensive antibiotic spectrum database with 10-point scoring system\n * \n * Scoring System (0-10):\n * - 0-2: Poor coverage\n * - 3-4: Limited coverage  \n * - 5-6: Moderate coverage\n * - 7-8: Good coverage\n * - 9-10: Excellent coverage\n * \n * Spectrum Categories:\n * - gramPositive: Coverage against gram-positive bacteria\n * - gramNegative: Coverage against gram-negative bacteria\n * - atypical: Coverage against atypical organisms\n * - anaerobes: Coverage against anaerobic bacteria\n * \n * Example:\n * const vancomycin = antibioticSpectrumData['Vancomycin'];\n * // Returns: { spectrum: { gramPositive: 10, gramNegative: 0, ... }, ... }\n */// =============================================================================\n// VISUALIZATION COMPONENTS\n// =============================================================================\n/**\n * 1. ANTIBIOTIC SPECTRUM VENN DIAGRAM\n * ===================================\n * \n * Interactive 3-circle Venn diagram showing antibiotic coverage across\n * Gram-positive, Gram-negative, and Atypical pathogen categories.\n * \n * Features:\n * - Clickable regions show antibiotics with specific coverage patterns\n * - Hover tooltips display antibiotic counts and examples\n * - Animated pulse effects for region selection\n * - Real-time coverage analysis\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotic names to highlight\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onSpectrumAnalysis: Callback for region analysis\n * \n * Usage:\n * <AntibioticSpectrumVennDiagram \n *   selectedAntibiotics={['Vancomycin', 'Ciprofloxacin']}\n *   onSpectrumAnalysis={(data) => console.log(data)}\n * />\n *//**\n * 2. NORTHWESTERN-STYLE ROTATING WHEEL\n * ====================================\n * \n * Rotating antibiotic selection wheel inspired by Northwestern University's\n * antibiotic decision support tools.\n * \n * Structure:\n * - Center: Medical condition selector\n * - Inner ring: Pathogen categories\n * - Outer ring: Drug classes (rotating)\n * - Antibiotic nodes: Individual antibiotics within classes\n * \n * Features:\n * - Manual and automatic rotation\n * - Connection lines showing effectiveness\n * - Drug class filtering and selection\n * - Variable rotation speed control\n * \n * Props:\n * - selectedCondition: Medical condition object\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onDrugClassSelect: Callback for drug class selection\n * \n * Usage:\n * <AntibioticRotatingWheel \n *   selectedCondition={pneumoniaCondition}\n *   onAntibioticSelect={(ab) => console.log(ab)}\n * />\n *//**\n * 3. ANTIBIOTIC SPECTRUM RADAR CHART\n * ==================================\n * \n * Multi-dimensional radar chart for antibiotic spectrum analysis and comparison.\n * \n * Metrics:\n * - Gram Positive Coverage (0-10)\n * - Gram Negative Coverage (0-10)\n * - Atypical Coverage (0-10)\n * - Anaerobe Coverage (0-10)\n * - Resistance Profile (calculated)\n * - Safety Profile (calculated)\n * \n * Features:\n * - Multiple antibiotic overlay\n * - Comparative analysis panel\n * - Interactive metric selection\n * - Hover tooltips with detailed scores\n * - Statistical comparison (min/max/avg)\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotics to compare\n * - comparisonMode: Enable comparative analysis\n * - onMetricSelect: Callback for metric analysis\n * \n * Usage:\n * <AntibioticSpectrumRadarChart \n *   selectedAntibiotics={['Vancomycin', 'Linezolid', 'Daptomycin']}\n *   comparisonMode={true}\n * />\n */// =============================================================================\n// NEO4J GRAPH DATABASE INTEGRATION\n// =============================================================================\n/**\n * Graph database schema for advanced antibiotic relationship analysis\n * \n * Node Types:\n * - PATHOGEN: Bacterial, viral, fungal pathogens\n * - ANTIBIOTIC: Individual antimicrobial agents\n * - CONDITION: Medical conditions/infections\n * - DRUG_CLASS: Antibiotic classifications\n * \n * Relationship Types:\n * - TREATS: Antibiotic effectiveness against pathogens\n * - CAUSES: Pathogen association with conditions\n * - BELONGS_TO: Antibiotic classification\n * - SYNERGISTIC_WITH: Drug combination synergies\n * - RESISTANT_TO: Resistance patterns\n * - ALTERNATIVE_TO: Alternative therapy options\n * \n * Advanced Queries:\n * - Treatment path analysis\n * - Superbug identification\n * - Alternative drug discovery\n * - Community detection\n * \n * Usage:\n * const dataset = generateNeo4jDataset(medicalConditions);\n * // Returns complete Neo4j-ready dataset with nodes, relationships, and queries\n */// =============================================================================\n// DATA TRANSFORMATION UTILITIES\n// =============================================================================\n/**\n * Spectrum Scoring Functions:\n * \n * calculateSpectrumScore(antibiotic, pathogenCategory)\n * - Returns 0-10 score for specific pathogen category\n * \n * getAntibioticsBySpectrum(pathogenCategory, minScore)\n * - Returns ranked list of antibiotics for category\n * \n * getSpectrumOverlap(antibiotic1, antibiotic2)\n * - Returns 0-1 similarity score between antibiotics\n * \n * Example:\n * const score = calculateSpectrumScore('Vancomycin', 'positive'); // Returns 10\n * const alternatives = getAntibioticsBySpectrum('atypical', 7);    // High-scoring atypical coverage\n * const overlap = getSpectrumOverlap('Penicillin', 'Ampicillin'); // Similarity score\n */// =============================================================================\n// INTEGRATION GUIDE\n// =============================================================================\n/**\n * Adding New Visualizations to Main App:\n * \n * 1. Import components:\n *    import { AntibioticSpectrumVennDiagram, AntibioticRotatingWheel, \n *             AntibioticSpectrumRadarChart } from './components/PathogenNetworkVisualization';\n * \n * 2. Add to component state:\n *    const [selectedVisualization, setSelectedVisualization] = useState('venn');\n *    const [selectedAntibiotics, setSelectedAntibiotics] = useState([]);\n * \n * 3. Render conditionally:\n *    {selectedVisualization === 'venn' && \n *      <AntibioticSpectrumVennDiagram \n *        selectedAntibiotics={selectedAntibiotics}\n *        onSpectrumAnalysis={handleSpectrumAnalysis}\n *      />\n *    }\n * \n * 4. Add visualization selector:\n *    <select onChange={(e) => setSelectedVisualization(e.target.value)}>\n *      <option value=\"venn\">Venn Diagram</option>\n *      <option value=\"wheel\">Rotating Wheel</option>\n *      <option value=\"radar\">Radar Chart</option>\n *    </select>\n */// =============================================================================\n// PERFORMANCE OPTIMIZATION\n// =============================================================================\n/**\n * Optimization Strategies:\n * \n * 1. Data Memoization:\n *    - Use React.useMemo() for expensive calculations\n *    - Cache spectrum scores and pathogen classifications\n * \n * 2. Virtual Rendering:\n *    - Implement viewport culling for large datasets\n *    - Use requestAnimationFrame for smooth animations\n * \n * 3. Progressive Loading:\n *    - Load visualizations on demand\n *    - Implement lazy loading for Neo4j connections\n * \n * 4. Memory Management:\n *    - Clean up SVG animations and event listeners\n *    - Use WeakMap for temporary data storage\n */// =============================================================================\n// ACCESSIBILITY FEATURES\n// =============================================================================\n/**\n * Accessibility Enhancements:\n * \n * 1. Keyboard Navigation:\n *    - Tab through interactive elements\n *    - Arrow keys for rotation and selection\n *    - Enter/Space for activation\n * \n * 2. Screen Reader Support:\n *    - ARIA labels for all interactive elements\n *    - Live regions for dynamic updates\n *    - Semantic SVG structure\n * \n * 3. Visual Accessibility:\n *    - High contrast color schemes\n *    - Pattern fills for color-blind users\n *    - Scalable text and UI elements\n * \n * 4. Cognitive Accessibility:\n *    - Clear navigation flow\n *    - Consistent interaction patterns\n *    - Help tooltips and guidance\n */// =============================================================================\n// CLINICAL INTEGRATION\n// =============================================================================\n/**\n * Medical Decision Support Features:\n * \n * 1. Evidence-Based Scoring:\n *    - Clinical trial effectiveness data\n *    - Resistance surveillance integration\n *    - Local antibiogram support\n * \n * 2. Clinical Context:\n *    - Patient-specific factors (age, allergies, renal function)\n *    - Severity-based recommendations\n *    - Drug interaction checking\n * \n * 3. Educational Features:\n *    - Mechanism of action explanations\n *    - Resistance pattern tutorials\n *    - Case-based learning scenarios\n * \n * 4. Quality Metrics:\n *    - Antibiotic stewardship tracking\n *    - Learning progress analytics\n *    - Clinical outcome correlation\n */export const VISUALIZATION_DOCUMENTATION={version:'2.0.0',components:['VennDiagram','RotatingWheel','RadarChart','Neo4jIntegration'],features:['PathogenClassification','SpectrumAnalysis','GraphDatabase','ClinicalDecisionSupport'],lastUpdated:new Date().toISOString(),apiReference:'See individual component documentation above'};/**\n * Process all conditions and extract normalized pathogen and antibiotic data\n * @param {Array} conditions - Array of medical condition objects\n * @returns {Object} - Processed data with pathogens and antibiotics\n */export const processConditionsData=conditions=>{const pathogens=new Map();const antibiotics=new Map();const conditionMap=new Map();conditions.forEach(condition=>{conditionMap.set(condition.id,condition);// Process pathogens\nif(condition.commonPathogens&&Array.isArray(condition.commonPathogens)){condition.commonPathogens.forEach(pathogenText=>{const pathogen=parsePathogen(pathogenText);if(pathogen&&pathogen.isValid){if(!pathogens.has(pathogen.name)){pathogens.set(pathogen.name,_objectSpread(_objectSpread({},pathogen),{},{conditions:new Set(),count:0}));}const pathogenData=pathogens.get(pathogen.name);pathogenData.conditions.add(condition.id);pathogenData.count++;}});}// Process antibiotics from empiric therapy\nif(condition.empiricTherapy&&typeof condition.empiricTherapy==='object'){Object.values(condition.empiricTherapy).forEach(therapyText=>{const antibioticsList=parseAntibiotics(therapyText);antibioticsList.forEach(antibiotic=>{if(antibiotic&&antibiotic.isValid){if(!antibiotics.has(antibiotic.name)){antibiotics.set(antibiotic.name,_objectSpread(_objectSpread({},antibiotic),{},{conditions:new Set(),therapyContexts:new Set(),count:0}));}const antibioticData=antibiotics.get(antibiotic.name);antibioticData.conditions.add(condition.id);antibioticData.therapyContexts.add(\"\".concat(condition.name,\": \").concat(therapyText));antibioticData.count++;}});});}});// Convert Sets to Arrays for serialization\nconst pathogenArray=Array.from(pathogens.values()).map(p=>_objectSpread(_objectSpread({},p),{},{conditions:Array.from(p.conditions),therapyContexts:undefined}));const antibioticArray=Array.from(antibiotics.values()).map(a=>_objectSpread(_objectSpread({},a),{},{conditions:Array.from(a.conditions),therapyContexts:Array.from(a.therapyContexts)}));return{pathogens:pathogenArray,antibiotics:antibioticArray,totalPathogens:pathogenArray.length,totalAntibiotics:antibioticArray.length,conditions:Array.from(conditionMap.values())};};","map":{"version":3,"names":["parsePathogen","pathogenText","cleanText","trim","replace","nonPathogenPatterns","some","pattern","test","mainName","details","gramStatus","pathogenType","spectrumCategory","parenthesesMatch","match","gramPositivePatterns","gramNegativePatterns","atypicalPatterns","abbreviationMap","standardizedName","originalText","name","shortName","type","isValid","parseAntibiotics","therapyText","instructionPatterns","forEach","antibiotics","segments","split","segment","antibiotic","parseAntibiotic","push","text","length","cleanName","nonDrugPatterns","drugMap","drugClass","getDrugClass","class","drugName","drugClasses","className","drugs","Object","entries","drug","includes","antibioticSpectrumData","subclass","spectrum","gramPositive","gramNegative","atypical","anaerobes","coverage","typical","limited","resistant","mechanismOfAction","resistance","visualProperties","color","position","angle","radius","calculateSpectrumScore","pathogenCategory","data","getAntibioticsBySpectrum","minScore","arguments","undefined","filter","_ref","map","_ref2","_objectSpread","score","sort","a","b","getSpectrumOverlap","antibiotic1","antibiotic2","data1","data2","categories","totalOverlap","category","min","Math","max","drugClassColors","neo4jSchema","nodeTypes","PATHOGEN","properties","indexes","ANTIBIOTIC","CONDITION","DRUG_CLASS","relationshipTypes","TREATS","from","to","CAUSES","BELONGS_TO","SYNERGISTIC_WITH","RESISTANT_TO","ALTERNATIVE_TO","transformToNeo4jFormat","medicalConditions","nodes","relationships","pathogenSet","Set","antibioticSet","conditionSet","drugClassSet","condition","conditionNode","id","description","severity","has","add","commonPathogens","pathogen","pathogenId","toLowerCase","pathogenNode","frequency","empiricTherapy","_ref3","context","therapy","antibioticId","_antibioticSpectrumDa","antibioticNode","drugClassId","_antibioticSpectrumDa2","drugClassNode","mechanism","effectiveness","calculateTreatmentEffectiveness","clinical_evidence","resistance_risk","calculateResistanceRisk","synergies","identifyAntibioticSynergies","Array","spectrumData","riskFactors","antibioticIds","knownSynergies","pair","synergy","drug1","drug2","synergy_score","generateCypherQueries","neo4jData","queries","nodeQueries","reduce","acc","node","nodeType","_ref4","nodeList","batchSize","i","batch","slice","query","concat","parameters","relQueries","rel","relType","_ref5","relList","advancedGraphQueries","findTreatmentPath","pathogen1","pathogen2","findSuperbugs","findAlternatives","findDrugCommunities","generateNeo4jDataset","cypherQueries","schema","advancedQueries","statistics","nodeCount","relationshipCount","keys","VISUALIZATION_DOCUMENTATION","version","components","features","lastUpdated","Date","toISOString","apiReference","processConditionsData","conditions","pathogens","Map","conditionMap","set","isArray","count","pathogenData","get","values","antibioticsList","therapyContexts","antibioticData","pathogenArray","p","antibioticArray","totalPathogens","totalAntibiotics"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/utils/dataParser.js"],"sourcesContent":["/**\n * Advanced Data Parser\n * Extracts and normalizes pathogen and antibiotic information from medical conditions data\n * Handles complex text patterns and creates standardized lists for multi-dimensional exploration\n */\n\n/**\n * Extract and normalize pathogen names from commonPathogens arrays\n * @param {string} pathogenText - Raw pathogen text from data\n * @returns {Object} - Normalized pathogen info with metadata\n */\nexport const parsePathogen = (pathogenText) => {\n  if (!pathogenText || typeof pathogenText !== 'string') {\n    return null;\n  }\n\n  // Clean up the text\n  let cleanText = pathogenText.trim();\n  \n  // Remove citation markers and references\n  cleanText = cleanText.replace(/\\[cite.*?\\]/g, '');\n  cleanText = cleanText.replace(/\\(cite.*?\\)/g, '');\n  \n  // Skip entries that are clearly not pathogens (references, notes, etc.)\n  const nonPathogenPatterns = [\n    /^RCTs for/i,\n    /^Observational studies/i,\n    /et al/i,\n    /^Studies/i,\n    /^Research/i\n  ];\n  \n  if (nonPathogenPatterns.some(pattern => pattern.test(cleanText))) {\n    return null;\n  }\n  \n  // Extract the main pathogen name\n  let mainName = cleanText;\n  let details = '';\n  let gramStatus = 'unknown';\n  let pathogenType = 'bacteria';\n  let spectrumCategory = 'typical'; // New: typical, atypical, mixed\n  \n  // Handle parenthetical information\n  const parenthesesMatch = cleanText.match(/^([^(]+)\\s*\\(([^)]+)\\)/);\n  if (parenthesesMatch) {\n    mainName = parenthesesMatch[1].trim();\n    details = parenthesesMatch[2].trim();\n  }\n  \n  // Determine gram status based on pathogen name\n  const gramPositivePatterns = [\n    /staphylococcus/i,\n    /streptococcus/i,\n    /enterococcus/i,\n    /clostridium/i,\n    /corynebacterium/i,\n    /bacillus/i,\n    /listeria/i\n  ];\n  \n  const gramNegativePatterns = [\n    /escherichia/i,\n    /klebsiella/i,\n    /pseudomonas/i,\n    /enterobacter/i,\n    /proteus/i,\n    /citrobacter/i,\n    /haemophilus/i,\n    /moraxella/i,\n    /neisseria/i,\n    /enterobacterales/i,\n    /salmonella/i,\n    /shigella/i,\n    /acinetobacter/i,\n    /stenotrophomonas/i\n  ];\n  \n  // Enhanced atypical organism patterns\n  const atypicalPatterns = [\n    /mycoplasma/i,\n    /chlamydia/i,\n    /legionella/i,\n    /rickettsia/i,\n    /coxiella/i,\n    /ehrlichia/i,\n    /anaplasma/i,\n    /bartonella/i,\n    /francisella/i,\n    /brucella/i\n  ];\n  \n  // Determine spectrum category and gram status\n  if (atypicalPatterns.some(pattern => pattern.test(mainName))) {\n    spectrumCategory = 'atypical';\n    gramStatus = 'atypical'; // Special category for atypical organisms\n  } else if (gramPositivePatterns.some(pattern => pattern.test(mainName))) {\n    gramStatus = 'positive';\n    spectrumCategory = 'typical';\n  } else if (gramNegativePatterns.some(pattern => pattern.test(mainName))) {\n    gramStatus = 'negative';\n    spectrumCategory = 'typical';\n  }\n  \n  // Determine pathogen type with enhanced categories\n  if (/virus/i.test(cleanText) || /viral/i.test(cleanText) || /HSV/i.test(cleanText)) {\n    pathogenType = 'virus';\n    spectrumCategory = 'atypical';\n  } else if (/fungal/i.test(cleanText) || /candida/i.test(cleanText) || /aspergillus/i.test(cleanText)) {\n    pathogenType = 'fungus';\n    spectrumCategory = 'atypical';\n  } else if (/mycobacteri/i.test(cleanText)) {\n    pathogenType = 'mycobacteria';\n    spectrumCategory = 'atypical';\n    gramStatus = 'acid-fast'; // Special classification for mycobacteria\n  } else if (atypicalPatterns.some(pattern => pattern.test(mainName))) {\n    pathogenType = 'atypical bacteria';\n  }\n  \n  // Standardize common abbreviations\n  const abbreviationMap = {\n    'S aureus': 'Staphylococcus aureus',\n    'S pyogenes': 'Streptococcus pyogenes', \n    'S pneumoniae': 'Streptococcus pneumoniae',\n    'E coli': 'Escherichia coli',\n    'E faecalis': 'Enterococcus faecalis',\n    'E faecium': 'Enterococcus faecium',\n    'H influenzae': 'Haemophilus influenzae',\n    'P aeruginosa': 'Pseudomonas aeruginosa',\n    'K kingae': 'Kingella kingae',\n    'K pneumoniae': 'Klebsiella pneumoniae',\n    'M catarrhalis': 'Moraxella catarrhalis',\n    'N meningitidis': 'Neisseria meningitidis',\n    'M pneumoniae': 'Mycoplasma pneumoniae',\n    'C pneumoniae': 'Chlamydia pneumoniae',\n    'L pneumophila': 'Legionella pneumophila',\n    'GBS': 'Group B Streptococcus',\n    'HSV': 'Herpes Simplex Virus'\n  };\n  \n  const standardizedName = abbreviationMap[mainName] || mainName;\n  \n  return {\n    originalText: pathogenText,\n    name: standardizedName,\n    shortName: mainName,\n    details: details,\n    gramStatus: gramStatus,\n    type: pathogenType,\n    spectrumCategory: spectrumCategory, // New field for visualization grouping\n    isValid: true\n  };\n};;\n\n/**\n * Extract antibiotic names from therapy strings\n * @param {string} therapyText - Raw therapy text from empiricTherapy\n * @returns {Array} - Array of antibiotic objects with metadata\n */\nexport const parseAntibiotics = (therapyText) => {\n  if (!therapyText || typeof therapyText !== 'string') {\n    return [];\n  }\n  \n  let cleanText = therapyText.trim();\n  \n  // Remove non-drug instructions and context\n  const instructionPatterns = [\n    /Consider surgical drainage[^.]*\\./i,\n    /Drainage[^.]*\\./i,\n    /Choice depends on[^.]*\\./i,\n    /These are empiric[^.]*\\./i,\n    /if.*available\\)/i,\n    /some experts[^)]*\\)/i\n  ];\n  \n  instructionPatterns.forEach(pattern => {\n    cleanText = cleanText.replace(pattern, '');\n  });\n  \n  // Handle empty or non-specific guidance\n  if (!cleanText.trim() || \n      /choice depends/i.test(cleanText) || \n      /guided by culture/i.test(cleanText)) {\n    return [];\n  }\n  \n  const antibiotics = [];\n  \n  // Split on combinations and alternatives\n  const segments = cleanText.split(/\\s+(?:PLUS|plus|\\+|OR|or)\\s+/i);\n  \n  segments.forEach(segment => {\n    const antibiotic = parseAntibiotic(segment.trim());\n    if (antibiotic) {\n      antibiotics.push(antibiotic);\n    }\n  });\n  \n  return antibiotics;\n};\n\n/**\n * Parse individual antibiotic from text segment\n * @param {string} text - Text segment containing antibiotic name\n * @returns {Object|null} - Antibiotic object or null if invalid\n */\nconst parseAntibiotic = (text) => {\n  if (!text || text.length < 2) return null;\n  \n  // Remove parenthetical information\n  let cleanName = text.replace(/\\([^)]*\\)/g, '').trim();\n  \n  // Remove dosing information and routes\n  cleanName = cleanName.replace(/\\d+\\s*(mg|g|units|mcg).*$/i, '');\n  cleanName = cleanName.replace(/\\b(IV|PO|IM|oral|intravenous|intramuscular)\\b/gi, '');\n  \n  // Skip if it's not actually a drug name\n  const nonDrugPatterns = [\n    /^if\\b/i,\n    /^for\\b/i, \n    /^consider\\b/i,\n    /^add\\b/i,\n    /days?$/i,\n    /weeks?$/i,\n    /\\d+\\s*days?/i,\n    /allergyb?:?/i,\n    /standard/i,\n    /treatment/i\n  ];\n  \n  if (nonDrugPatterns.some(pattern => pattern.test(cleanName))) {\n    return null;\n  }\n  \n  // Standardize drug names\n  const drugMap = {\n    'Ampicillin-sulbactam': 'Ampicillin/sulbactam',\n    'Ampicillin- sulbactam': 'Ampicillin/sulbactam',\n    'Amoxicillin-clavulanate': 'Amoxicillin/clavulanate', \n    'Amoxicillin- clavulanate': 'Amoxicillin/clavulanate',\n    'Piperacillin-tazobactam': 'Piperacillin/tazobactam',\n    'Piperacillin- tazobactam': 'Piperacillin/tazobactam',\n    'TMP-SMX': 'Trimethoprim/sulfamethoxazole',\n    'TMP/SMX': 'Trimethoprim/sulfamethoxazole'\n  };\n  \n  const standardizedName = drugMap[cleanName] || cleanName;\n  \n  // Determine drug class\n  const drugClass = getDrugClass(standardizedName);\n  \n  return {\n    originalText: text,\n    name: standardizedName,\n    class: drugClass,\n    isValid: true\n  };\n};\n\n/**\n * Determine drug class based on antibiotic name\n * @param {string} drugName - Standardized drug name\n * @returns {string} - Drug class\n */\nconst getDrugClass = (drugName) => {\n  const drugClasses = {\n    'Penicillins': [\n      'Penicillin', 'Ampicillin', 'Amoxicillin', 'Oxacillin', 'Nafcillin',\n      'Ampicillin/sulbactam', 'Amoxicillin/clavulanate', 'Piperacillin/tazobactam'\n    ],\n    'Cephalosporins': [\n      'Cefazolin', 'Cephalexin', 'Ceftriaxone', 'Cefotaxime', 'Ceftazidime', \n      'Cefepime', 'Cefdinir', 'Cefpodoxime', 'Cefuroxime', 'Ceftaroline'\n    ],\n    'Glycopeptides': ['Vancomycin'],\n    'Lincosamides': ['Clindamycin'],\n    'Oxazolidinones': ['Linezolid'],\n    'Lipopeptides': ['Daptomycin'],\n    'Macrolides': ['Azithromycin', 'Erythromycin'],\n    'Aminoglycosides': ['Gentamicin', 'Amikacin', 'Tobramycin'],\n    'Fluoroquinolones': ['Ciprofloxacin', 'Levofloxacin'],\n    'Tetracyclines': ['Doxycycline'],\n    'Folate Antagonists': ['Trimethoprim/sulfamethoxazole'],\n    'Nitroimidazoles': ['Metronidazole'],\n    'Nitrofurans': ['Nitrofurantoin'],\n    'Antivirals': ['Acyclovir']\n  };\n  \n  for (const [className, drugs] of Object.entries(drugClasses)) {\n    if (drugs.some(drug => drugName.includes(drug) || drug.includes(drugName))) {\n      return className;\n    }\n  }\n  \n  return 'Other';\n};\n\n// Enhanced antibiotic spectrum database with coverage scoring and visualization data\nexport const antibioticSpectrumData = {\n  // Penicillins\n  'Penicillin': {\n    class: 'Penicillins',\n    subclass: 'Natural Penicillins',\n    spectrum: {\n      gramPositive: 9, // Score 0-10\n      gramNegative: 2,\n      atypical: 1,\n      anaerobes: 7\n    },\n    coverage: {\n      typical: ['Streptococcus pyogenes', 'Streptococcus pneumoniae', 'Enterococcus faecalis'],\n      limited: ['Staphylococcus aureus (MSSA only)'],\n      resistant: ['MRSA', 'Most gram-negatives', 'Atypicals']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production', 'PBP mutations'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: { angle: 0, radius: 0.8 }\n    }\n  },\n  \n  'Ampicillin': {\n    class: 'Penicillins',\n    subclass: 'Aminopenicillins',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 5,\n      atypical: 1,\n      anaerobes: 6\n    },\n    coverage: {\n      typical: ['Enterococcus species', 'Listeria monocytogenes', 'Some E. coli'],\n      limited: ['Streptococcus species', 'Haemophilus influenzae (if sensitive)'],\n      resistant: ['MRSA', 'Most Enterobacterales', 'Pseudomonas']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: { angle: 30, radius: 0.8 }\n    }\n  },\n\n  'Amoxicillin': {\n    class: 'Penicillins',\n    subclass: 'Aminopenicillins',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 5,\n      atypical: 1,\n      anaerobes: 6\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Enterococcus faecalis', 'Some E. coli'],\n      limited: ['Haemophilus influenzae', 'Moraxella catarrhalis'],\n      resistant: ['MRSA', 'Beta-lactamase producing organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: { angle: 45, radius: 0.8 }\n    }\n  },\n\n  'Amoxicillin/clavulanate': {\n    class: 'Penicillins',\n    subclass: 'Beta-lactamase inhibitor combinations',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 7,\n      atypical: 1,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'H. influenzae', 'M. catarrhalis', 'E. coli'],\n      limited: ['Some Klebsiella species', 'Anaerobes'],\n      resistant: ['MRSA', 'Pseudomonas', 'ESBL producers']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition + beta-lactamase inhibition',\n    resistance: ['ESBL production', 'AmpC beta-lactamases'],\n    visualProperties: {\n      color: '#1e40af',\n      position: { angle: 60, radius: 0.9 }\n    }\n  },\n\n  'Piperacillin/tazobactam': {\n    class: 'Penicillins',\n    subclass: 'Antipseudomonal penicillins',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 9,\n      atypical: 1,\n      anaerobes: 9\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'MSSA', 'Streptococcus species'],\n      limited: ['Some ESBL producers', 'Anaerobes'],\n      resistant: ['MRSA', 'Enterococcus faecium', 'Carbapenem-resistant organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition + beta-lactamase inhibition',\n    resistance: ['Carbapenemases', 'AmpC hyperproduction'],\n    visualProperties: {\n      color: '#1e40af',\n      position: { angle: 75, radius: 1.0 }\n    }\n  },\n\n  // Cephalosporins\n  'Cefazolin': {\n    class: 'Cephalosporins',\n    subclass: '1st Generation',\n    spectrum: {\n      gramPositive: 9,\n      gramNegative: 4,\n      atypical: 0,\n      anaerobes: 2\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'Some E. coli', 'Proteus mirabilis'],\n      limited: ['Klebsiella pneumoniae'],\n      resistant: ['MRSA', 'Enterococcus', 'Pseudomonas', 'Anaerobes']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production', 'PBP mutations'],\n    visualProperties: {\n      color: '#10b981',\n      position: { angle: 90, radius: 0.8 }\n    }\n  },\n\n  'Ceftriaxone': {\n    class: 'Cephalosporins',\n    subclass: '3rd Generation',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 8,\n      atypical: 0,\n      anaerobes: 1\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Most Enterobacterales', 'H. influenzae', 'N. meningitidis'],\n      limited: ['Some MSSA', 'Moraxella catarrhalis'],\n      resistant: ['MRSA', 'Enterococcus', 'Pseudomonas', 'ESBL producers']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['ESBL production', 'AmpC beta-lactamases'],\n    visualProperties: {\n      color: '#059669',\n      position: { angle: 120, radius: 0.9 }\n    }\n  },\n\n  'Cefepime': {\n    class: 'Cephalosporins',\n    subclass: '4th Generation',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 9,\n      atypical: 0,\n      anaerobes: 1\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'Streptococcus pneumoniae'],\n      limited: ['Some ESBL producers', 'MSSA'],\n      resistant: ['MRSA', 'Enterococcus', 'Carbapenem-resistant organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Carbapenemases', 'AmpC hyperproduction'],\n    visualProperties: {\n      color: '#047857',\n      position: { angle: 135, radius: 1.0 }\n    }\n  },\n\n  // Glycopeptides\n  'Vancomycin': {\n    class: 'Glycopeptides',\n    subclass: 'Glycopeptides',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 0,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MRSA', 'MSSA', 'Enterococcus faecalis', 'CoNS', 'C. difficile (oral)'],\n      limited: ['Streptococcus species'],\n      resistant: ['Gram-negatives', 'VRE', 'Some atypicals']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition (different target than beta-lactams)',\n    resistance: ['van gene cluster', 'Thick cell wall (hetero-resistance)'],\n    visualProperties: {\n      color: '#7c3aed',\n      position: { angle: 150, radius: 0.9 }\n    }\n  },\n\n  // Lincosamides\n  'Clindamycin': {\n    class: 'Lincosamides',\n    subclass: 'Lincosamides',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 1,\n      atypical: 2,\n      anaerobes: 9\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'Anaerobes (most)'],\n      limited: ['Some MRSA (if D-test negative)', 'Some atypicals'],\n      resistant: ['Gram-negatives', 'Enterococcus', 'C. difficile']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit)',\n    resistance: ['erm genes (inducible)', 'lincosamide resistance'],\n    visualProperties: {\n      color: '#dc2626',\n      position: { angle: 180, radius: 0.8 }\n    }\n  },\n\n  // Macrolides\n  'Azithromycin': {\n    class: 'Macrolides',\n    subclass: 'Azalides',\n    spectrum: {\n      gramPositive: 6,\n      gramNegative: 3,\n      atypical: 9,\n      anaerobes: 4\n    },\n    coverage: {\n      typical: ['Streptococcus pyogenes', 'Some Streptococcus pneumoniae', 'H. influenzae'],\n      atypical: ['Mycoplasma pneumoniae', 'Chlamydia species', 'Legionella pneumophila'],\n      resistant: ['MRSA', 'Most Enterobacterales', 'Pseudomonas']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit)',\n    resistance: ['erm genes', 'efflux pumps'],\n    visualProperties: {\n      color: '#f59e0b',\n      position: { angle: 210, radius: 0.8 }\n    }\n  },\n\n  // Fluoroquinolones\n  'Ciprofloxacin': {\n    class: 'Fluoroquinolones',\n    subclass: 'Fluoroquinolones',\n    spectrum: {\n      gramPositive: 5,\n      gramNegative: 9,\n      atypical: 7,\n      anaerobes: 2\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'Some Streptococcus species'],\n      atypical: ['Some Mycoplasma', 'Some Chlamydia'],\n      resistant: ['MRSA', 'Streptococcus pneumoniae', 'Anaerobes']\n    },\n    mechanismOfAction: 'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',\n    resistance: ['gyr/par mutations', 'efflux pumps', 'qnr genes'],\n    visualProperties: {\n      color: '#8b5cf6',\n      position: { angle: 240, radius: 0.9 }\n    }\n  },\n\n  'Levofloxacin': {\n    class: 'Fluoroquinolones',\n    subclass: 'Respiratory Fluoroquinolones',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 8,\n      atypical: 8,\n      anaerobes: 3\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Most Enterobacterales', 'Some Pseudomonas'],\n      atypical: ['Mycoplasma pneumoniae', 'Chlamydia species', 'Legionella pneumophila'],\n      resistant: ['MRSA (variable)', 'Anaerobes']\n    },\n    mechanismOfAction: 'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',\n    resistance: ['gyr/par mutations', 'efflux pumps'],\n    visualProperties: {\n      color: '#7c3aed',\n      position: { angle: 255, radius: 0.9 }\n    }\n  },\n\n  // Aminoglycosides\n  'Gentamicin': {\n    class: 'Aminoglycosides',\n    subclass: 'Aminoglycosides',\n    spectrum: {\n      gramPositive: 6,\n      gramNegative: 8,\n      atypical: 0,\n      anaerobes: 0\n    },\n    coverage: {\n      typical: ['Most Enterobacterales', 'Pseudomonas aeruginosa', 'Staphylococcus species (synergy)'],\n      limited: ['Enterococcus (synergy only)'],\n      resistant: ['Streptococcus', 'Anaerobes', 'Atypicals']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (30S ribosomal subunit)',\n    resistance: ['Aminoglycoside-modifying enzymes', '16S rRNA methylases'],\n    visualProperties: {\n      color: '#ef4444',\n      position: { angle: 270, radius: 0.7 }\n    }\n  },\n\n  // Oxazolidinones\n  'Linezolid': {\n    class: 'Oxazolidinones',\n    subclass: 'Oxazolidinones',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 2,\n      anaerobes: 7\n    },\n    coverage: {\n      typical: ['MRSA', 'VRE', 'All Streptococcus species', 'CoNS'],\n      limited: ['Some anaerobes'],\n      resistant: ['Gram-negatives', 'Most atypicals']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit, unique binding site)',\n    resistance: ['cfr gene', '23S rRNA mutations'],\n    visualProperties: {\n      color: '#be185d',\n      position: { angle: 300, radius: 0.8 }\n    }\n  },\n\n  // Lipopeptides\n  'Daptomycin': {\n    class: 'Lipopeptides',\n    subclass: 'Lipopeptides',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 0,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MRSA', 'VRE', 'All Staphylococcus species', 'Most Streptococcus species'],\n      limited: ['Enterococcus species'],\n      resistant: ['Gram-negatives', 'Atypicals', 'Pneumonia (inactivated by surfactant)']\n    },\n    mechanismOfAction: 'Cell membrane depolarization',\n    resistance: ['Cell membrane changes', 'mprF mutations'],\n    visualProperties: {\n      color: '#991b1b',\n      position: { angle: 330, radius: 0.8 }\n    }\n  }\n};\n\n// Spectrum scoring utilities\nexport const calculateSpectrumScore = (antibiotic, pathogenCategory) => {\n  const data = antibioticSpectrumData[antibiotic];\n  if (!data) return 0;\n  \n  switch (pathogenCategory) {\n    case 'positive': return data.spectrum.gramPositive;\n    case 'negative': return data.spectrum.gramNegative;\n    case 'atypical': return data.spectrum.atypical;\n    case 'anaerobes': return data.spectrum.anaerobes;\n    default: return 0;\n  }\n};\n\nexport const getAntibioticsBySpectrum = (pathogenCategory, minScore = 5) => {\n  return Object.entries(antibioticSpectrumData)\n    .filter(([name, data]) => calculateSpectrumScore(name, pathogenCategory) >= minScore)\n    .map(([name, data]) => ({\n      name,\n      score: calculateSpectrumScore(name, pathogenCategory),\n      class: data.class,\n      ...data\n    }))\n    .sort((a, b) => b.score - a.score);\n};\n\nexport const getSpectrumOverlap = (antibiotic1, antibiotic2) => {\n  const data1 = antibioticSpectrumData[antibiotic1];\n  const data2 = antibioticSpectrumData[antibiotic2];\n  \n  if (!data1 || !data2) return 0;\n  \n  const categories = ['gramPositive', 'gramNegative', 'atypical', 'anaerobes'];\n  let totalOverlap = 0;\n  \n  categories.forEach(category => {\n    const min = Math.min(data1.spectrum[category], data2.spectrum[category]);\n    const max = Math.max(data1.spectrum[category], data2.spectrum[category]);\n    totalOverlap += max > 0 ? min / max : 0;\n  });\n  \n  return totalOverlap / categories.length;\n};\n\n// Drug class color mapping for visualizations\nexport const drugClassColors = {\n  'Penicillins': '#3b82f6',\n  'Cephalosporins': '#10b981',\n  'Glycopeptides': '#7c3aed',\n  'Lincosamides': '#dc2626',\n  'Macrolides': '#f59e0b',\n  'Fluoroquinolones': '#8b5cf6',\n  'Aminoglycosides': '#ef4444',\n  'Oxazolidinones': '#be185d',\n  'Lipopeptides': '#991b1b',\n  'Tetracyclines': '#059669',\n  'Folate Antagonists': '#0d9488',\n  'Nitroimidazoles': '#7c2d12',\n  'Nitrofurans': '#a21caf',\n  'Antivirals': '#1e40af'\n};\n// Neo4j Graph Database Schema and Data Transformation Utilities\n\n// Neo4j Schema Design\nexport const neo4jSchema = {\n  nodeTypes: {\n    PATHOGEN: {\n      properties: ['id', 'name', 'gramStatus', 'type', 'spectrumCategory'],\n      indexes: ['name', 'gramStatus', 'type']\n    },\n    ANTIBIOTIC: {\n      properties: ['id', 'name', 'class', 'subclass', 'mechanismOfAction'],\n      indexes: ['name', 'class']\n    },\n    CONDITION: {\n      properties: ['id', 'name', 'category', 'severity'],\n      indexes: ['name', 'category']\n    },\n    DRUG_CLASS: {\n      properties: ['id', 'name', 'mechanism', 'spectrumType'],\n      indexes: ['name']\n    }\n  },\n  \n  relationshipTypes: {\n    TREATS: {\n      from: 'ANTIBIOTIC',\n      to: 'PATHOGEN',\n      properties: ['effectiveness', 'resistance_risk', 'clinical_evidence']\n    },\n    CAUSES: {\n      from: 'PATHOGEN',\n      to: 'CONDITION',\n      properties: ['frequency', 'severity', 'typical_presentation']\n    },\n    BELONGS_TO: {\n      from: 'ANTIBIOTIC',\n      to: 'DRUG_CLASS',\n      properties: []\n    },\n    SYNERGISTIC_WITH: {\n      from: 'ANTIBIOTIC',\n      to: 'ANTIBIOTIC',\n      properties: ['synergy_score', 'mechanism']\n    },\n    RESISTANT_TO: {\n      from: 'PATHOGEN',\n      to: 'ANTIBIOTIC',\n      properties: ['resistance_mechanism', 'prevalence']\n    },\n    ALTERNATIVE_TO: {\n      from: 'ANTIBIOTIC',\n      to: 'ANTIBIOTIC',\n      properties: ['similarity_score', 'clinical_context']\n    }\n  }\n};\n\n// Transform medical conditions data to Neo4j format\nexport const transformToNeo4jFormat = (medicalConditions) => {\n  const nodes = [];\n  const relationships = [];\n  \n  // Track unique entities\n  const pathogenSet = new Set();\n  const antibioticSet = new Set();\n  const conditionSet = new Set();\n  const drugClassSet = new Set();\n  \n  medicalConditions.forEach(condition => {\n    // Create condition node\n    const conditionNode = {\n      type: 'CONDITION',\n      id: condition.id,\n      properties: {\n        name: condition.name,\n        category: condition.category,\n        description: condition.description,\n        severity: condition.severity || 'unknown'\n      }\n    };\n    \n    if (!conditionSet.has(condition.id)) {\n      nodes.push(conditionNode);\n      conditionSet.add(condition.id);\n    }\n    \n    // Process pathogens\n    if (condition.commonPathogens) {\n      condition.commonPathogens.forEach(pathogenText => {\n        const pathogen = parsePathogen(pathogenText);\n        if (pathogen && pathogen.isValid) {\n          const pathogenId = pathogen.name.toLowerCase().replace(/\\s+/g, '_');\n          \n          // Create pathogen node\n          if (!pathogenSet.has(pathogenId)) {\n            const pathogenNode = {\n              type: 'PATHOGEN',\n              id: pathogenId,\n              properties: {\n                name: pathogen.name,\n                gramStatus: pathogen.gramStatus,\n                type: pathogen.type,\n                spectrumCategory: pathogen.spectrumCategory\n              }\n            };\n            nodes.push(pathogenNode);\n            pathogenSet.add(pathogenId);\n          }\n          \n          // Create CAUSES relationship\n          relationships.push({\n            type: 'CAUSES',\n            from: { type: 'PATHOGEN', id: pathogenId },\n            to: { type: 'CONDITION', id: condition.id },\n            properties: {\n              frequency: 'common', // Would be derived from clinical data\n              severity: condition.severity || 'moderate'\n            }\n          });\n        }\n      });\n    }\n    \n    // Process empiric therapy antibiotics\n    if (condition.empiricTherapy) {\n      Object.entries(condition.empiricTherapy).forEach(([context, therapy]) => {\n        const antibiotics = parseAntibiotics(therapy);\n        antibiotics.forEach(antibiotic => {\n          if (antibiotic && antibiotic.isValid) {\n            const antibioticId = antibiotic.name.toLowerCase().replace(/\\s+/g, '_').replace(/\\//g, '_');\n            \n            // Create antibiotic node\n            if (!antibioticSet.has(antibioticId)) {\n              const antibioticNode = {\n                type: 'ANTIBIOTIC',\n                id: antibioticId,\n                properties: {\n                  name: antibiotic.name,\n                  class: antibiotic.class,\n                  mechanismOfAction: antibioticSpectrumData[antibiotic.name]?.mechanismOfAction || 'unknown'\n                }\n              };\n              nodes.push(antibioticNode);\n              antibioticSet.add(antibioticId);\n              \n              // Create drug class node and relationship\n              const drugClassId = antibiotic.class.toLowerCase().replace(/\\s+/g, '_');\n              if (!drugClassSet.has(drugClassId)) {\n                const drugClassNode = {\n                  type: 'DRUG_CLASS',\n                  id: drugClassId,\n                  properties: {\n                    name: antibiotic.class,\n                    mechanism: antibioticSpectrumData[antibiotic.name]?.mechanismOfAction || 'unknown'\n                  }\n                };\n                nodes.push(drugClassNode);\n                drugClassSet.add(drugClassId);\n              }\n              \n              // Create BELONGS_TO relationship\n              relationships.push({\n                type: 'BELONGS_TO',\n                from: { type: 'ANTIBIOTIC', id: antibioticId },\n                to: { type: 'DRUG_CLASS', id: drugClassId },\n                properties: {}\n              });\n            }\n            \n            // Create treatment relationships with pathogens\n            if (condition.commonPathogens) {\n              condition.commonPathogens.forEach(pathogenText => {\n                const pathogen = parsePathogen(pathogenText);\n                if (pathogen && pathogen.isValid) {\n                  const pathogenId = pathogen.name.toLowerCase().replace(/\\s+/g, '_');\n                  const effectiveness = calculateTreatmentEffectiveness(antibiotic, pathogen);\n                  \n                  relationships.push({\n                    type: 'TREATS',\n                    from: { type: 'ANTIBIOTIC', id: antibioticId },\n                    to: { type: 'PATHOGEN', id: pathogenId },\n                    properties: {\n                      effectiveness: effectiveness,\n                      clinical_evidence: context,\n                      resistance_risk: calculateResistanceRisk(antibiotic, pathogen)\n                    }\n                  });\n                }\n              });\n            }\n          }\n        });\n      });\n    }\n  });\n  \n  // Add synergy relationships\n  const synergies = identifyAntibioticSynergies(Array.from(antibioticSet));\n  relationships.push(...synergies);\n  \n  return { nodes, relationships };\n};\n\n// Calculate treatment effectiveness based on spectrum data\nconst calculateTreatmentEffectiveness = (antibiotic, pathogen) => {\n  const spectrumData = antibioticSpectrumData[antibiotic.name];\n  if (!spectrumData) return 5; // Default moderate effectiveness\n  \n  switch (pathogen.gramStatus) {\n    case 'positive':\n      return spectrumData.spectrum.gramPositive;\n    case 'negative':\n      return spectrumData.spectrum.gramNegative;\n    case 'atypical':\n      return spectrumData.spectrum.atypical;\n    default:\n      return 5;\n  }\n};\n\n// Calculate resistance risk\nconst calculateResistanceRisk = (antibiotic, pathogen) => {\n  const spectrumData = antibioticSpectrumData[antibiotic.name];\n  if (!spectrumData || !spectrumData.resistance) return 'moderate';\n  \n  // Risk factors based on resistance mechanisms\n  const riskFactors = spectrumData.resistance.length;\n  if (riskFactors <= 1) return 'low';\n  if (riskFactors <= 3) return 'moderate';\n  return 'high';\n};\n\n// Identify potential antibiotic synergies\nconst identifyAntibioticSynergies = (antibioticIds) => {\n  const synergies = [];\n  const knownSynergies = [\n    { \n      pair: ['ampicillin', 'gentamicin'], \n      mechanism: 'cell_wall_aminoglycoside_synergy',\n      score: 8\n    },\n    {\n      pair: ['vancomycin', 'gentamicin'],\n      mechanism: 'cell_wall_aminoglycoside_synergy',\n      score: 7\n    },\n    {\n      pair: ['piperacillin_tazobactam', 'vancomycin'],\n      mechanism: 'broad_spectrum_combination',\n      score: 6\n    }\n  ];\n  \n  knownSynergies.forEach(synergy => {\n    const [drug1, drug2] = synergy.pair;\n    if (antibioticIds.includes(drug1) && antibioticIds.includes(drug2)) {\n      synergies.push({\n        type: 'SYNERGISTIC_WITH',\n        from: { type: 'ANTIBIOTIC', id: drug1 },\n        to: { type: 'ANTIBIOTIC', id: drug2 },\n        properties: {\n          synergy_score: synergy.score,\n          mechanism: synergy.mechanism\n        }\n      });\n    }\n  });\n  \n  return synergies;\n};\n\n// Generate Cypher queries for Neo4j\nexport const generateCypherQueries = (neo4jData) => {\n  const { nodes, relationships } = neo4jData;\n  \n  const queries = [];\n  \n  // Node creation queries\n  const nodeQueries = nodes.reduce((acc, node) => {\n    const nodeType = node.type;\n    if (!acc[nodeType]) acc[nodeType] = [];\n    acc[nodeType].push(node);\n    return acc;\n  }, {});\n  \n  Object.entries(nodeQueries).forEach(([type, nodeList]) => {\n    const batchSize = 100;\n    for (let i = 0; i < nodeList.length; i += batchSize) {\n      const batch = nodeList.slice(i, i + batchSize);\n      const query = `\n        UNWIND $nodes AS node\n        CREATE (n:${type})\n        SET n = node.properties\n        SET n.id = node.id\n      `;\n      queries.push({\n        query,\n        parameters: { nodes: batch }\n      });\n    }\n  });\n  \n  // Relationship creation queries\n  const relQueries = relationships.reduce((acc, rel) => {\n    const relType = rel.type;\n    if (!acc[relType]) acc[relType] = [];\n    acc[relType].push(rel);\n    return acc;\n  }, {});\n  \n  Object.entries(relQueries).forEach(([type, relList]) => {\n    const batchSize = 100;\n    for (let i = 0; i < relList.length; i += batchSize) {\n      const batch = relList.slice(i, i + batchSize);\n      const query = `\n        UNWIND $relationships AS rel\n        MATCH (from:${batch[0].from.type} {id: rel.from.id})\n        MATCH (to:${batch[0].to.type} {id: rel.to.id})\n        CREATE (from)-[r:${type}]->(to)\n        SET r = rel.properties\n      `;\n      queries.push({\n        query,\n        parameters: { relationships: batch }\n      });\n    }\n  });\n  \n  return queries;\n};\n\n// Advanced graph analysis queries\nexport const advancedGraphQueries = {\n  // Find shortest antibiotic path between two pathogens\n  findTreatmentPath: (pathogen1, pathogen2) => `\n    MATCH path = shortestPath(\n      (p1:PATHOGEN {name: $pathogen1})-[:TREATS*..4]-(p2:PATHOGEN {name: $pathogen2})\n    )\n    RETURN path, length(path) as pathLength\n  `,\n  \n  // Identify super-bugs (highly connected resistant pathogens)\n  findSuperbugs: () => `\n    MATCH (p:PATHOGEN)-[r:RESISTANT_TO]->(a:ANTIBIOTIC)\n    WITH p, count(r) as resistanceCount\n    WHERE resistanceCount > 3\n    RETURN p.name, resistanceCount\n    ORDER BY resistanceCount DESC\n    LIMIT 10\n  `,\n  \n  // Find antibiotic alternatives based on spectrum similarity\n  findAlternatives: (antibiotic) => `\n    MATCH (target:ANTIBIOTIC {name: $antibiotic})-[:TREATS]->(p:PATHOGEN)\n    MATCH (alt:ANTIBIOTIC)-[:TREATS]->(p)\n    WHERE alt <> target\n    WITH alt, count(p) as sharedPathogens\n    MATCH (alt)-[:TREATS]->(allP:PATHOGEN)\n    WITH alt, sharedPathogens, count(allP) as totalPathogens\n    RETURN alt.name, sharedPathogens, totalPathogens, \n           toFloat(sharedPathogens)/totalPathogens as similarity\n    ORDER BY similarity DESC\n    LIMIT 5\n  `,\n  \n  // Community detection for drug classes\n  findDrugCommunities: () => `\n    CALL gds.louvain.stream('antibioticGraph')\n    YIELD nodeId, communityId\n    MATCH (a:ANTIBIOTIC)-[:BELONGS_TO]->(dc:DRUG_CLASS)\n    WHERE id(a) = nodeId\n    RETURN dc.name, communityId, collect(a.name) as antibiotics\n  `\n};\n\n// Export utility for generating complete Neo4j dataset\nexport const generateNeo4jDataset = (medicalConditions) => {\n  const neo4jData = transformToNeo4jFormat(medicalConditions);\n  const cypherQueries = generateCypherQueries(neo4jData);\n  \n  return {\n    schema: neo4jSchema,\n    data: neo4jData,\n    queries: cypherQueries,\n    advancedQueries: advancedGraphQueries,\n    statistics: {\n      nodeCount: neo4jData.nodes.length,\n      relationshipCount: neo4jData.relationships.length,\n      nodeTypes: Object.keys(neo4jSchema.nodeTypes),\n      relationshipTypes: Object.keys(neo4jSchema.relationshipTypes)\n    }\n  };\n};\n/**\n * ANTIBIOTIC LEARNING APP - ADVANCED VISUALIZATION DOCUMENTATION\n * ==============================================================\n * \n * This module provides comprehensive data visualization capabilities for pediatric\n * antibiotic learning, including Venn diagrams, rotating wheels, radar charts,\n * and Neo4j graph database integration.\n * \n * @version 2.0.0\n * @author Claude AI Assistant\n * @date 2024\n */\n\n// =============================================================================\n// PATHOGEN CLASSIFICATION SYSTEM\n// =============================================================================\n\n/**\n * Enhanced pathogen classification supporting typical and atypical organisms\n * \n * Categories:\n * - Gram Positive: Traditional gram-positive bacteria (Staphylococcus, Streptococcus, etc.)\n * - Gram Negative: Traditional gram-negative bacteria (E. coli, Pseudomonas, etc.)\n * - Atypical: Mycoplasma, Chlamydia, Legionella, and other special organisms\n * - Acid-fast: Mycobacteria (special classification)\n * \n * Usage:\n * const pathogen = parsePathogen(\"Mycoplasma pneumoniae\");\n * // Returns: { gramStatus: 'atypical', spectrumCategory: 'atypical', ... }\n */\n\n// =============================================================================\n// ANTIBIOTIC SPECTRUM DATABASE\n// =============================================================================\n\n/**\n * Comprehensive antibiotic spectrum database with 10-point scoring system\n * \n * Scoring System (0-10):\n * - 0-2: Poor coverage\n * - 3-4: Limited coverage  \n * - 5-6: Moderate coverage\n * - 7-8: Good coverage\n * - 9-10: Excellent coverage\n * \n * Spectrum Categories:\n * - gramPositive: Coverage against gram-positive bacteria\n * - gramNegative: Coverage against gram-negative bacteria\n * - atypical: Coverage against atypical organisms\n * - anaerobes: Coverage against anaerobic bacteria\n * \n * Example:\n * const vancomycin = antibioticSpectrumData['Vancomycin'];\n * // Returns: { spectrum: { gramPositive: 10, gramNegative: 0, ... }, ... }\n */\n\n// =============================================================================\n// VISUALIZATION COMPONENTS\n// =============================================================================\n\n/**\n * 1. ANTIBIOTIC SPECTRUM VENN DIAGRAM\n * ===================================\n * \n * Interactive 3-circle Venn diagram showing antibiotic coverage across\n * Gram-positive, Gram-negative, and Atypical pathogen categories.\n * \n * Features:\n * - Clickable regions show antibiotics with specific coverage patterns\n * - Hover tooltips display antibiotic counts and examples\n * - Animated pulse effects for region selection\n * - Real-time coverage analysis\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotic names to highlight\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onSpectrumAnalysis: Callback for region analysis\n * \n * Usage:\n * <AntibioticSpectrumVennDiagram \n *   selectedAntibiotics={['Vancomycin', 'Ciprofloxacin']}\n *   onSpectrumAnalysis={(data) => console.log(data)}\n * />\n */\n\n/**\n * 2. NORTHWESTERN-STYLE ROTATING WHEEL\n * ====================================\n * \n * Rotating antibiotic selection wheel inspired by Northwestern University's\n * antibiotic decision support tools.\n * \n * Structure:\n * - Center: Medical condition selector\n * - Inner ring: Pathogen categories\n * - Outer ring: Drug classes (rotating)\n * - Antibiotic nodes: Individual antibiotics within classes\n * \n * Features:\n * - Manual and automatic rotation\n * - Connection lines showing effectiveness\n * - Drug class filtering and selection\n * - Variable rotation speed control\n * \n * Props:\n * - selectedCondition: Medical condition object\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onDrugClassSelect: Callback for drug class selection\n * \n * Usage:\n * <AntibioticRotatingWheel \n *   selectedCondition={pneumoniaCondition}\n *   onAntibioticSelect={(ab) => console.log(ab)}\n * />\n */\n\n/**\n * 3. ANTIBIOTIC SPECTRUM RADAR CHART\n * ==================================\n * \n * Multi-dimensional radar chart for antibiotic spectrum analysis and comparison.\n * \n * Metrics:\n * - Gram Positive Coverage (0-10)\n * - Gram Negative Coverage (0-10)\n * - Atypical Coverage (0-10)\n * - Anaerobe Coverage (0-10)\n * - Resistance Profile (calculated)\n * - Safety Profile (calculated)\n * \n * Features:\n * - Multiple antibiotic overlay\n * - Comparative analysis panel\n * - Interactive metric selection\n * - Hover tooltips with detailed scores\n * - Statistical comparison (min/max/avg)\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotics to compare\n * - comparisonMode: Enable comparative analysis\n * - onMetricSelect: Callback for metric analysis\n * \n * Usage:\n * <AntibioticSpectrumRadarChart \n *   selectedAntibiotics={['Vancomycin', 'Linezolid', 'Daptomycin']}\n *   comparisonMode={true}\n * />\n */\n\n// =============================================================================\n// NEO4J GRAPH DATABASE INTEGRATION\n// =============================================================================\n\n/**\n * Graph database schema for advanced antibiotic relationship analysis\n * \n * Node Types:\n * - PATHOGEN: Bacterial, viral, fungal pathogens\n * - ANTIBIOTIC: Individual antimicrobial agents\n * - CONDITION: Medical conditions/infections\n * - DRUG_CLASS: Antibiotic classifications\n * \n * Relationship Types:\n * - TREATS: Antibiotic effectiveness against pathogens\n * - CAUSES: Pathogen association with conditions\n * - BELONGS_TO: Antibiotic classification\n * - SYNERGISTIC_WITH: Drug combination synergies\n * - RESISTANT_TO: Resistance patterns\n * - ALTERNATIVE_TO: Alternative therapy options\n * \n * Advanced Queries:\n * - Treatment path analysis\n * - Superbug identification\n * - Alternative drug discovery\n * - Community detection\n * \n * Usage:\n * const dataset = generateNeo4jDataset(medicalConditions);\n * // Returns complete Neo4j-ready dataset with nodes, relationships, and queries\n */\n\n// =============================================================================\n// DATA TRANSFORMATION UTILITIES\n// =============================================================================\n\n/**\n * Spectrum Scoring Functions:\n * \n * calculateSpectrumScore(antibiotic, pathogenCategory)\n * - Returns 0-10 score for specific pathogen category\n * \n * getAntibioticsBySpectrum(pathogenCategory, minScore)\n * - Returns ranked list of antibiotics for category\n * \n * getSpectrumOverlap(antibiotic1, antibiotic2)\n * - Returns 0-1 similarity score between antibiotics\n * \n * Example:\n * const score = calculateSpectrumScore('Vancomycin', 'positive'); // Returns 10\n * const alternatives = getAntibioticsBySpectrum('atypical', 7);    // High-scoring atypical coverage\n * const overlap = getSpectrumOverlap('Penicillin', 'Ampicillin'); // Similarity score\n */\n\n// =============================================================================\n// INTEGRATION GUIDE\n// =============================================================================\n\n/**\n * Adding New Visualizations to Main App:\n * \n * 1. Import components:\n *    import { AntibioticSpectrumVennDiagram, AntibioticRotatingWheel, \n *             AntibioticSpectrumRadarChart } from './components/PathogenNetworkVisualization';\n * \n * 2. Add to component state:\n *    const [selectedVisualization, setSelectedVisualization] = useState('venn');\n *    const [selectedAntibiotics, setSelectedAntibiotics] = useState([]);\n * \n * 3. Render conditionally:\n *    {selectedVisualization === 'venn' && \n *      <AntibioticSpectrumVennDiagram \n *        selectedAntibiotics={selectedAntibiotics}\n *        onSpectrumAnalysis={handleSpectrumAnalysis}\n *      />\n *    }\n * \n * 4. Add visualization selector:\n *    <select onChange={(e) => setSelectedVisualization(e.target.value)}>\n *      <option value=\"venn\">Venn Diagram</option>\n *      <option value=\"wheel\">Rotating Wheel</option>\n *      <option value=\"radar\">Radar Chart</option>\n *    </select>\n */\n\n// =============================================================================\n// PERFORMANCE OPTIMIZATION\n// =============================================================================\n\n/**\n * Optimization Strategies:\n * \n * 1. Data Memoization:\n *    - Use React.useMemo() for expensive calculations\n *    - Cache spectrum scores and pathogen classifications\n * \n * 2. Virtual Rendering:\n *    - Implement viewport culling for large datasets\n *    - Use requestAnimationFrame for smooth animations\n * \n * 3. Progressive Loading:\n *    - Load visualizations on demand\n *    - Implement lazy loading for Neo4j connections\n * \n * 4. Memory Management:\n *    - Clean up SVG animations and event listeners\n *    - Use WeakMap for temporary data storage\n */\n\n// =============================================================================\n// ACCESSIBILITY FEATURES\n// =============================================================================\n\n/**\n * Accessibility Enhancements:\n * \n * 1. Keyboard Navigation:\n *    - Tab through interactive elements\n *    - Arrow keys for rotation and selection\n *    - Enter/Space for activation\n * \n * 2. Screen Reader Support:\n *    - ARIA labels for all interactive elements\n *    - Live regions for dynamic updates\n *    - Semantic SVG structure\n * \n * 3. Visual Accessibility:\n *    - High contrast color schemes\n *    - Pattern fills for color-blind users\n *    - Scalable text and UI elements\n * \n * 4. Cognitive Accessibility:\n *    - Clear navigation flow\n *    - Consistent interaction patterns\n *    - Help tooltips and guidance\n */\n\n// =============================================================================\n// CLINICAL INTEGRATION\n// =============================================================================\n\n/**\n * Medical Decision Support Features:\n * \n * 1. Evidence-Based Scoring:\n *    - Clinical trial effectiveness data\n *    - Resistance surveillance integration\n *    - Local antibiogram support\n * \n * 2. Clinical Context:\n *    - Patient-specific factors (age, allergies, renal function)\n *    - Severity-based recommendations\n *    - Drug interaction checking\n * \n * 3. Educational Features:\n *    - Mechanism of action explanations\n *    - Resistance pattern tutorials\n *    - Case-based learning scenarios\n * \n * 4. Quality Metrics:\n *    - Antibiotic stewardship tracking\n *    - Learning progress analytics\n *    - Clinical outcome correlation\n */\n\nexport const VISUALIZATION_DOCUMENTATION = {\n  version: '2.0.0',\n  components: ['VennDiagram', 'RotatingWheel', 'RadarChart', 'Neo4jIntegration'],\n  features: ['PathogenClassification', 'SpectrumAnalysis', 'GraphDatabase', 'ClinicalDecisionSupport'],\n  lastUpdated: new Date().toISOString(),\n  apiReference: 'See individual component documentation above'\n};\n\n/**\n * Process all conditions and extract normalized pathogen and antibiotic data\n * @param {Array} conditions - Array of medical condition objects\n * @returns {Object} - Processed data with pathogens and antibiotics\n */\nexport const processConditionsData = (conditions) => {\n  const pathogens = new Map();\n  const antibiotics = new Map();\n  const conditionMap = new Map();\n  \n  conditions.forEach(condition => {\n    conditionMap.set(condition.id, condition);\n    \n    // Process pathogens\n    if (condition.commonPathogens && Array.isArray(condition.commonPathogens)) {\n      condition.commonPathogens.forEach(pathogenText => {\n        const pathogen = parsePathogen(pathogenText);\n        if (pathogen && pathogen.isValid) {\n          if (!pathogens.has(pathogen.name)) {\n            pathogens.set(pathogen.name, {\n              ...pathogen,\n              conditions: new Set(),\n              count: 0\n            });\n          }\n          \n          const pathogenData = pathogens.get(pathogen.name);\n          pathogenData.conditions.add(condition.id);\n          pathogenData.count++;\n        }\n      });\n    }\n    \n    // Process antibiotics from empiric therapy\n    if (condition.empiricTherapy && typeof condition.empiricTherapy === 'object') {\n      Object.values(condition.empiricTherapy).forEach(therapyText => {\n        const antibioticsList = parseAntibiotics(therapyText);\n        antibioticsList.forEach(antibiotic => {\n          if (antibiotic && antibiotic.isValid) {\n            if (!antibiotics.has(antibiotic.name)) {\n              antibiotics.set(antibiotic.name, {\n                ...antibiotic,\n                conditions: new Set(),\n                therapyContexts: new Set(),\n                count: 0\n              });\n            }\n            \n            const antibioticData = antibiotics.get(antibiotic.name);\n            antibioticData.conditions.add(condition.id);\n            antibioticData.therapyContexts.add(`${condition.name}: ${therapyText}`);\n            antibioticData.count++;\n          }\n        });\n      });\n    }\n  });\n  \n  // Convert Sets to Arrays for serialization\n  const pathogenArray = Array.from(pathogens.values()).map(p => ({\n    ...p,\n    conditions: Array.from(p.conditions),\n    therapyContexts: undefined\n  }));\n  \n  const antibioticArray = Array.from(antibiotics.values()).map(a => ({\n    ...a,\n    conditions: Array.from(a.conditions),\n    therapyContexts: Array.from(a.therapyContexts)\n  }));\n  \n  return {\n    pathogens: pathogenArray,\n    antibiotics: antibioticArray,\n    totalPathogens: pathogenArray.length,\n    totalAntibiotics: antibioticArray.length,\n    conditions: Array.from(conditionMap.values())\n  };\n};"],"mappings":"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SAAS,CAAEC,SAAS,oLAKvC,CAED;AACAC,aAAa,CAAEA,CAAA,+NAOd,CAED;AACAC,gBAAgB,CAAG/J,UAAU,idAW5B,CAED;AACAgK,mBAAmB,CAAEA,CAAA,4OAOvB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,oBAAoB,CAAI9E,iBAAiB,EAAK,CACzD,KAAM,CAAAkD,SAAS,CAAGnD,sBAAsB,CAACC,iBAAiB,CAAC,CAC3D,KAAM,CAAA+E,aAAa,CAAG9B,qBAAqB,CAACC,SAAS,CAAC,CAEtD,MAAO,CACL8B,MAAM,CAAElG,WAAW,CACnB1B,IAAI,CAAE8F,SAAS,CACfC,OAAO,CAAE4B,aAAa,CACtBE,eAAe,CAAEV,oBAAoB,CACrCW,UAAU,CAAE,CACVC,SAAS,CAAEjC,SAAS,CAACjD,KAAK,CAAChF,MAAM,CACjCmK,iBAAiB,CAAElC,SAAS,CAAChD,aAAa,CAACjF,MAAM,CACjD8D,SAAS,CAAEnD,MAAM,CAACyJ,IAAI,CAACvG,WAAW,CAACC,SAAS,CAAC,CAC7CO,iBAAiB,CAAE1D,MAAM,CAACyJ,IAAI,CAACvG,WAAW,CAACQ,iBAAiB,CAC9D,CACF,CAAC,CACH,CAAC,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,MAAM,CAAAgG,2BAA2B,CAAG,CACzCC,OAAO,CAAE,OAAO,CAChBC,UAAU,CAAE,CAAC,aAAa,CAAE,eAAe,CAAE,YAAY,CAAE,kBAAkB,CAAC,CAC9EC,QAAQ,CAAE,CAAC,wBAAwB,CAAE,kBAAkB,CAAE,eAAe,CAAE,yBAAyB,CAAC,CACpGC,WAAW,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACrCC,YAAY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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}