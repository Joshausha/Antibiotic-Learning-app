{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useAntibioticData Hook\n * Custom hook for managing antibiotic data, search, and condition lookup\n * Provides antibiotic exploration functionality with drug class filtering and cross-references\n */\n\nimport { useMemo, useState } from 'react';\nimport { buildIndexes, searchAntibiotics, getConditionsForAntibiotic, getDrugClassStats, findCombinationTherapyConditions } from '../utils/dataIndexer';\nconst useAntibioticData = medicalConditions => {\n  _s();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [drugClassFilter, setDrugClassFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('name'); // 'name', 'count', 'conditions', 'class'\n  const [selectedAntibiotic, setSelectedAntibiotic] = useState(null);\n\n  // Build indexes once when conditions data changes\n  const indexes = useMemo(() => {\n    if (!medicalConditions || medicalConditions.length === 0) {\n      return null;\n    }\n    return buildIndexes(medicalConditions);\n  }, [medicalConditions]);\n\n  // Get filtered and sorted antibiotics\n  const antibiotics = useMemo(() => {\n    if (!indexes) return [];\n    return searchAntibiotics(indexes, {\n      query: searchQuery,\n      drugClass: drugClassFilter,\n      sortBy: sortBy\n    });\n  }, [indexes, searchQuery, drugClassFilter, sortBy]);\n\n  // Get conditions for selected antibiotic\n  const selectedAntibioticConditions = useMemo(() => {\n    if (!indexes || !selectedAntibiotic) return [];\n    return getConditionsForAntibiotic(indexes, selectedAntibiotic.name);\n  }, [indexes, selectedAntibiotic]);\n\n  // Get drug class statistics\n  const drugClassStats = useMemo(() => {\n    if (!indexes) return [];\n    return getDrugClassStats(indexes);\n  }, [indexes]);\n\n  // Get available drug classes for filtering\n  const availableDrugClasses = useMemo(() => {\n    if (!indexes) return [];\n    return Array.from(indexes.drugClassToAntibiotics.keys()).sort();\n  }, [indexes]);\n\n  // Get antibiotic statistics\n  const antibioticStats = useMemo(() => {\n    if (!indexes) return null;\n    const total = indexes.antibiotics.length;\n    const conditionCounts = indexes.antibiotics.map(a => a.conditions.length);\n    const maxConditions = Math.max(...conditionCounts, 0);\n    const avgConditions = conditionCounts.length > 0 ? (conditionCounts.reduce((a, b) => a + b, 0) / conditionCounts.length).toFixed(1) : 0;\n\n    // Calculate most used antibiotics\n    const topAntibiotics = [...indexes.antibiotics].sort((a, b) => b.count - a.count).slice(0, 5);\n    return {\n      total,\n      maxConditions,\n      avgConditions,\n      topAntibiotics,\n      drugClassCount: availableDrugClasses.length\n    };\n  }, [indexes, availableDrugClasses]);\n\n  // Get filtered statistics\n  const filteredStats = useMemo(() => {\n    const drugClassCounts = {};\n    antibiotics.forEach(antibiotic => {\n      drugClassCounts[antibiotic.class] = (drugClassCounts[antibiotic.class] || 0) + 1;\n    });\n    return {\n      total: antibiotics.length,\n      byDrugClass: drugClassCounts\n    };\n  }, [antibiotics]);\n\n  // Search and filter functions\n  const searchAntibioticsFunction = query => {\n    setSearchQuery(query);\n  };\n  const filterByDrugClass = drugClass => {\n    setDrugClassFilter(drugClass);\n  };\n  const setSortOrder = order => {\n    setSortBy(order);\n  };\n  const selectAntibiotic = antibiotic => {\n    setSelectedAntibiotic(antibiotic);\n  };\n  const clearSelection = () => {\n    setSelectedAntibiotic(null);\n  };\n  const clearFilters = () => {\n    setSearchQuery('');\n    setDrugClassFilter('all');\n    setSortBy('name');\n  };\n\n  // Get antibiotic by name (for external lookups)\n  const getAntibioticByName = name => {\n    if (!indexes) return null;\n    return indexes.antibiotics.find(a => a.name === name);\n  };\n\n  // Find alternative antibiotics (same drug class or similar spectrum)\n  const findAlternativeAntibiotics = antibiotic => {\n    if (!indexes || !antibiotic) return [];\n    return indexes.antibiotics.filter(a => a.name !== antibiotic.name).filter(a => {\n      // Same drug class\n      if (a.class === antibiotic.class) {\n        return true;\n      }\n\n      // Shared conditions (similar spectrum)\n      const sharedConditions = a.conditions.filter(c => antibiotic.conditions.includes(c));\n      return sharedConditions.length > 0;\n    }).sort((a, b) => {\n      // Prioritize same drug class\n      if (a.class === antibiotic.class && b.class !== antibiotic.class) return -1;\n      if (b.class === antibiotic.class && a.class !== antibiotic.class) return 1;\n\n      // Then sort by number of shared conditions\n      const aShared = a.conditions.filter(c => antibiotic.conditions.includes(c)).length;\n      const bShared = b.conditions.filter(c => antibiotic.conditions.includes(c)).length;\n      return bShared - aShared;\n    }).slice(0, 8); // Top 8 alternatives\n  };\n\n  // Find combination therapies involving this antibiotic\n  const findCombinationTherapies = antibiotic => {\n    if (!indexes || !antibiotic) return [];\n\n    // Find other antibiotics that appear in combination with this one\n    const combinations = new Map();\n    antibiotic.therapyContexts.forEach(context => {\n      const contextLower = context.toLowerCase();\n\n      // Look for PLUS/+ indicators\n      if (contextLower.includes('plus') || contextLower.includes(' + ')) {\n        indexes.antibiotics.forEach(otherAntibiotic => {\n          if (otherAntibiotic.name !== antibiotic.name && contextLower.includes(otherAntibiotic.name.toLowerCase())) {\n            if (!combinations.has(otherAntibiotic.name)) {\n              combinations.set(otherAntibiotic.name, {\n                antibiotic: otherAntibiotic,\n                contexts: []\n              });\n            }\n            combinations.get(otherAntibiotic.name).contexts.push(context);\n          }\n        });\n      }\n    });\n    return Array.from(combinations.values());\n  };\n\n  // Get resistance information (based on therapy context patterns)\n  const getResistanceInfo = antibiotic => {\n    if (!indexes || !antibiotic) return null;\n    const resistancePatterns = [];\n    antibiotic.therapyContexts.forEach(context => {\n      const contextLower = context.toLowerCase();\n      if (contextLower.includes('mrsa') && contextLower.includes(antibiotic.name.toLowerCase())) {\n        resistancePatterns.push('Active against MRSA');\n      }\n      if (contextLower.includes('resistant') || contextLower.includes('resistance')) {\n        resistancePatterns.push('Consider resistance patterns');\n      }\n      if (contextLower.includes('susceptible') || contextLower.includes('susceptibility')) {\n        resistancePatterns.push('Requires susceptibility testing');\n      }\n    });\n    return resistancePatterns.length > 0 ? Array.from(new Set(resistancePatterns)) : null;\n  };\n  return {\n    // Data\n    antibiotics,\n    selectedAntibiotic,\n    selectedAntibioticConditions,\n    drugClassStats,\n    availableDrugClasses,\n    // Statistics\n    antibioticStats,\n    filteredStats,\n    // Search state\n    searchQuery,\n    drugClassFilter,\n    sortBy,\n    // Actions\n    searchAntibiotics: searchAntibioticsFunction,\n    filterByDrugClass,\n    setSortOrder,\n    selectAntibiotic,\n    clearSelection,\n    clearFilters,\n    // Utilities\n    getAntibioticByName,\n    findAlternativeAntibiotics,\n    findCombinationTherapies,\n    getResistanceInfo,\n    // Loading state\n    isLoading: !indexes\n  };\n};\n_s(useAntibioticData, \"tZeofXGNFlutXa3R4/ImUD9T2Q8=\");\nexport default useAntibioticData;","map":{"version":3,"names":["useMemo","useState","buildIndexes","searchAntibiotics","getConditionsForAntibiotic","getDrugClassStats","findCombinationTherapyConditions","useAntibioticData","medicalConditions","_s","searchQuery","setSearchQuery","drugClassFilter","setDrugClassFilter","sortBy","setSortBy","selectedAntibiotic","setSelectedAntibiotic","indexes","length","antibiotics","query","drugClass","selectedAntibioticConditions","name","drugClassStats","availableDrugClasses","Array","from","drugClassToAntibiotics","keys","sort","antibioticStats","total","conditionCounts","map","a","conditions","maxConditions","Math","max","avgConditions","reduce","b","toFixed","topAntibiotics","count","slice","drugClassCount","filteredStats","drugClassCounts","forEach","antibiotic","class","byDrugClass","searchAntibioticsFunction","filterByDrugClass","setSortOrder","order","selectAntibiotic","clearSelection","clearFilters","getAntibioticByName","find","findAlternativeAntibiotics","filter","sharedConditions","c","includes","aShared","bShared","findCombinationTherapies","combinations","Map","therapyContexts","context","contextLower","toLowerCase","otherAntibiotic","has","set","contexts","get","push","values","getResistanceInfo","resistancePatterns","Set","isLoading"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useAntibioticData.js"],"sourcesContent":["/**\n * useAntibioticData Hook\n * Custom hook for managing antibiotic data, search, and condition lookup\n * Provides antibiotic exploration functionality with drug class filtering and cross-references\n */\n\nimport { useMemo, useState } from 'react';\nimport { buildIndexes, searchAntibiotics, getConditionsForAntibiotic, getDrugClassStats, findCombinationTherapyConditions } from '../utils/dataIndexer';\n\nconst useAntibioticData = (medicalConditions) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [drugClassFilter, setDrugClassFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('name'); // 'name', 'count', 'conditions', 'class'\n  const [selectedAntibiotic, setSelectedAntibiotic] = useState(null);\n\n  // Build indexes once when conditions data changes\n  const indexes = useMemo(() => {\n    if (!medicalConditions || medicalConditions.length === 0) {\n      return null;\n    }\n    return buildIndexes(medicalConditions);\n  }, [medicalConditions]);\n\n  // Get filtered and sorted antibiotics\n  const antibiotics = useMemo(() => {\n    if (!indexes) return [];\n    \n    return searchAntibiotics(indexes, {\n      query: searchQuery,\n      drugClass: drugClassFilter,\n      sortBy: sortBy\n    });\n  }, [indexes, searchQuery, drugClassFilter, sortBy]);\n\n  // Get conditions for selected antibiotic\n  const selectedAntibioticConditions = useMemo(() => {\n    if (!indexes || !selectedAntibiotic) return [];\n    return getConditionsForAntibiotic(indexes, selectedAntibiotic.name);\n  }, [indexes, selectedAntibiotic]);\n\n  // Get drug class statistics\n  const drugClassStats = useMemo(() => {\n    if (!indexes) return [];\n    return getDrugClassStats(indexes);\n  }, [indexes]);\n\n  // Get available drug classes for filtering\n  const availableDrugClasses = useMemo(() => {\n    if (!indexes) return [];\n    return Array.from(indexes.drugClassToAntibiotics.keys()).sort();\n  }, [indexes]);\n\n  // Get antibiotic statistics\n  const antibioticStats = useMemo(() => {\n    if (!indexes) return null;\n    \n    const total = indexes.antibiotics.length;\n    const conditionCounts = indexes.antibiotics.map(a => a.conditions.length);\n    const maxConditions = Math.max(...conditionCounts, 0);\n    const avgConditions = conditionCounts.length > 0 \n      ? (conditionCounts.reduce((a, b) => a + b, 0) / conditionCounts.length).toFixed(1)\n      : 0;\n\n    // Calculate most used antibiotics\n    const topAntibiotics = [...indexes.antibiotics]\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      total,\n      maxConditions,\n      avgConditions,\n      topAntibiotics,\n      drugClassCount: availableDrugClasses.length\n    };\n  }, [indexes, availableDrugClasses]);\n\n  // Get filtered statistics\n  const filteredStats = useMemo(() => {\n    const drugClassCounts = {};\n    antibiotics.forEach(antibiotic => {\n      drugClassCounts[antibiotic.class] = (drugClassCounts[antibiotic.class] || 0) + 1;\n    });\n    \n    return {\n      total: antibiotics.length,\n      byDrugClass: drugClassCounts\n    };\n  }, [antibiotics]);\n\n  // Search and filter functions\n  const searchAntibioticsFunction = (query) => {\n    setSearchQuery(query);\n  };\n\n  const filterByDrugClass = (drugClass) => {\n    setDrugClassFilter(drugClass);\n  };\n\n  const setSortOrder = (order) => {\n    setSortBy(order);\n  };\n\n  const selectAntibiotic = (antibiotic) => {\n    setSelectedAntibiotic(antibiotic);\n  };\n\n  const clearSelection = () => {\n    setSelectedAntibiotic(null);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setDrugClassFilter('all');\n    setSortBy('name');\n  };\n\n  // Get antibiotic by name (for external lookups)\n  const getAntibioticByName = (name) => {\n    if (!indexes) return null;\n    return indexes.antibiotics.find(a => a.name === name);\n  };\n\n  // Find alternative antibiotics (same drug class or similar spectrum)\n  const findAlternativeAntibiotics = (antibiotic) => {\n    if (!indexes || !antibiotic) return [];\n    \n    return indexes.antibiotics\n      .filter(a => a.name !== antibiotic.name)\n      .filter(a => {\n        // Same drug class\n        if (a.class === antibiotic.class) {\n          return true;\n        }\n        \n        // Shared conditions (similar spectrum)\n        const sharedConditions = a.conditions.filter(c => antibiotic.conditions.includes(c));\n        return sharedConditions.length > 0;\n      })\n      .sort((a, b) => {\n        // Prioritize same drug class\n        if (a.class === antibiotic.class && b.class !== antibiotic.class) return -1;\n        if (b.class === antibiotic.class && a.class !== antibiotic.class) return 1;\n        \n        // Then sort by number of shared conditions\n        const aShared = a.conditions.filter(c => antibiotic.conditions.includes(c)).length;\n        const bShared = b.conditions.filter(c => antibiotic.conditions.includes(c)).length;\n        return bShared - aShared;\n      })\n      .slice(0, 8); // Top 8 alternatives\n  };\n\n  // Find combination therapies involving this antibiotic\n  const findCombinationTherapies = (antibiotic) => {\n    if (!indexes || !antibiotic) return [];\n    \n    // Find other antibiotics that appear in combination with this one\n    const combinations = new Map();\n    \n    antibiotic.therapyContexts.forEach(context => {\n      const contextLower = context.toLowerCase();\n      \n      // Look for PLUS/+ indicators\n      if (contextLower.includes('plus') || contextLower.includes(' + ')) {\n        indexes.antibiotics.forEach(otherAntibiotic => {\n          if (otherAntibiotic.name !== antibiotic.name && \n              contextLower.includes(otherAntibiotic.name.toLowerCase())) {\n            if (!combinations.has(otherAntibiotic.name)) {\n              combinations.set(otherAntibiotic.name, {\n                antibiotic: otherAntibiotic,\n                contexts: []\n              });\n            }\n            combinations.get(otherAntibiotic.name).contexts.push(context);\n          }\n        });\n      }\n    });\n    \n    return Array.from(combinations.values());\n  };\n\n  // Get resistance information (based on therapy context patterns)\n  const getResistanceInfo = (antibiotic) => {\n    if (!indexes || !antibiotic) return null;\n    \n    const resistancePatterns = [];\n    \n    antibiotic.therapyContexts.forEach(context => {\n      const contextLower = context.toLowerCase();\n      \n      if (contextLower.includes('mrsa') && contextLower.includes(antibiotic.name.toLowerCase())) {\n        resistancePatterns.push('Active against MRSA');\n      }\n      if (contextLower.includes('resistant') || contextLower.includes('resistance')) {\n        resistancePatterns.push('Consider resistance patterns');\n      }\n      if (contextLower.includes('susceptible') || contextLower.includes('susceptibility')) {\n        resistancePatterns.push('Requires susceptibility testing');\n      }\n    });\n    \n    return resistancePatterns.length > 0 ? Array.from(new Set(resistancePatterns)) : null;\n  };\n\n  return {\n    // Data\n    antibiotics,\n    selectedAntibiotic,\n    selectedAntibioticConditions,\n    drugClassStats,\n    availableDrugClasses,\n    \n    // Statistics\n    antibioticStats,\n    filteredStats,\n    \n    // Search state\n    searchQuery,\n    drugClassFilter,\n    sortBy,\n    \n    // Actions\n    searchAntibiotics: searchAntibioticsFunction,\n    filterByDrugClass,\n    setSortOrder,\n    selectAntibiotic,\n    clearSelection,\n    clearFilters,\n    \n    // Utilities\n    getAntibioticByName,\n    findAlternativeAntibiotics,\n    findCombinationTherapies,\n    getResistanceInfo,\n    \n    // Loading state\n    isLoading: !indexes\n  };\n};\n\nexport default useAntibioticData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}