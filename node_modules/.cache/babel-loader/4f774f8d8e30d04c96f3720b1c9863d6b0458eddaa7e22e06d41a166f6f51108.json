{"ast":null,"code":"import _objectSpread from\"/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * useUserSession Hook\n * Manages user session statistics and interaction tracking\n * Extracted from usePathogenRecommendations for better separation of concerns\n */import{useState,useCallback}from'react';const useUserSession=indexes=>{const[sessionStats,setSessionStats]=useState({totalViewed:0,averageTimePerPathogen:0,preferredCategories:new Map(),gramStatusFocus:new Map(),explorationDepth:0});const[userPreferences,setUserPreferences]=useState({systematicLearning:false,preferSimilarPathogens:true,includeRecentlyViewed:false,difficultyLevel:'adaptive',focusAreas:[]});/**\n   * Records a user interaction with a pathogen\n   */const recordInteraction=useCallback(function(pathogen){let interactionType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'view';let timeSpent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;setSessionStats(prevStats=>{const newStats=_objectSpread(_objectSpread({},prevStats),{},{totalViewed:prevStats.totalViewed+1,explorationDepth:prevStats.explorationDepth+1});// Update average time per pathogen\nconst totalTime=prevStats.averageTimePerPathogen*prevStats.totalViewed+timeSpent;newStats.averageTimePerPathogen=totalTime/newStats.totalViewed;// Update category preferences\nif(pathogen.conditions){pathogen.conditions.forEach(conditionId=>{const condition=indexes===null||indexes===void 0?void 0:indexes.conditions.find(c=>c.id===conditionId);if(condition){const currentCount=newStats.preferredCategories.get(condition.category)||0;newStats.preferredCategories.set(condition.category,currentCount+1);}});}// Update gram status preferences\nif(pathogen.gramStatus){const currentCount=newStats.gramStatusFocus.get(pathogen.gramStatus)||0;newStats.gramStatusFocus.set(pathogen.gramStatus,currentCount+1);}return newStats;});},[indexes]);/**\n   * Resets session statistics\n   */const resetSession=useCallback(()=>{setSessionStats({totalViewed:0,averageTimePerPathogen:0,preferredCategories:new Map(),gramStatusFocus:new Map(),explorationDepth:0});},[]);/**\n   * Updates user preferences\n   */const updatePreferences=useCallback(newPreferences=>{setUserPreferences(prev=>_objectSpread(_objectSpread({},prev),newPreferences));},[]);return{sessionStats,userPreferences,recordInteraction,resetSession,updatePreferences,setUserPreferences};};export default useUserSession;","map":{"version":3,"names":["useState","useCallback","useUserSession","indexes","sessionStats","setSessionStats","totalViewed","averageTimePerPathogen","preferredCategories","Map","gramStatusFocus","explorationDepth","userPreferences","setUserPreferences","systematicLearning","preferSimilarPathogens","includeRecentlyViewed","difficultyLevel","focusAreas","recordInteraction","pathogen","interactionType","arguments","length","undefined","timeSpent","prevStats","newStats","_objectSpread","totalTime","conditions","forEach","conditionId","condition","find","c","id","currentCount","get","category","set","gramStatus","resetSession","updatePreferences","newPreferences","prev"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useUserSession.js"],"sourcesContent":["/**\n * useUserSession Hook\n * Manages user session statistics and interaction tracking\n * Extracted from usePathogenRecommendations for better separation of concerns\n */\n\nimport { useState, useCallback } from 'react';\n\nconst useUserSession = (indexes) => {\n  const [sessionStats, setSessionStats] = useState({\n    totalViewed: 0,\n    averageTimePerPathogen: 0,\n    preferredCategories: new Map(),\n    gramStatusFocus: new Map(),\n    explorationDepth: 0\n  });\n\n  const [userPreferences, setUserPreferences] = useState({\n    systematicLearning: false,\n    preferSimilarPathogens: true,\n    includeRecentlyViewed: false,\n    difficultyLevel: 'adaptive',\n    focusAreas: []\n  });\n\n  /**\n   * Records a user interaction with a pathogen\n   */\n  const recordInteraction = useCallback((pathogen, interactionType = 'view', timeSpent = 0) => {\n    setSessionStats(prevStats => {\n      const newStats = {\n        ...prevStats,\n        totalViewed: prevStats.totalViewed + 1,\n        explorationDepth: prevStats.explorationDepth + 1\n      };\n\n      // Update average time per pathogen\n      const totalTime = (prevStats.averageTimePerPathogen * prevStats.totalViewed) + timeSpent;\n      newStats.averageTimePerPathogen = totalTime / newStats.totalViewed;\n\n      // Update category preferences\n      if (pathogen.conditions) {\n        pathogen.conditions.forEach(conditionId => {\n          const condition = indexes?.conditions.find(c => c.id === conditionId);\n          if (condition) {\n            const currentCount = newStats.preferredCategories.get(condition.category) || 0;\n            newStats.preferredCategories.set(condition.category, currentCount + 1);\n          }\n        });\n      }\n\n      // Update gram status preferences\n      if (pathogen.gramStatus) {\n        const currentCount = newStats.gramStatusFocus.get(pathogen.gramStatus) || 0;\n        newStats.gramStatusFocus.set(pathogen.gramStatus, currentCount + 1);\n      }\n\n      return newStats;\n    });\n  }, [indexes]);\n\n  /**\n   * Resets session statistics\n   */\n  const resetSession = useCallback(() => {\n    setSessionStats({\n      totalViewed: 0,\n      averageTimePerPathogen: 0,\n      preferredCategories: new Map(),\n      gramStatusFocus: new Map(),\n      explorationDepth: 0\n    });\n  }, []);\n\n  /**\n   * Updates user preferences\n   */\n  const updatePreferences = useCallback((newPreferences) => {\n    setUserPreferences(prev => ({\n      ...prev,\n      ...newPreferences\n    }));\n  }, []);\n\n  return {\n    sessionStats,\n    userPreferences,\n    recordInteraction,\n    resetSession,\n    updatePreferences,\n    setUserPreferences\n  };\n};\n\nexport default useUserSession;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}