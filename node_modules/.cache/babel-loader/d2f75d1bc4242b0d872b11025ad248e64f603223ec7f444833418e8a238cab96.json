{"ast":null,"code":"import _objectSpread from\"/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * usePathogenRecommendations Hook\n * Smart recommendation engine for pathogen learning suggestions\n * Provides personalized recommendations based on user behavior and learning patterns\n */import{useState,useEffect,useMemo,useCallback}from'react';import{getPathogenRecommendations,buildPathogenNetwork,calculatePathogenSimilarity}from'../utils/dataIndexer';const usePathogenRecommendations=function(indexes,selectedPathogen){let userBehavior=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const[recommendations,setRecommendations]=useState([]);const[learningPath,setLearningPath]=useState([]);const[userPreferences,setUserPreferences]=useState({systematicLearning:false,preferSimilarPathogens:true,includeRecentlyViewed:false,difficultyLevel:'adaptive',// 'beginner', 'intermediate', 'advanced', 'adaptive'\nfocusAreas:[]// Array of categories the user is interested in\n});const[sessionStats,setSessionStats]=useState({totalViewed:0,averageTimePerPathogen:0,preferredCategories:new Map(),gramStatusFocus:new Map(),explorationDepth:0});// Extract user behavior patterns\nconst behaviorAnalysis=useMemo(()=>{var _Array$from$sort$;if(!userBehavior.history||userBehavior.history.length===0){return{mostViewedCategories:[],gramStatusPreference:null,averageSessionLength:0,explorationStyle:'systematic',// 'systematic', 'random', 'focused'\ndifficultyProgression:'steady'};}const history=userBehavior.history;// Analyze category preferences\nconst categoryCount=new Map();const gramStatusCount=new Map();let totalSessionTime=0;history.forEach(item=>{var _item$pathogen,_item$pathogen2;// Count categories\nif((_item$pathogen=item.pathogen)!==null&&_item$pathogen!==void 0&&_item$pathogen.conditions){item.pathogen.conditions.forEach(conditionId=>{const condition=indexes===null||indexes===void 0?void 0:indexes.conditions.find(c=>c.id===conditionId);if(condition){categoryCount.set(condition.category,(categoryCount.get(condition.category)||0)+1);}});}// Count gram status preferences\nif((_item$pathogen2=item.pathogen)!==null&&_item$pathogen2!==void 0&&_item$pathogen2.gramStatus){gramStatusCount.set(item.pathogen.gramStatus,(gramStatusCount.get(item.pathogen.gramStatus)||0)+1);}// Sum session times\nif(item.timeSpent){totalSessionTime+=item.timeSpent;}});// Determine exploration style\nconst uniquePathogens=new Set(history.map(h=>{var _h$pathogen;return(_h$pathogen=h.pathogen)===null||_h$pathogen===void 0?void 0:_h$pathogen.name;})).size;const totalViews=history.length;const revisitRate=totalViews>0?(totalViews-uniquePathogens)/totalViews:0;let explorationStyle='systematic';if(revisitRate>0.3){explorationStyle='focused';}else if(uniquePathogens>totalViews*0.8){explorationStyle='random';}return{mostViewedCategories:Array.from(categoryCount.entries()).sort((_ref,_ref2)=>{let[,a]=_ref;let[,b]=_ref2;return b-a;}).slice(0,3).map(_ref3=>{let[category]=_ref3;return category;}),gramStatusPreference:((_Array$from$sort$=Array.from(gramStatusCount.entries()).sort((_ref4,_ref5)=>{let[,a]=_ref4;let[,b]=_ref5;return b-a;})[0])===null||_Array$from$sort$===void 0?void 0:_Array$from$sort$[0])||null,averageSessionLength:totalSessionTime/Math.max(1,totalViews),explorationStyle,difficultyProgression:'steady'// This could be enhanced with more sophisticated analysis\n};},[userBehavior,indexes]);// Update user preferences based on behavior\nuseEffect(()=>{setUserPreferences(prev=>_objectSpread(_objectSpread({},prev),{},{systematicLearning:behaviorAnalysis.explorationStyle==='systematic',focusAreas:behaviorAnalysis.mostViewedCategories}));},[behaviorAnalysis]);// Calculate personalized recommendations\nconst calculateRecommendations=useCallback(()=>{if(!selectedPathogen||!indexes){setRecommendations([]);return;}// Get base recommendations\nconst baseRecs=getPathogenRecommendations(indexes,selectedPathogen.name,userBehavior.recentlyViewed||[],userPreferences);// Enhance recommendations with personalization\nconst enhancedRecs=baseRecs.map(rec=>{var _pathogen$conditions;const pathogen=indexes.pathogens.find(p=>p.name===rec.pathogen);if(!pathogen)return rec;let personalizedScore=rec.weight;let personalizedReasoning=rec.reasoning;// Boost score based on user category preferences\nif(pathogen.conditions&&userPreferences.focusAreas.length>0){const pathogenCategories=pathogen.conditions.map(condId=>{var _indexes$conditions$f;return(_indexes$conditions$f=indexes.conditions.find(c=>c.id===condId))===null||_indexes$conditions$f===void 0?void 0:_indexes$conditions$f.category;}).filter(Boolean);const categoryMatch=pathogenCategories.some(cat=>userPreferences.focusAreas.includes(cat));if(categoryMatch){personalizedScore*=1.3;personalizedReasoning+=' (matches your interests)';}}// Boost score based on gram status preference\nif(behaviorAnalysis.gramStatusPreference&&pathogen.gramStatus===behaviorAnalysis.gramStatusPreference){personalizedScore*=1.2;personalizedReasoning+=' (preferred gram status)';}// Adjust based on difficulty level\nconst pathogenComplexity=pathogen.conditions.length+(indexes.pathogenAntibioticMatrix.get(pathogen.name)||[]).length;if(userPreferences.difficultyLevel!=='adaptive'){const targetComplexity={beginner:[1,4],intermediate:[4,8],advanced:[8,Infinity]}[userPreferences.difficultyLevel]||[1,Infinity];if(pathogenComplexity>=targetComplexity[0]&&pathogenComplexity<targetComplexity[1]){personalizedScore*=1.25;personalizedReasoning+=\" (\".concat(userPreferences.difficultyLevel,\" level)\");}}return _objectSpread(_objectSpread({},rec),{},{personalizedScore,originalScore:rec.weight,personalizedReasoning,pathogenComplexity,userRelevance:{categoryMatch:(_pathogen$conditions=pathogen.conditions)===null||_pathogen$conditions===void 0?void 0:_pathogen$conditions.some(condId=>{const condition=indexes.conditions.find(c=>c.id===condId);return condition&&userPreferences.focusAreas.includes(condition.category);}),gramStatusMatch:pathogen.gramStatus===behaviorAnalysis.gramStatusPreference,difficultyMatch:userPreferences.difficultyLevel==='adaptive'||(()=>{const targetComplexity={beginner:[1,4],intermediate:[4,8],advanced:[8,Infinity]}[userPreferences.difficultyLevel]||[1,Infinity];return pathogenComplexity>=targetComplexity[0]&&pathogenComplexity<targetComplexity[1];})()}});});// Sort by personalized score\nenhancedRecs.sort((a,b)=>b.personalizedScore-a.personalizedScore);setRecommendations(enhancedRecs);},[selectedPathogen,indexes,userBehavior,userPreferences,behaviorAnalysis]);// Generate learning path recommendations\nconst generateLearningPath=useCallback(()=>{if(!selectedPathogen||!indexes){setLearningPath([]);return;}const network=buildPathogenNetwork(indexes);const startingNode=network.nodes.find(n=>n.id===selectedPathogen.name);if(!startingNode){setLearningPath([]);return;}let path=[selectedPathogen];let currentPathogen=selectedPathogen;const visited=new Set([selectedPathogen.name]);// Build a learning path based on user preferences\nfor(let step=0;step<5;step++){const candidates=network.edges.filter(e=>(e.source===currentPathogen.name||e.target===currentPathogen.name)&&!visited.has(e.source===currentPathogen.name?e.target:e.source)).map(e=>{const targetName=e.source===currentPathogen.name?e.target:e.source;const targetPathogen=indexes.pathogens.find(p=>p.name===targetName);return{pathogen:targetPathogen,similarity:e.similarity,weight:e.weight};}).filter(c=>c.pathogen);if(candidates.length===0)break;// Score candidates based on learning objectives\nconst scoredCandidates=candidates.map(candidate=>{let score=candidate.weight;// Progressive difficulty\nif(userPreferences.difficultyLevel==='adaptive'){const currentComplexity=currentPathogen.conditions.length;const candidateComplexity=candidate.pathogen.conditions.length;const complexityDiff=candidateComplexity-currentComplexity;// Prefer gradual increase in complexity\nif(complexityDiff>=0&&complexityDiff<=2){score*=1.3;}}// Category diversity vs focus\nif(userPreferences.systematicLearning){// Prefer same categories for systematic learning\nconst currentCategories=new Set(currentPathogen.conditions.map(condId=>{var _indexes$conditions$f2;return(_indexes$conditions$f2=indexes.conditions.find(c=>c.id===condId))===null||_indexes$conditions$f2===void 0?void 0:_indexes$conditions$f2.category;}).filter(Boolean));const candidateCategories=new Set(candidate.pathogen.conditions.map(condId=>{var _indexes$conditions$f3;return(_indexes$conditions$f3=indexes.conditions.find(c=>c.id===condId))===null||_indexes$conditions$f3===void 0?void 0:_indexes$conditions$f3.category;}).filter(Boolean));const overlap=Array.from(currentCategories).filter(cat=>candidateCategories.has(cat)).length;score*=1+overlap*0.2;}return _objectSpread(_objectSpread({},candidate),{},{learningScore:score});});// Select best candidate\nscoredCandidates.sort((a,b)=>b.learningScore-a.learningScore);const nextPathogen=scoredCandidates[0].pathogen;path.push(nextPathogen);visited.add(nextPathogen.name);currentPathogen=nextPathogen;}setLearningPath(path);},[selectedPathogen,indexes,userPreferences]);// Update recommendations when dependencies change\nuseEffect(()=>{calculateRecommendations();generateLearningPath();},[calculateRecommendations,generateLearningPath]);// Track user interactions for learning\nconst recordInteraction=useCallback(function(pathogen,interactionType){let timeSpent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;setSessionStats(prev=>{const newStats=_objectSpread({},prev);newStats.totalViewed+=1;if(timeSpent>0){newStats.averageTimePerPathogen=(newStats.averageTimePerPathogen*(newStats.totalViewed-1)+timeSpent)/newStats.totalViewed;}// Update category preferences\nif(pathogen.conditions){pathogen.conditions.forEach(conditionId=>{const condition=indexes===null||indexes===void 0?void 0:indexes.conditions.find(c=>c.id===conditionId);if(condition){const currentCount=newStats.preferredCategories.get(condition.category)||0;newStats.preferredCategories.set(condition.category,currentCount+1);}});}// Update gram status preferences\nif(pathogen.gramStatus){const currentCount=newStats.gramStatusFocus.get(pathogen.gramStatus)||0;newStats.gramStatusFocus.set(pathogen.gramStatus,currentCount+1);}return newStats;});},[indexes]);// Get recommendation categories\nconst getRecommendationsByCategory=useMemo(()=>{const categorized={'Similar':recommendations.filter(r=>r.reasoning.includes('similarity')),'Your Interests':recommendations.filter(r=>{var _r$userRelevance;return(_r$userRelevance=r.userRelevance)===null||_r$userRelevance===void 0?void 0:_r$userRelevance.categoryMatch;}),'Next Level':recommendations.filter(r=>{var _selectedPathogen$con;return r.pathogenComplexity>((selectedPathogen===null||selectedPathogen===void 0?void 0:(_selectedPathogen$con=selectedPathogen.conditions)===null||_selectedPathogen$con===void 0?void 0:_selectedPathogen$con.length)||0);}),'Recently Popular':recommendations.filter(r=>r.reasoning.includes('popular')),'Discover':recommendations.filter(r=>{var _r$userRelevance2;return!((_r$userRelevance2=r.userRelevance)!==null&&_r$userRelevance2!==void 0&&_r$userRelevance2.categoryMatch)&&!r.reasoning.includes('similarity');})};// Filter out empty categories\nreturn Object.fromEntries(Object.entries(categorized).filter(_ref6=>{let[,recs]=_ref6;return recs.length>0;}));},[recommendations,selectedPathogen]);return{recommendations,learningPath,userPreferences,setUserPreferences,sessionStats,behaviorAnalysis,recordInteraction,getRecommendationsByCategory,// Actions\nrefreshRecommendations:calculateRecommendations,regenerateLearningPath:generateLearningPath};};export default usePathogenRecommendations;","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","getPathogenRecommendations","buildPathogenNetwork","calculatePathogenSimilarity","usePathogenRecommendations","indexes","selectedPathogen","userBehavior","arguments","length","undefined","recommendations","setRecommendations","learningPath","setLearningPath","userPreferences","setUserPreferences","systematicLearning","preferSimilarPathogens","includeRecentlyViewed","difficultyLevel","focusAreas","sessionStats","setSessionStats","totalViewed","averageTimePerPathogen","preferredCategories","Map","gramStatusFocus","explorationDepth","behaviorAnalysis","_Array$from$sort$","history","mostViewedCategories","gramStatusPreference","averageSessionLength","explorationStyle","difficultyProgression","categoryCount","gramStatusCount","totalSessionTime","forEach","item","_item$pathogen","_item$pathogen2","pathogen","conditions","conditionId","condition","find","c","id","set","category","get","gramStatus","timeSpent","uniquePathogens","Set","map","h","_h$pathogen","name","size","totalViews","revisitRate","Array","from","entries","sort","_ref","_ref2","a","b","slice","_ref3","_ref4","_ref5","Math","max","prev","_objectSpread","calculateRecommendations","baseRecs","recentlyViewed","enhancedRecs","rec","_pathogen$conditions","pathogens","p","personalizedScore","weight","personalizedReasoning","reasoning","pathogenCategories","condId","_indexes$conditions$f","filter","Boolean","categoryMatch","some","cat","includes","pathogenComplexity","pathogenAntibioticMatrix","targetComplexity","beginner","intermediate","advanced","Infinity","concat","originalScore","userRelevance","gramStatusMatch","difficultyMatch","generateLearningPath","network","startingNode","nodes","n","path","currentPathogen","visited","step","candidates","edges","e","source","target","has","targetName","targetPathogen","similarity","scoredCandidates","candidate","score","currentComplexity","candidateComplexity","complexityDiff","currentCategories","_indexes$conditions$f2","candidateCategories","_indexes$conditions$f3","overlap","learningScore","nextPathogen","push","add","recordInteraction","interactionType","newStats","currentCount","getRecommendationsByCategory","categorized","r","_r$userRelevance","_selectedPathogen$con","_r$userRelevance2","Object","fromEntries","_ref6","recs","refreshRecommendations","regenerateLearningPath"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/usePathogenRecommendations.js"],"sourcesContent":["/**\n * usePathogenRecommendations Hook\n * Smart recommendation engine for pathogen learning suggestions\n * Provides personalized recommendations based on user behavior and learning patterns\n */\n\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { getPathogenRecommendations, buildPathogenNetwork, calculatePathogenSimilarity } from '../utils/dataIndexer';\n\nconst usePathogenRecommendations = (indexes, selectedPathogen, userBehavior = {}) => {\n  const [recommendations, setRecommendations] = useState([]);\n  const [learningPath, setLearningPath] = useState([]);\n  const [userPreferences, setUserPreferences] = useState({\n    systematicLearning: false,\n    preferSimilarPathogens: true,\n    includeRecentlyViewed: false,\n    difficultyLevel: 'adaptive', // 'beginner', 'intermediate', 'advanced', 'adaptive'\n    focusAreas: [] // Array of categories the user is interested in\n  });\n  const [sessionStats, setSessionStats] = useState({\n    totalViewed: 0,\n    averageTimePerPathogen: 0,\n    preferredCategories: new Map(),\n    gramStatusFocus: new Map(),\n    explorationDepth: 0\n  });\n\n  // Extract user behavior patterns\n  const behaviorAnalysis = useMemo(() => {\n    if (!userBehavior.history || userBehavior.history.length === 0) {\n      return {\n        mostViewedCategories: [],\n        gramStatusPreference: null,\n        averageSessionLength: 0,\n        explorationStyle: 'systematic', // 'systematic', 'random', 'focused'\n        difficultyProgression: 'steady'\n      };\n    }\n\n    const history = userBehavior.history;\n    \n    // Analyze category preferences\n    const categoryCount = new Map();\n    const gramStatusCount = new Map();\n    let totalSessionTime = 0;\n    \n    history.forEach(item => {\n      // Count categories\n      if (item.pathogen?.conditions) {\n        item.pathogen.conditions.forEach(conditionId => {\n          const condition = indexes?.conditions.find(c => c.id === conditionId);\n          if (condition) {\n            categoryCount.set(condition.category, (categoryCount.get(condition.category) || 0) + 1);\n          }\n        });\n      }\n      \n      // Count gram status preferences\n      if (item.pathogen?.gramStatus) {\n        gramStatusCount.set(\n          item.pathogen.gramStatus, \n          (gramStatusCount.get(item.pathogen.gramStatus) || 0) + 1\n        );\n      }\n      \n      // Sum session times\n      if (item.timeSpent) {\n        totalSessionTime += item.timeSpent;\n      }\n    });\n\n    // Determine exploration style\n    const uniquePathogens = new Set(history.map(h => h.pathogen?.name)).size;\n    const totalViews = history.length;\n    const revisitRate = totalViews > 0 ? (totalViews - uniquePathogens) / totalViews : 0;\n    \n    let explorationStyle = 'systematic';\n    if (revisitRate > 0.3) {\n      explorationStyle = 'focused';\n    } else if (uniquePathogens > totalViews * 0.8) {\n      explorationStyle = 'random';\n    }\n\n    return {\n      mostViewedCategories: Array.from(categoryCount.entries())\n        .sort(([,a], [,b]) => b - a)\n        .slice(0, 3)\n        .map(([category]) => category),\n      gramStatusPreference: Array.from(gramStatusCount.entries())\n        .sort(([,a], [,b]) => b - a)[0]?.[0] || null,\n      averageSessionLength: totalSessionTime / Math.max(1, totalViews),\n      explorationStyle,\n      difficultyProgression: 'steady' // This could be enhanced with more sophisticated analysis\n    };\n  }, [userBehavior, indexes]);\n\n  // Update user preferences based on behavior\n  useEffect(() => {\n    setUserPreferences(prev => ({\n      ...prev,\n      systematicLearning: behaviorAnalysis.explorationStyle === 'systematic',\n      focusAreas: behaviorAnalysis.mostViewedCategories\n    }));\n  }, [behaviorAnalysis]);\n\n  // Calculate personalized recommendations\n  const calculateRecommendations = useCallback(() => {\n    if (!selectedPathogen || !indexes) {\n      setRecommendations([]);\n      return;\n    }\n\n    // Get base recommendations\n    const baseRecs = getPathogenRecommendations(\n      indexes,\n      selectedPathogen.name,\n      userBehavior.recentlyViewed || [],\n      userPreferences\n    );\n\n    // Enhance recommendations with personalization\n    const enhancedRecs = baseRecs.map(rec => {\n      const pathogen = indexes.pathogens.find(p => p.name === rec.pathogen);\n      if (!pathogen) return rec;\n\n      let personalizedScore = rec.weight;\n      let personalizedReasoning = rec.reasoning;\n\n      // Boost score based on user category preferences\n      if (pathogen.conditions && userPreferences.focusAreas.length > 0) {\n        const pathogenCategories = pathogen.conditions\n          .map(condId => indexes.conditions.find(c => c.id === condId)?.category)\n          .filter(Boolean);\n        \n        const categoryMatch = pathogenCategories.some(cat => \n          userPreferences.focusAreas.includes(cat)\n        );\n        \n        if (categoryMatch) {\n          personalizedScore *= 1.3;\n          personalizedReasoning += ' (matches your interests)';\n        }\n      }\n\n      // Boost score based on gram status preference\n      if (behaviorAnalysis.gramStatusPreference && \n          pathogen.gramStatus === behaviorAnalysis.gramStatusPreference) {\n        personalizedScore *= 1.2;\n        personalizedReasoning += ' (preferred gram status)';\n      }\n\n      // Adjust based on difficulty level\n      const pathogenComplexity = pathogen.conditions.length + \n        (indexes.pathogenAntibioticMatrix.get(pathogen.name) || []).length;\n      \n      if (userPreferences.difficultyLevel !== 'adaptive') {\n        const targetComplexity = {\n          beginner: [1, 4],\n          intermediate: [4, 8],\n          advanced: [8, Infinity]\n        }[userPreferences.difficultyLevel] || [1, Infinity];\n\n        if (pathogenComplexity >= targetComplexity[0] && pathogenComplexity < targetComplexity[1]) {\n          personalizedScore *= 1.25;\n          personalizedReasoning += ` (${userPreferences.difficultyLevel} level)`;\n        }\n      }\n\n      return {\n        ...rec,\n        personalizedScore,\n        originalScore: rec.weight,\n        personalizedReasoning,\n        pathogenComplexity,\n        userRelevance: {\n          categoryMatch: pathogen.conditions?.some(condId => {\n            const condition = indexes.conditions.find(c => c.id === condId);\n            return condition && userPreferences.focusAreas.includes(condition.category);\n          }),\n          gramStatusMatch: pathogen.gramStatus === behaviorAnalysis.gramStatusPreference,\n          difficultyMatch: userPreferences.difficultyLevel === 'adaptive' || (() => {\n            const targetComplexity = {\n              beginner: [1, 4],\n              intermediate: [4, 8],\n              advanced: [8, Infinity]\n            }[userPreferences.difficultyLevel] || [1, Infinity];\n            return pathogenComplexity >= targetComplexity[0] && pathogenComplexity < targetComplexity[1];\n          })()\n        }\n      };\n    });\n\n    // Sort by personalized score\n    enhancedRecs.sort((a, b) => b.personalizedScore - a.personalizedScore);\n\n    setRecommendations(enhancedRecs);\n  }, [selectedPathogen, indexes, userBehavior, userPreferences, behaviorAnalysis]);\n\n  // Generate learning path recommendations\n  const generateLearningPath = useCallback(() => {\n    if (!selectedPathogen || !indexes) {\n      setLearningPath([]);\n      return;\n    }\n\n    const network = buildPathogenNetwork(indexes);\n    const startingNode = network.nodes.find(n => n.id === selectedPathogen.name);\n    \n    if (!startingNode) {\n      setLearningPath([]);\n      return;\n    }\n\n    let path = [selectedPathogen];\n    let currentPathogen = selectedPathogen;\n    const visited = new Set([selectedPathogen.name]);\n\n    // Build a learning path based on user preferences\n    for (let step = 0; step < 5; step++) {\n      const candidates = network.edges\n        .filter(e => \n          (e.source === currentPathogen.name || e.target === currentPathogen.name) &&\n          !visited.has(e.source === currentPathogen.name ? e.target : e.source)\n        )\n        .map(e => {\n          const targetName = e.source === currentPathogen.name ? e.target : e.source;\n          const targetPathogen = indexes.pathogens.find(p => p.name === targetName);\n          return {\n            pathogen: targetPathogen,\n            similarity: e.similarity,\n            weight: e.weight\n          };\n        })\n        .filter(c => c.pathogen);\n\n      if (candidates.length === 0) break;\n\n      // Score candidates based on learning objectives\n      const scoredCandidates = candidates.map(candidate => {\n        let score = candidate.weight;\n\n        // Progressive difficulty\n        if (userPreferences.difficultyLevel === 'adaptive') {\n          const currentComplexity = currentPathogen.conditions.length;\n          const candidateComplexity = candidate.pathogen.conditions.length;\n          const complexityDiff = candidateComplexity - currentComplexity;\n          \n          // Prefer gradual increase in complexity\n          if (complexityDiff >= 0 && complexityDiff <= 2) {\n            score *= 1.3;\n          }\n        }\n\n        // Category diversity vs focus\n        if (userPreferences.systematicLearning) {\n          // Prefer same categories for systematic learning\n          const currentCategories = new Set(currentPathogen.conditions.map(condId => \n            indexes.conditions.find(c => c.id === condId)?.category\n          ).filter(Boolean));\n          \n          const candidateCategories = new Set(candidate.pathogen.conditions.map(condId =>\n            indexes.conditions.find(c => c.id === condId)?.category\n          ).filter(Boolean));\n          \n          const overlap = Array.from(currentCategories).filter(cat => candidateCategories.has(cat)).length;\n          score *= (1 + overlap * 0.2);\n        }\n\n        return { ...candidate, learningScore: score };\n      });\n\n      // Select best candidate\n      scoredCandidates.sort((a, b) => b.learningScore - a.learningScore);\n      const nextPathogen = scoredCandidates[0].pathogen;\n      \n      path.push(nextPathogen);\n      visited.add(nextPathogen.name);\n      currentPathogen = nextPathogen;\n    }\n\n    setLearningPath(path);\n  }, [selectedPathogen, indexes, userPreferences]);\n\n  // Update recommendations when dependencies change\n  useEffect(() => {\n    calculateRecommendations();\n    generateLearningPath();\n  }, [calculateRecommendations, generateLearningPath]);\n\n  // Track user interactions for learning\n  const recordInteraction = useCallback((pathogen, interactionType, timeSpent = 0) => {\n    setSessionStats(prev => {\n      const newStats = { ...prev };\n      newStats.totalViewed += 1;\n      \n      if (timeSpent > 0) {\n        newStats.averageTimePerPathogen = \n          (newStats.averageTimePerPathogen * (newStats.totalViewed - 1) + timeSpent) / newStats.totalViewed;\n      }\n\n      // Update category preferences\n      if (pathogen.conditions) {\n        pathogen.conditions.forEach(conditionId => {\n          const condition = indexes?.conditions.find(c => c.id === conditionId);\n          if (condition) {\n            const currentCount = newStats.preferredCategories.get(condition.category) || 0;\n            newStats.preferredCategories.set(condition.category, currentCount + 1);\n          }\n        });\n      }\n\n      // Update gram status preferences\n      if (pathogen.gramStatus) {\n        const currentCount = newStats.gramStatusFocus.get(pathogen.gramStatus) || 0;\n        newStats.gramStatusFocus.set(pathogen.gramStatus, currentCount + 1);\n      }\n\n      return newStats;\n    });\n  }, [indexes]);\n\n  // Get recommendation categories\n  const getRecommendationsByCategory = useMemo(() => {\n    const categorized = {\n      'Similar': recommendations.filter(r => r.reasoning.includes('similarity')),\n      'Your Interests': recommendations.filter(r => r.userRelevance?.categoryMatch),\n      'Next Level': recommendations.filter(r => r.pathogenComplexity > (selectedPathogen?.conditions?.length || 0)),\n      'Recently Popular': recommendations.filter(r => r.reasoning.includes('popular')),\n      'Discover': recommendations.filter(r => !r.userRelevance?.categoryMatch && !r.reasoning.includes('similarity'))\n    };\n\n    // Filter out empty categories\n    return Object.fromEntries(\n      Object.entries(categorized).filter(([, recs]) => recs.length > 0)\n    );\n  }, [recommendations, selectedPathogen]);\n\n  return {\n    recommendations,\n    learningPath,\n    userPreferences,\n    setUserPreferences,\n    sessionStats,\n    behaviorAnalysis,\n    recordInteraction,\n    getRecommendationsByCategory,\n    \n    // Actions\n    refreshRecommendations: calculateRecommendations,\n    regenerateLearningPath: generateLearningPath\n  };\n};\n\nexport default usePathogenRecommendations;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}