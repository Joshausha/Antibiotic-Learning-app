{"ast":null,"code":"/**\n * usePathogenRecommendations Hook (Refactored)\n * Simplified recommendation engine focusing on core functionality\n * Uses extracted utilities and separate hooks for better maintainability\n */import{useState,useEffect,useMemo,useCallback}from'react';import{analyzeBehaviorPatterns,calculatePathogenRecommendations,generateLearningPath,categorizeRecommendations}from'../utils/recommendationEngine';import useUserSession from'./useUserSession';const usePathogenRecommendations=function(indexes,selectedPathogen){let userBehavior=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const[recommendations,setRecommendations]=useState([]);const[learningPath,setLearningPath]=useState([]);// Use separate session management hook\nconst{sessionStats,userPreferences,recordInteraction,resetSession,updatePreferences,setUserPreferences}=useUserSession(indexes);// Analyze user behavior patterns (memoized for performance)\nconst behaviorAnalysis=useMemo(()=>{return analyzeBehaviorPatterns(userBehavior);},[userBehavior]);// Calculate recommendations when dependencies change\nconst calculateRecommendations=useCallback(()=>{if(!indexes||!selectedPathogen){setRecommendations([]);return;}const newRecommendations=calculatePathogenRecommendations(indexes,selectedPathogen,behaviorAnalysis,userPreferences);setRecommendations(newRecommendations);},[indexes,selectedPathogen,behaviorAnalysis,userPreferences]);// Generate learning path when dependencies change\nconst regenerateLearningPath=useCallback(()=>{if(!indexes){setLearningPath([]);return;}const newLearningPath=generateLearningPath(indexes,userPreferences,behaviorAnalysis);setLearningPath(newLearningPath);},[indexes,userPreferences,behaviorAnalysis]);// Auto-calculate recommendations when selectedPathogen changes\nuseEffect(()=>{calculateRecommendations();},[calculateRecommendations]);// Auto-generate learning path when preferences change\nuseEffect(()=>{regenerateLearningPath();},[regenerateLearningPath]);// Categorize recommendations for UI display\nconst getRecommendationsByCategory=useMemo(()=>{return categorizeRecommendations(recommendations,selectedPathogen);},[recommendations,selectedPathogen]);return{// Core data\nrecommendations,learningPath,userPreferences,sessionStats,behaviorAnalysis,// Actions\nrecordInteraction,setUserPreferences:updatePreferences,refreshRecommendations:calculateRecommendations,regenerateLearningPath,resetSession,// Derived data\ngetRecommendationsByCategory};};export default usePathogenRecommendations;","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","analyzeBehaviorPatterns","calculatePathogenRecommendations","generateLearningPath","categorizeRecommendations","useUserSession","usePathogenRecommendations","indexes","selectedPathogen","userBehavior","arguments","length","undefined","recommendations","setRecommendations","learningPath","setLearningPath","sessionStats","userPreferences","recordInteraction","resetSession","updatePreferences","setUserPreferences","behaviorAnalysis","calculateRecommendations","newRecommendations","regenerateLearningPath","newLearningPath","getRecommendationsByCategory","refreshRecommendations"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/usePathogenRecommendations.js"],"sourcesContent":["/**\n * usePathogenRecommendations Hook (Refactored)\n * Simplified recommendation engine focusing on core functionality\n * Uses extracted utilities and separate hooks for better maintainability\n */\n\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  analyzeBehaviorPatterns, \n  calculatePathogenRecommendations, \n  generateLearningPath,\n  categorizeRecommendations \n} from '../utils/recommendationEngine';\nimport useUserSession from './useUserSession';\n\nconst usePathogenRecommendations = (indexes, selectedPathogen, userBehavior = {}) => {\n  const [recommendations, setRecommendations] = useState([]);\n  const [learningPath, setLearningPath] = useState([]);\n\n  // Use separate session management hook\n  const {\n    sessionStats,\n    userPreferences,\n    recordInteraction,\n    resetSession,\n    updatePreferences,\n    setUserPreferences\n  } = useUserSession(indexes);\n\n  // Analyze user behavior patterns (memoized for performance)\n  const behaviorAnalysis = useMemo(() => {\n    return analyzeBehaviorPatterns(userBehavior);\n  }, [userBehavior]);\n\n  // Calculate recommendations when dependencies change\n  const calculateRecommendations = useCallback(() => {\n    if (!indexes || !selectedPathogen) {\n      setRecommendations([]);\n      return;\n    }\n\n    const newRecommendations = calculatePathogenRecommendations(\n      indexes,\n      selectedPathogen,\n      behaviorAnalysis,\n      userPreferences\n    );\n    \n    setRecommendations(newRecommendations);\n  }, [indexes, selectedPathogen, behaviorAnalysis, userPreferences]);\n\n  // Generate learning path when dependencies change\n  const regenerateLearningPath = useCallback(() => {\n    if (!indexes) {\n      setLearningPath([]);\n      return;\n    }\n\n    const newLearningPath = generateLearningPath(\n      indexes,\n      userPreferences,\n      behaviorAnalysis\n    );\n    \n    setLearningPath(newLearningPath);\n  }, [indexes, userPreferences, behaviorAnalysis]);\n\n  // Auto-calculate recommendations when selectedPathogen changes\n  useEffect(() => {\n    calculateRecommendations();\n  }, [calculateRecommendations]);\n\n  // Auto-generate learning path when preferences change\n  useEffect(() => {\n    regenerateLearningPath();\n  }, [regenerateLearningPath]);\n\n  // Categorize recommendations for UI display\n  const getRecommendationsByCategory = useMemo(() => {\n    return categorizeRecommendations(recommendations, selectedPathogen);\n  }, [recommendations, selectedPathogen]);\n\n  return {\n    // Core data\n    recommendations,\n    learningPath,\n    userPreferences,\n    sessionStats,\n    behaviorAnalysis,\n    \n    // Actions\n    recordInteraction,\n    setUserPreferences: updatePreferences,\n    refreshRecommendations: calculateRecommendations,\n    regenerateLearningPath,\n    resetSession,\n    \n    // Derived data\n    getRecommendationsByCategory\n  };\n};\n\nexport default usePathogenRecommendations;"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAEA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,OAAO,CAAEC,WAAW,KAAQ,OAAO,CACjE,OACEC,uBAAuB,CACvBC,gCAAgC,CAChCC,oBAAoB,CACpBC,yBAAyB,KACpB,+BAA+B,CACtC,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAE7C,KAAM,CAAAC,0BAA0B,CAAG,QAAAA,CAACC,OAAO,CAAEC,gBAAgB,CAAwB,IAAtB,CAAAC,YAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC9E,KAAM,CAACG,eAAe,CAAEC,kBAAkB,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACkB,YAAY,CAAEC,eAAe,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAEpD;AACA,KAAM,CACJoB,YAAY,CACZC,eAAe,CACfC,iBAAiB,CACjBC,YAAY,CACZC,iBAAiB,CACjBC,kBACF,CAAC,CAAGjB,cAAc,CAACE,OAAO,CAAC,CAE3B;AACA,KAAM,CAAAgB,gBAAgB,CAAGxB,OAAO,CAAC,IAAM,CACrC,MAAO,CAAAE,uBAAuB,CAACQ,YAAY,CAAC,CAC9C,CAAC,CAAE,CAACA,YAAY,CAAC,CAAC,CAElB;AACA,KAAM,CAAAe,wBAAwB,CAAGxB,WAAW,CAAC,IAAM,CACjD,GAAI,CAACO,OAAO,EAAI,CAACC,gBAAgB,CAAE,CACjCM,kBAAkB,CAAC,EAAE,CAAC,CACtB,OACF,CAEA,KAAM,CAAAW,kBAAkB,CAAGvB,gCAAgC,CACzDK,OAAO,CACPC,gBAAgB,CAChBe,gBAAgB,CAChBL,eACF,CAAC,CAEDJ,kBAAkB,CAACW,kBAAkB,CAAC,CACxC,CAAC,CAAE,CAAClB,OAAO,CAAEC,gBAAgB,CAAEe,gBAAgB,CAAEL,eAAe,CAAC,CAAC,CAElE;AACA,KAAM,CAAAQ,sBAAsB,CAAG1B,WAAW,CAAC,IAAM,CAC/C,GAAI,CAACO,OAAO,CAAE,CACZS,eAAe,CAAC,EAAE,CAAC,CACnB,OACF,CAEA,KAAM,CAAAW,eAAe,CAAGxB,oBAAoB,CAC1CI,OAAO,CACPW,eAAe,CACfK,gBACF,CAAC,CAEDP,eAAe,CAACW,eAAe,CAAC,CAClC,CAAC,CAAE,CAACpB,OAAO,CAAEW,eAAe,CAAEK,gBAAgB,CAAC,CAAC,CAEhD;AACAzB,SAAS,CAAC,IAAM,CACd0B,wBAAwB,CAAC,CAAC,CAC5B,CAAC,CAAE,CAACA,wBAAwB,CAAC,CAAC,CAE9B;AACA1B,SAAS,CAAC,IAAM,CACd4B,sBAAsB,CAAC,CAAC,CAC1B,CAAC,CAAE,CAACA,sBAAsB,CAAC,CAAC,CAE5B;AACA,KAAM,CAAAE,4BAA4B,CAAG7B,OAAO,CAAC,IAAM,CACjD,MAAO,CAAAK,yBAAyB,CAACS,eAAe,CAAEL,gBAAgB,CAAC,CACrE,CAAC,CAAE,CAACK,eAAe,CAAEL,gBAAgB,CAAC,CAAC,CAEvC,MAAO,CACL;AACAK,eAAe,CACfE,YAAY,CACZG,eAAe,CACfD,YAAY,CACZM,gBAAgB,CAEhB;AACAJ,iBAAiB,CACjBG,kBAAkB,CAAED,iBAAiB,CACrCQ,sBAAsB,CAAEL,wBAAwB,CAChDE,sBAAsB,CACtBN,YAAY,CAEZ;AACAQ,4BACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAtB,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}