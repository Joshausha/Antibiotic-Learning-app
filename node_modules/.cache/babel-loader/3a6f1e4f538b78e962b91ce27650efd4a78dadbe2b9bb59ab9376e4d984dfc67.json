{"ast":null,"code":"/**\n * Advanced Data Parser\n * Extracts and normalizes pathogen and antibiotic information from medical conditions data\n * Handles complex text patterns and creates standardized lists for multi-dimensional exploration\n */\n\n/**\n * Extract and normalize pathogen names from commonPathogens arrays\n * @param {string} pathogenText - Raw pathogen text from data\n * @returns {Object} - Normalized pathogen info with metadata\n */\nexport const parsePathogen = pathogenText => {\n  if (!pathogenText || typeof pathogenText !== 'string') {\n    return null;\n  }\n\n  // Clean up the text\n  let cleanText = pathogenText.trim();\n\n  // Remove citation markers and references\n  cleanText = cleanText.replace(/\\[cite.*?\\]/g, '');\n  cleanText = cleanText.replace(/\\(cite.*?\\)/g, '');\n\n  // Skip entries that are clearly not pathogens (references, notes, etc.)\n  const nonPathogenPatterns = [/^RCTs for/i, /^Observational studies/i, /et al/i, /^Studies/i, /^Research/i];\n  if (nonPathogenPatterns.some(pattern => pattern.test(cleanText))) {\n    return null;\n  }\n\n  // Extract the main pathogen name\n  let mainName = cleanText;\n  let details = '';\n  let gramStatus = 'unknown';\n  let pathogenType = 'bacteria';\n  let spectrumCategory = 'typical'; // New: typical, atypical, mixed\n\n  // Handle parenthetical information\n  const parenthesesMatch = cleanText.match(/^([^(]+)\\s*\\(([^)]+)\\)/);\n  if (parenthesesMatch) {\n    mainName = parenthesesMatch[1].trim();\n    details = parenthesesMatch[2].trim();\n  }\n\n  // Determine gram status based on pathogen name\n  const gramPositivePatterns = [/staphylococcus/i, /streptococcus/i, /enterococcus/i, /clostridium/i, /corynebacterium/i, /bacillus/i, /listeria/i];\n  const gramNegativePatterns = [/escherichia/i, /klebsiella/i, /pseudomonas/i, /enterobacter/i, /proteus/i, /citrobacter/i, /haemophilus/i, /moraxella/i, /neisseria/i, /enterobacterales/i, /salmonella/i, /shigella/i, /acinetobacter/i, /stenotrophomonas/i];\n\n  // Enhanced atypical organism patterns\n  const atypicalPatterns = [/mycoplasma/i, /chlamydia/i, /legionella/i, /rickettsia/i, /coxiella/i, /ehrlichia/i, /anaplasma/i, /bartonella/i, /francisella/i, /brucella/i];\n\n  // Determine spectrum category and gram status\n  if (atypicalPatterns.some(pattern => pattern.test(mainName))) {\n    spectrumCategory = 'atypical';\n    gramStatus = 'atypical'; // Special category for atypical organisms\n  } else if (gramPositivePatterns.some(pattern => pattern.test(mainName))) {\n    gramStatus = 'positive';\n    spectrumCategory = 'typical';\n  } else if (gramNegativePatterns.some(pattern => pattern.test(mainName))) {\n    gramStatus = 'negative';\n    spectrumCategory = 'typical';\n  }\n\n  // Determine pathogen type with enhanced categories\n  if (/virus/i.test(cleanText) || /viral/i.test(cleanText) || /HSV/i.test(cleanText)) {\n    pathogenType = 'virus';\n    spectrumCategory = 'atypical';\n  } else if (/fungal/i.test(cleanText) || /candida/i.test(cleanText) || /aspergillus/i.test(cleanText)) {\n    pathogenType = 'fungus';\n    spectrumCategory = 'atypical';\n  } else if (/mycobacteri/i.test(cleanText)) {\n    pathogenType = 'mycobacteria';\n    spectrumCategory = 'atypical';\n    gramStatus = 'acid-fast'; // Special classification for mycobacteria\n  } else if (atypicalPatterns.some(pattern => pattern.test(mainName))) {\n    pathogenType = 'atypical bacteria';\n  }\n\n  // Standardize common abbreviations\n  const abbreviationMap = {\n    'S aureus': 'Staphylococcus aureus',\n    'S pyogenes': 'Streptococcus pyogenes',\n    'S pneumoniae': 'Streptococcus pneumoniae',\n    'E coli': 'Escherichia coli',\n    'E faecalis': 'Enterococcus faecalis',\n    'E faecium': 'Enterococcus faecium',\n    'H influenzae': 'Haemophilus influenzae',\n    'P aeruginosa': 'Pseudomonas aeruginosa',\n    'K kingae': 'Kingella kingae',\n    'K pneumoniae': 'Klebsiella pneumoniae',\n    'M catarrhalis': 'Moraxella catarrhalis',\n    'N meningitidis': 'Neisseria meningitidis',\n    'M pneumoniae': 'Mycoplasma pneumoniae',\n    'C pneumoniae': 'Chlamydia pneumoniae',\n    'L pneumophila': 'Legionella pneumophila',\n    'GBS': 'Group B Streptococcus',\n    'HSV': 'Herpes Simplex Virus'\n  };\n  const standardizedName = abbreviationMap[mainName] || mainName;\n  return {\n    originalText: pathogenText,\n    name: standardizedName,\n    shortName: mainName,\n    details: details,\n    gramStatus: gramStatus,\n    type: pathogenType,\n    spectrumCategory: spectrumCategory,\n    // New field for visualization grouping\n    isValid: true\n  };\n};\n;\n\n/**\n * Extract antibiotic names from therapy strings\n * @param {string} therapyText - Raw therapy text from empiricTherapy\n * @returns {Array} - Array of antibiotic objects with metadata\n */\nexport const parseAntibiotics = therapyText => {\n  if (!therapyText || typeof therapyText !== 'string') {\n    return [];\n  }\n  let cleanText = therapyText.trim();\n\n  // Remove non-drug instructions and context\n  const instructionPatterns = [/Consider surgical drainage[^.]*\\./i, /Drainage[^.]*\\./i, /Choice depends on[^.]*\\./i, /These are empiric[^.]*\\./i, /if.*available\\)/i, /some experts[^)]*\\)/i];\n  instructionPatterns.forEach(pattern => {\n    cleanText = cleanText.replace(pattern, '');\n  });\n\n  // Handle empty or non-specific guidance\n  if (!cleanText.trim() || /choice depends/i.test(cleanText) || /guided by culture/i.test(cleanText)) {\n    return [];\n  }\n  const antibiotics = [];\n\n  // Split on combinations and alternatives\n  const segments = cleanText.split(/\\s+(?:PLUS|plus|\\+|OR|or)\\s+/i);\n  segments.forEach(segment => {\n    const antibiotic = parseAntibiotic(segment.trim());\n    if (antibiotic) {\n      antibiotics.push(antibiotic);\n    }\n  });\n  return antibiotics;\n};\n\n/**\n * Parse individual antibiotic from text segment\n * @param {string} text - Text segment containing antibiotic name\n * @returns {Object|null} - Antibiotic object or null if invalid\n */\nconst parseAntibiotic = text => {\n  if (!text || text.length < 2) return null;\n\n  // Remove parenthetical information\n  let cleanName = text.replace(/\\([^)]*\\)/g, '').trim();\n\n  // Remove dosing information and routes\n  cleanName = cleanName.replace(/\\d+\\s*(mg|g|units|mcg).*$/i, '');\n  cleanName = cleanName.replace(/\\b(IV|PO|IM|oral|intravenous|intramuscular)\\b/gi, '');\n\n  // Skip if it's not actually a drug name\n  const nonDrugPatterns = [/^if\\b/i, /^for\\b/i, /^consider\\b/i, /^add\\b/i, /days?$/i, /weeks?$/i, /\\d+\\s*days?/i, /allergyb?:?/i, /standard/i, /treatment/i];\n  if (nonDrugPatterns.some(pattern => pattern.test(cleanName))) {\n    return null;\n  }\n\n  // Standardize drug names\n  const drugMap = {\n    'Ampicillin-sulbactam': 'Ampicillin/sulbactam',\n    'Ampicillin- sulbactam': 'Ampicillin/sulbactam',\n    'Amoxicillin-clavulanate': 'Amoxicillin/clavulanate',\n    'Amoxicillin- clavulanate': 'Amoxicillin/clavulanate',\n    'Piperacillin-tazobactam': 'Piperacillin/tazobactam',\n    'Piperacillin- tazobactam': 'Piperacillin/tazobactam',\n    'TMP-SMX': 'Trimethoprim/sulfamethoxazole',\n    'TMP/SMX': 'Trimethoprim/sulfamethoxazole'\n  };\n  const standardizedName = drugMap[cleanName] || cleanName;\n\n  // Determine drug class\n  const drugClass = getDrugClass(standardizedName);\n  return {\n    originalText: text,\n    name: standardizedName,\n    class: drugClass,\n    isValid: true\n  };\n};\n\n/**\n * Determine drug class based on antibiotic name\n * @param {string} drugName - Standardized drug name\n * @returns {string} - Drug class\n */\nconst getDrugClass = drugName => {\n  const drugClasses = {\n    'Penicillins': ['Penicillin', 'Ampicillin', 'Amoxicillin', 'Oxacillin', 'Nafcillin', 'Ampicillin/sulbactam', 'Amoxicillin/clavulanate', 'Piperacillin/tazobactam'],\n    'Cephalosporins': ['Cefazolin', 'Cephalexin', 'Ceftriaxone', 'Cefotaxime', 'Ceftazidime', 'Cefepime', 'Cefdinir', 'Cefpodoxime', 'Cefuroxime', 'Ceftaroline'],\n    'Glycopeptides': ['Vancomycin'],\n    'Lincosamides': ['Clindamycin'],\n    'Oxazolidinones': ['Linezolid'],\n    'Lipopeptides': ['Daptomycin'],\n    'Macrolides': ['Azithromycin', 'Erythromycin'],\n    'Aminoglycosides': ['Gentamicin', 'Amikacin', 'Tobramycin'],\n    'Fluoroquinolones': ['Ciprofloxacin', 'Levofloxacin'],\n    'Tetracyclines': ['Doxycycline'],\n    'Folate Antagonists': ['Trimethoprim/sulfamethoxazole'],\n    'Nitroimidazoles': ['Metronidazole'],\n    'Nitrofurans': ['Nitrofurantoin'],\n    'Antivirals': ['Acyclovir']\n  };\n  for (const [className, drugs] of Object.entries(drugClasses)) {\n    if (drugs.some(drug => drugName.includes(drug) || drug.includes(drugName))) {\n      return className;\n    }\n  }\n  return 'Other';\n};\n\n// Enhanced antibiotic spectrum database with coverage scoring and visualization data\nexport const antibioticSpectrumData = {\n  // Penicillins\n  'Penicillin': {\n    class: 'Penicillins',\n    subclass: 'Natural Penicillins',\n    spectrum: {\n      gramPositive: 9,\n      // Score 0-10\n      gramNegative: 2,\n      atypical: 1,\n      anaerobes: 7\n    },\n    coverage: {\n      typical: ['Streptococcus pyogenes', 'Streptococcus pneumoniae', 'Enterococcus faecalis'],\n      limited: ['Staphylococcus aureus (MSSA only)'],\n      resistant: ['MRSA', 'Most gram-negatives', 'Atypicals']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production', 'PBP mutations'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: {\n        angle: 0,\n        radius: 0.8\n      }\n    }\n  },\n  'Ampicillin': {\n    class: 'Penicillins',\n    subclass: 'Aminopenicillins',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 5,\n      atypical: 1,\n      anaerobes: 6\n    },\n    coverage: {\n      typical: ['Enterococcus species', 'Listeria monocytogenes', 'Some E. coli'],\n      limited: ['Streptococcus species', 'Haemophilus influenzae (if sensitive)'],\n      resistant: ['MRSA', 'Most Enterobacterales', 'Pseudomonas']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: {\n        angle: 30,\n        radius: 0.8\n      }\n    }\n  },\n  'Amoxicillin': {\n    class: 'Penicillins',\n    subclass: 'Aminopenicillins',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 5,\n      atypical: 1,\n      anaerobes: 6\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Enterococcus faecalis', 'Some E. coli'],\n      limited: ['Haemophilus influenzae', 'Moraxella catarrhalis'],\n      resistant: ['MRSA', 'Beta-lactamase producing organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: {\n        angle: 45,\n        radius: 0.8\n      }\n    }\n  },\n  'Amoxicillin/clavulanate': {\n    class: 'Penicillins',\n    subclass: 'Beta-lactamase inhibitor combinations',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 7,\n      atypical: 1,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'H. influenzae', 'M. catarrhalis', 'E. coli'],\n      limited: ['Some Klebsiella species', 'Anaerobes'],\n      resistant: ['MRSA', 'Pseudomonas', 'ESBL producers']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition + beta-lactamase inhibition',\n    resistance: ['ESBL production', 'AmpC beta-lactamases'],\n    visualProperties: {\n      color: '#1e40af',\n      position: {\n        angle: 60,\n        radius: 0.9\n      }\n    }\n  },\n  'Piperacillin/tazobactam': {\n    class: 'Penicillins',\n    subclass: 'Antipseudomonal penicillins',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 9,\n      atypical: 1,\n      anaerobes: 9\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'MSSA', 'Streptococcus species'],\n      limited: ['Some ESBL producers', 'Anaerobes'],\n      resistant: ['MRSA', 'Enterococcus faecium', 'Carbapenem-resistant organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition + beta-lactamase inhibition',\n    resistance: ['Carbapenemases', 'AmpC hyperproduction'],\n    visualProperties: {\n      color: '#1e40af',\n      position: {\n        angle: 75,\n        radius: 1.0\n      }\n    }\n  },\n  // Cephalosporins\n  'Cefazolin': {\n    class: 'Cephalosporins',\n    subclass: '1st Generation',\n    spectrum: {\n      gramPositive: 9,\n      gramNegative: 4,\n      atypical: 0,\n      anaerobes: 2\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'Some E. coli', 'Proteus mirabilis'],\n      limited: ['Klebsiella pneumoniae'],\n      resistant: ['MRSA', 'Enterococcus', 'Pseudomonas', 'Anaerobes']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production', 'PBP mutations'],\n    visualProperties: {\n      color: '#10b981',\n      position: {\n        angle: 90,\n        radius: 0.8\n      }\n    }\n  },\n  'Ceftriaxone': {\n    class: 'Cephalosporins',\n    subclass: '3rd Generation',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 8,\n      atypical: 0,\n      anaerobes: 1\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Most Enterobacterales', 'H. influenzae', 'N. meningitidis'],\n      limited: ['Some MSSA', 'Moraxella catarrhalis'],\n      resistant: ['MRSA', 'Enterococcus', 'Pseudomonas', 'ESBL producers']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['ESBL production', 'AmpC beta-lactamases'],\n    visualProperties: {\n      color: '#059669',\n      position: {\n        angle: 120,\n        radius: 0.9\n      }\n    }\n  },\n  'Cefepime': {\n    class: 'Cephalosporins',\n    subclass: '4th Generation',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 9,\n      atypical: 0,\n      anaerobes: 1\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'Streptococcus pneumoniae'],\n      limited: ['Some ESBL producers', 'MSSA'],\n      resistant: ['MRSA', 'Enterococcus', 'Carbapenem-resistant organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Carbapenemases', 'AmpC hyperproduction'],\n    visualProperties: {\n      color: '#047857',\n      position: {\n        angle: 135,\n        radius: 1.0\n      }\n    }\n  },\n  // Glycopeptides\n  'Vancomycin': {\n    class: 'Glycopeptides',\n    subclass: 'Glycopeptides',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 0,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MRSA', 'MSSA', 'Enterococcus faecalis', 'CoNS', 'C. difficile (oral)'],\n      limited: ['Streptococcus species'],\n      resistant: ['Gram-negatives', 'VRE', 'Some atypicals']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition (different target than beta-lactams)',\n    resistance: ['van gene cluster', 'Thick cell wall (hetero-resistance)'],\n    visualProperties: {\n      color: '#7c3aed',\n      position: {\n        angle: 150,\n        radius: 0.9\n      }\n    }\n  },\n  // Lincosamides\n  'Clindamycin': {\n    class: 'Lincosamides',\n    subclass: 'Lincosamides',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 1,\n      atypical: 2,\n      anaerobes: 9\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'Anaerobes (most)'],\n      limited: ['Some MRSA (if D-test negative)', 'Some atypicals'],\n      resistant: ['Gram-negatives', 'Enterococcus', 'C. difficile']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit)',\n    resistance: ['erm genes (inducible)', 'lincosamide resistance'],\n    visualProperties: {\n      color: '#dc2626',\n      position: {\n        angle: 180,\n        radius: 0.8\n      }\n    }\n  },\n  // Macrolides\n  'Azithromycin': {\n    class: 'Macrolides',\n    subclass: 'Azalides',\n    spectrum: {\n      gramPositive: 6,\n      gramNegative: 3,\n      atypical: 9,\n      anaerobes: 4\n    },\n    coverage: {\n      typical: ['Streptococcus pyogenes', 'Some Streptococcus pneumoniae', 'H. influenzae'],\n      atypical: ['Mycoplasma pneumoniae', 'Chlamydia species', 'Legionella pneumophila'],\n      resistant: ['MRSA', 'Most Enterobacterales', 'Pseudomonas']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit)',\n    resistance: ['erm genes', 'efflux pumps'],\n    visualProperties: {\n      color: '#f59e0b',\n      position: {\n        angle: 210,\n        radius: 0.8\n      }\n    }\n  },\n  // Fluoroquinolones\n  'Ciprofloxacin': {\n    class: 'Fluoroquinolones',\n    subclass: 'Fluoroquinolones',\n    spectrum: {\n      gramPositive: 5,\n      gramNegative: 9,\n      atypical: 7,\n      anaerobes: 2\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'Some Streptococcus species'],\n      atypical: ['Some Mycoplasma', 'Some Chlamydia'],\n      resistant: ['MRSA', 'Streptococcus pneumoniae', 'Anaerobes']\n    },\n    mechanismOfAction: 'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',\n    resistance: ['gyr/par mutations', 'efflux pumps', 'qnr genes'],\n    visualProperties: {\n      color: '#8b5cf6',\n      position: {\n        angle: 240,\n        radius: 0.9\n      }\n    }\n  },\n  'Levofloxacin': {\n    class: 'Fluoroquinolones',\n    subclass: 'Respiratory Fluoroquinolones',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 8,\n      atypical: 8,\n      anaerobes: 3\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Most Enterobacterales', 'Some Pseudomonas'],\n      atypical: ['Mycoplasma pneumoniae', 'Chlamydia species', 'Legionella pneumophila'],\n      resistant: ['MRSA (variable)', 'Anaerobes']\n    },\n    mechanismOfAction: 'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',\n    resistance: ['gyr/par mutations', 'efflux pumps'],\n    visualProperties: {\n      color: '#7c3aed',\n      position: {\n        angle: 255,\n        radius: 0.9\n      }\n    }\n  },\n  // Aminoglycosides\n  'Gentamicin': {\n    class: 'Aminoglycosides',\n    subclass: 'Aminoglycosides',\n    spectrum: {\n      gramPositive: 6,\n      gramNegative: 8,\n      atypical: 0,\n      anaerobes: 0\n    },\n    coverage: {\n      typical: ['Most Enterobacterales', 'Pseudomonas aeruginosa', 'Staphylococcus species (synergy)'],\n      limited: ['Enterococcus (synergy only)'],\n      resistant: ['Streptococcus', 'Anaerobes', 'Atypicals']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (30S ribosomal subunit)',\n    resistance: ['Aminoglycoside-modifying enzymes', '16S rRNA methylases'],\n    visualProperties: {\n      color: '#ef4444',\n      position: {\n        angle: 270,\n        radius: 0.7\n      }\n    }\n  },\n  // Oxazolidinones\n  'Linezolid': {\n    class: 'Oxazolidinones',\n    subclass: 'Oxazolidinones',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 2,\n      anaerobes: 7\n    },\n    coverage: {\n      typical: ['MRSA', 'VRE', 'All Streptococcus species', 'CoNS'],\n      limited: ['Some anaerobes'],\n      resistant: ['Gram-negatives', 'Most atypicals']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit, unique binding site)',\n    resistance: ['cfr gene', '23S rRNA mutations'],\n    visualProperties: {\n      color: '#be185d',\n      position: {\n        angle: 300,\n        radius: 0.8\n      }\n    }\n  },\n  // Lipopeptides\n  'Daptomycin': {\n    class: 'Lipopeptides',\n    subclass: 'Lipopeptides',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 0,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MRSA', 'VRE', 'All Staphylococcus species', 'Most Streptococcus species'],\n      limited: ['Enterococcus species'],\n      resistant: ['Gram-negatives', 'Atypicals', 'Pneumonia (inactivated by surfactant)']\n    },\n    mechanismOfAction: 'Cell membrane depolarization',\n    resistance: ['Cell membrane changes', 'mprF mutations'],\n    visualProperties: {\n      color: '#991b1b',\n      position: {\n        angle: 330,\n        radius: 0.8\n      }\n    }\n  }\n};\n\n// Spectrum scoring utilities\nexport const calculateSpectrumScore = (antibiotic, pathogenCategory) => {\n  const data = antibioticSpectrumData[antibiotic];\n  if (!data) return 0;\n  switch (pathogenCategory) {\n    case 'positive':\n      return data.spectrum.gramPositive;\n    case 'negative':\n      return data.spectrum.gramNegative;\n    case 'atypical':\n      return data.spectrum.atypical;\n    case 'anaerobes':\n      return data.spectrum.anaerobes;\n    default:\n      return 0;\n  }\n};\nexport const getAntibioticsBySpectrum = (pathogenCategory, minScore = 5) => {\n  return Object.entries(antibioticSpectrumData).filter(([name, data]) => calculateSpectrumScore(name, pathogenCategory) >= minScore).map(([name, data]) => ({\n    name,\n    score: calculateSpectrumScore(name, pathogenCategory),\n    class: data.class,\n    ...data\n  })).sort((a, b) => b.score - a.score);\n};\nexport const getSpectrumOverlap = (antibiotic1, antibiotic2) => {\n  const data1 = antibioticSpectrumData[antibiotic1];\n  const data2 = antibioticSpectrumData[antibiotic2];\n  if (!data1 || !data2) return 0;\n  const categories = ['gramPositive', 'gramNegative', 'atypical', 'anaerobes'];\n  let totalOverlap = 0;\n  categories.forEach(category => {\n    const min = Math.min(data1.spectrum[category], data2.spectrum[category]);\n    const max = Math.max(data1.spectrum[category], data2.spectrum[category]);\n    totalOverlap += max > 0 ? min / max : 0;\n  });\n  return totalOverlap / categories.length;\n};\n\n// Drug class color mapping for visualizations\nexport const drugClassColors = {\n  'Penicillins': '#3b82f6',\n  'Cephalosporins': '#10b981',\n  'Glycopeptides': '#7c3aed',\n  'Lincosamides': '#dc2626',\n  'Macrolides': '#f59e0b',\n  'Fluoroquinolones': '#8b5cf6',\n  'Aminoglycosides': '#ef4444',\n  'Oxazolidinones': '#be185d',\n  'Lipopeptides': '#991b1b',\n  'Tetracyclines': '#059669',\n  'Folate Antagonists': '#0d9488',\n  'Nitroimidazoles': '#7c2d12',\n  'Nitrofurans': '#a21caf',\n  'Antivirals': '#1e40af'\n};\n// Neo4j Graph Database Schema and Data Transformation Utilities\n\n// Neo4j Schema Design\nexport const neo4jSchema = {\n  nodeTypes: {\n    PATHOGEN: {\n      properties: ['id', 'name', 'gramStatus', 'type', 'spectrumCategory'],\n      indexes: ['name', 'gramStatus', 'type']\n    },\n    ANTIBIOTIC: {\n      properties: ['id', 'name', 'class', 'subclass', 'mechanismOfAction'],\n      indexes: ['name', 'class']\n    },\n    CONDITION: {\n      properties: ['id', 'name', 'category', 'severity'],\n      indexes: ['name', 'category']\n    },\n    DRUG_CLASS: {\n      properties: ['id', 'name', 'mechanism', 'spectrumType'],\n      indexes: ['name']\n    }\n  },\n  relationshipTypes: {\n    TREATS: {\n      from: 'ANTIBIOTIC',\n      to: 'PATHOGEN',\n      properties: ['effectiveness', 'resistance_risk', 'clinical_evidence']\n    },\n    CAUSES: {\n      from: 'PATHOGEN',\n      to: 'CONDITION',\n      properties: ['frequency', 'severity', 'typical_presentation']\n    },\n    BELONGS_TO: {\n      from: 'ANTIBIOTIC',\n      to: 'DRUG_CLASS',\n      properties: []\n    },\n    SYNERGISTIC_WITH: {\n      from: 'ANTIBIOTIC',\n      to: 'ANTIBIOTIC',\n      properties: ['synergy_score', 'mechanism']\n    },\n    RESISTANT_TO: {\n      from: 'PATHOGEN',\n      to: 'ANTIBIOTIC',\n      properties: ['resistance_mechanism', 'prevalence']\n    },\n    ALTERNATIVE_TO: {\n      from: 'ANTIBIOTIC',\n      to: 'ANTIBIOTIC',\n      properties: ['similarity_score', 'clinical_context']\n    }\n  }\n};\n\n// Transform medical conditions data to Neo4j format\nexport const transformToNeo4jFormat = medicalConditions => {\n  const nodes = [];\n  const relationships = [];\n\n  // Track unique entities\n  const pathogenSet = new Set();\n  const antibioticSet = new Set();\n  const conditionSet = new Set();\n  const drugClassSet = new Set();\n  medicalConditions.forEach(condition => {\n    // Create condition node\n    const conditionNode = {\n      type: 'CONDITION',\n      id: condition.id,\n      properties: {\n        name: condition.name,\n        category: condition.category,\n        description: condition.description,\n        severity: condition.severity || 'unknown'\n      }\n    };\n    if (!conditionSet.has(condition.id)) {\n      nodes.push(conditionNode);\n      conditionSet.add(condition.id);\n    }\n\n    // Process pathogens\n    if (condition.commonPathogens) {\n      condition.commonPathogens.forEach(pathogenText => {\n        const pathogen = parsePathogen(pathogenText);\n        if (pathogen && pathogen.isValid) {\n          const pathogenId = pathogen.name.toLowerCase().replace(/\\s+/g, '_');\n\n          // Create pathogen node\n          if (!pathogenSet.has(pathogenId)) {\n            const pathogenNode = {\n              type: 'PATHOGEN',\n              id: pathogenId,\n              properties: {\n                name: pathogen.name,\n                gramStatus: pathogen.gramStatus,\n                type: pathogen.type,\n                spectrumCategory: pathogen.spectrumCategory\n              }\n            };\n            nodes.push(pathogenNode);\n            pathogenSet.add(pathogenId);\n          }\n\n          // Create CAUSES relationship\n          relationships.push({\n            type: 'CAUSES',\n            from: {\n              type: 'PATHOGEN',\n              id: pathogenId\n            },\n            to: {\n              type: 'CONDITION',\n              id: condition.id\n            },\n            properties: {\n              frequency: 'common',\n              // Would be derived from clinical data\n              severity: condition.severity || 'moderate'\n            }\n          });\n        }\n      });\n    }\n\n    // Process empiric therapy antibiotics\n    if (condition.empiricTherapy) {\n      Object.entries(condition.empiricTherapy).forEach(([context, therapy]) => {\n        const antibiotics = parseAntibiotics(therapy);\n        antibiotics.forEach(antibiotic => {\n          if (antibiotic && antibiotic.isValid) {\n            const antibioticId = antibiotic.name.toLowerCase().replace(/\\s+/g, '_').replace(/\\//g, '_');\n\n            // Create antibiotic node\n            if (!antibioticSet.has(antibioticId)) {\n              var _antibioticSpectrumDa;\n              const antibioticNode = {\n                type: 'ANTIBIOTIC',\n                id: antibioticId,\n                properties: {\n                  name: antibiotic.name,\n                  class: antibiotic.class,\n                  mechanismOfAction: ((_antibioticSpectrumDa = antibioticSpectrumData[antibiotic.name]) === null || _antibioticSpectrumDa === void 0 ? void 0 : _antibioticSpectrumDa.mechanismOfAction) || 'unknown'\n                }\n              };\n              nodes.push(antibioticNode);\n              antibioticSet.add(antibioticId);\n\n              // Create drug class node and relationship\n              const drugClassId = antibiotic.class.toLowerCase().replace(/\\s+/g, '_');\n              if (!drugClassSet.has(drugClassId)) {\n                var _antibioticSpectrumDa2;\n                const drugClassNode = {\n                  type: 'DRUG_CLASS',\n                  id: drugClassId,\n                  properties: {\n                    name: antibiotic.class,\n                    mechanism: ((_antibioticSpectrumDa2 = antibioticSpectrumData[antibiotic.name]) === null || _antibioticSpectrumDa2 === void 0 ? void 0 : _antibioticSpectrumDa2.mechanismOfAction) || 'unknown'\n                  }\n                };\n                nodes.push(drugClassNode);\n                drugClassSet.add(drugClassId);\n              }\n\n              // Create BELONGS_TO relationship\n              relationships.push({\n                type: 'BELONGS_TO',\n                from: {\n                  type: 'ANTIBIOTIC',\n                  id: antibioticId\n                },\n                to: {\n                  type: 'DRUG_CLASS',\n                  id: drugClassId\n                },\n                properties: {}\n              });\n            }\n\n            // Create treatment relationships with pathogens\n            if (condition.commonPathogens) {\n              condition.commonPathogens.forEach(pathogenText => {\n                const pathogen = parsePathogen(pathogenText);\n                if (pathogen && pathogen.isValid) {\n                  const pathogenId = pathogen.name.toLowerCase().replace(/\\s+/g, '_');\n                  const effectiveness = calculateTreatmentEffectiveness(antibiotic, pathogen);\n                  relationships.push({\n                    type: 'TREATS',\n                    from: {\n                      type: 'ANTIBIOTIC',\n                      id: antibioticId\n                    },\n                    to: {\n                      type: 'PATHOGEN',\n                      id: pathogenId\n                    },\n                    properties: {\n                      effectiveness: effectiveness,\n                      clinical_evidence: context,\n                      resistance_risk: calculateResistanceRisk(antibiotic, pathogen)\n                    }\n                  });\n                }\n              });\n            }\n          }\n        });\n      });\n    }\n  });\n\n  // Add synergy relationships\n  const synergies = identifyAntibioticSynergies(Array.from(antibioticSet));\n  relationships.push(...synergies);\n  return {\n    nodes,\n    relationships\n  };\n};\n\n// Calculate treatment effectiveness based on spectrum data\nconst calculateTreatmentEffectiveness = (antibiotic, pathogen) => {\n  const spectrumData = antibioticSpectrumData[antibiotic.name];\n  if (!spectrumData) return 5; // Default moderate effectiveness\n\n  switch (pathogen.gramStatus) {\n    case 'positive':\n      return spectrumData.spectrum.gramPositive;\n    case 'negative':\n      return spectrumData.spectrum.gramNegative;\n    case 'atypical':\n      return spectrumData.spectrum.atypical;\n    default:\n      return 5;\n  }\n};\n\n// Calculate resistance risk\nconst calculateResistanceRisk = (antibiotic, pathogen) => {\n  const spectrumData = antibioticSpectrumData[antibiotic.name];\n  if (!spectrumData || !spectrumData.resistance) return 'moderate';\n\n  // Risk factors based on resistance mechanisms\n  const riskFactors = spectrumData.resistance.length;\n  if (riskFactors <= 1) return 'low';\n  if (riskFactors <= 3) return 'moderate';\n  return 'high';\n};\n\n// Identify potential antibiotic synergies\nconst identifyAntibioticSynergies = antibioticIds => {\n  const synergies = [];\n  const knownSynergies = [{\n    pair: ['ampicillin', 'gentamicin'],\n    mechanism: 'cell_wall_aminoglycoside_synergy',\n    score: 8\n  }, {\n    pair: ['vancomycin', 'gentamicin'],\n    mechanism: 'cell_wall_aminoglycoside_synergy',\n    score: 7\n  }, {\n    pair: ['piperacillin_tazobactam', 'vancomycin'],\n    mechanism: 'broad_spectrum_combination',\n    score: 6\n  }];\n  knownSynergies.forEach(synergy => {\n    const [drug1, drug2] = synergy.pair;\n    if (antibioticIds.includes(drug1) && antibioticIds.includes(drug2)) {\n      synergies.push({\n        type: 'SYNERGISTIC_WITH',\n        from: {\n          type: 'ANTIBIOTIC',\n          id: drug1\n        },\n        to: {\n          type: 'ANTIBIOTIC',\n          id: drug2\n        },\n        properties: {\n          synergy_score: synergy.score,\n          mechanism: synergy.mechanism\n        }\n      });\n    }\n  });\n  return synergies;\n};\n\n// Generate Cypher queries for Neo4j\nexport const generateCypherQueries = neo4jData => {\n  const {\n    nodes,\n    relationships\n  } = neo4jData;\n  const queries = [];\n\n  // Node creation queries\n  const nodeQueries = nodes.reduce((acc, node) => {\n    const nodeType = node.type;\n    if (!acc[nodeType]) acc[nodeType] = [];\n    acc[nodeType].push(node);\n    return acc;\n  }, {});\n  Object.entries(nodeQueries).forEach(([type, nodeList]) => {\n    const batchSize = 100;\n    for (let i = 0; i < nodeList.length; i += batchSize) {\n      const batch = nodeList.slice(i, i + batchSize);\n      const query = `\n        UNWIND $nodes AS node\n        CREATE (n:${type})\n        SET n = node.properties\n        SET n.id = node.id\n      `;\n      queries.push({\n        query,\n        parameters: {\n          nodes: batch\n        }\n      });\n    }\n  });\n\n  // Relationship creation queries\n  const relQueries = relationships.reduce((acc, rel) => {\n    const relType = rel.type;\n    if (!acc[relType]) acc[relType] = [];\n    acc[relType].push(rel);\n    return acc;\n  }, {});\n  Object.entries(relQueries).forEach(([type, relList]) => {\n    const batchSize = 100;\n    for (let i = 0; i < relList.length; i += batchSize) {\n      const batch = relList.slice(i, i + batchSize);\n      const query = `\n        UNWIND $relationships AS rel\n        MATCH (from:${batch[0].from.type} {id: rel.from.id})\n        MATCH (to:${batch[0].to.type} {id: rel.to.id})\n        CREATE (from)-[r:${type}]->(to)\n        SET r = rel.properties\n      `;\n      queries.push({\n        query,\n        parameters: {\n          relationships: batch\n        }\n      });\n    }\n  });\n  return queries;\n};\n\n// Advanced graph analysis queries\nexport const advancedGraphQueries = {\n  // Find shortest antibiotic path between two pathogens\n  findTreatmentPath: (pathogen1, pathogen2) => `\n    MATCH path = shortestPath(\n      (p1:PATHOGEN {name: $pathogen1})-[:TREATS*..4]-(p2:PATHOGEN {name: $pathogen2})\n    )\n    RETURN path, length(path) as pathLength\n  `,\n  // Identify super-bugs (highly connected resistant pathogens)\n  findSuperbugs: () => `\n    MATCH (p:PATHOGEN)-[r:RESISTANT_TO]->(a:ANTIBIOTIC)\n    WITH p, count(r) as resistanceCount\n    WHERE resistanceCount > 3\n    RETURN p.name, resistanceCount\n    ORDER BY resistanceCount DESC\n    LIMIT 10\n  `,\n  // Find antibiotic alternatives based on spectrum similarity\n  findAlternatives: antibiotic => `\n    MATCH (target:ANTIBIOTIC {name: $antibiotic})-[:TREATS]->(p:PATHOGEN)\n    MATCH (alt:ANTIBIOTIC)-[:TREATS]->(p)\n    WHERE alt <> target\n    WITH alt, count(p) as sharedPathogens\n    MATCH (alt)-[:TREATS]->(allP:PATHOGEN)\n    WITH alt, sharedPathogens, count(allP) as totalPathogens\n    RETURN alt.name, sharedPathogens, totalPathogens, \n           toFloat(sharedPathogens)/totalPathogens as similarity\n    ORDER BY similarity DESC\n    LIMIT 5\n  `,\n  // Community detection for drug classes\n  findDrugCommunities: () => `\n    CALL gds.louvain.stream('antibioticGraph')\n    YIELD nodeId, communityId\n    MATCH (a:ANTIBIOTIC)-[:BELONGS_TO]->(dc:DRUG_CLASS)\n    WHERE id(a) = nodeId\n    RETURN dc.name, communityId, collect(a.name) as antibiotics\n  `\n};\n\n// Export utility for generating complete Neo4j dataset\nexport const generateNeo4jDataset = medicalConditions => {\n  const neo4jData = transformToNeo4jFormat(medicalConditions);\n  const cypherQueries = generateCypherQueries(neo4jData);\n  return {\n    schema: neo4jSchema,\n    data: neo4jData,\n    queries: cypherQueries,\n    advancedQueries: advancedGraphQueries,\n    statistics: {\n      nodeCount: neo4jData.nodes.length,\n      relationshipCount: neo4jData.relationships.length,\n      nodeTypes: Object.keys(neo4jSchema.nodeTypes),\n      relationshipTypes: Object.keys(neo4jSchema.relationshipTypes)\n    }\n  };\n};\n/**\n * ANTIBIOTIC LEARNING APP - ADVANCED VISUALIZATION DOCUMENTATION\n * ==============================================================\n * \n * This module provides comprehensive data visualization capabilities for pediatric\n * antibiotic learning, including Venn diagrams, rotating wheels, radar charts,\n * and Neo4j graph database integration.\n * \n * @version 2.0.0\n * @author Claude AI Assistant\n * @date 2024\n */\n\n// =============================================================================\n// PATHOGEN CLASSIFICATION SYSTEM\n// =============================================================================\n\n/**\n * Enhanced pathogen classification supporting typical and atypical organisms\n * \n * Categories:\n * - Gram Positive: Traditional gram-positive bacteria (Staphylococcus, Streptococcus, etc.)\n * - Gram Negative: Traditional gram-negative bacteria (E. coli, Pseudomonas, etc.)\n * - Atypical: Mycoplasma, Chlamydia, Legionella, and other special organisms\n * - Acid-fast: Mycobacteria (special classification)\n * \n * Usage:\n * const pathogen = parsePathogen(\"Mycoplasma pneumoniae\");\n * // Returns: { gramStatus: 'atypical', spectrumCategory: 'atypical', ... }\n */\n\n// =============================================================================\n// ANTIBIOTIC SPECTRUM DATABASE\n// =============================================================================\n\n/**\n * Comprehensive antibiotic spectrum database with 10-point scoring system\n * \n * Scoring System (0-10):\n * - 0-2: Poor coverage\n * - 3-4: Limited coverage  \n * - 5-6: Moderate coverage\n * - 7-8: Good coverage\n * - 9-10: Excellent coverage\n * \n * Spectrum Categories:\n * - gramPositive: Coverage against gram-positive bacteria\n * - gramNegative: Coverage against gram-negative bacteria\n * - atypical: Coverage against atypical organisms\n * - anaerobes: Coverage against anaerobic bacteria\n * \n * Example:\n * const vancomycin = antibioticSpectrumData['Vancomycin'];\n * // Returns: { spectrum: { gramPositive: 10, gramNegative: 0, ... }, ... }\n */\n\n// =============================================================================\n// VISUALIZATION COMPONENTS\n// =============================================================================\n\n/**\n * 1. ANTIBIOTIC SPECTRUM VENN DIAGRAM\n * ===================================\n * \n * Interactive 3-circle Venn diagram showing antibiotic coverage across\n * Gram-positive, Gram-negative, and Atypical pathogen categories.\n * \n * Features:\n * - Clickable regions show antibiotics with specific coverage patterns\n * - Hover tooltips display antibiotic counts and examples\n * - Animated pulse effects for region selection\n * - Real-time coverage analysis\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotic names to highlight\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onSpectrumAnalysis: Callback for region analysis\n * \n * Usage:\n * <AntibioticSpectrumVennDiagram \n *   selectedAntibiotics={['Vancomycin', 'Ciprofloxacin']}\n *   onSpectrumAnalysis={(data) => console.log(data)}\n * />\n */\n\n/**\n * 2. NORTHWESTERN-STYLE ROTATING WHEEL\n * ====================================\n * \n * Rotating antibiotic selection wheel inspired by Northwestern University's\n * antibiotic decision support tools.\n * \n * Structure:\n * - Center: Medical condition selector\n * - Inner ring: Pathogen categories\n * - Outer ring: Drug classes (rotating)\n * - Antibiotic nodes: Individual antibiotics within classes\n * \n * Features:\n * - Manual and automatic rotation\n * - Connection lines showing effectiveness\n * - Drug class filtering and selection\n * - Variable rotation speed control\n * \n * Props:\n * - selectedCondition: Medical condition object\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onDrugClassSelect: Callback for drug class selection\n * \n * Usage:\n * <AntibioticRotatingWheel \n *   selectedCondition={pneumoniaCondition}\n *   onAntibioticSelect={(ab) => console.log(ab)}\n * />\n */\n\n/**\n * 3. ANTIBIOTIC SPECTRUM RADAR CHART\n * ==================================\n * \n * Multi-dimensional radar chart for antibiotic spectrum analysis and comparison.\n * \n * Metrics:\n * - Gram Positive Coverage (0-10)\n * - Gram Negative Coverage (0-10)\n * - Atypical Coverage (0-10)\n * - Anaerobe Coverage (0-10)\n * - Resistance Profile (calculated)\n * - Safety Profile (calculated)\n * \n * Features:\n * - Multiple antibiotic overlay\n * - Comparative analysis panel\n * - Interactive metric selection\n * - Hover tooltips with detailed scores\n * - Statistical comparison (min/max/avg)\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotics to compare\n * - comparisonMode: Enable comparative analysis\n * - onMetricSelect: Callback for metric analysis\n * \n * Usage:\n * <AntibioticSpectrumRadarChart \n *   selectedAntibiotics={['Vancomycin', 'Linezolid', 'Daptomycin']}\n *   comparisonMode={true}\n * />\n */\n\n// =============================================================================\n// NEO4J GRAPH DATABASE INTEGRATION\n// =============================================================================\n\n/**\n * Graph database schema for advanced antibiotic relationship analysis\n * \n * Node Types:\n * - PATHOGEN: Bacterial, viral, fungal pathogens\n * - ANTIBIOTIC: Individual antimicrobial agents\n * - CONDITION: Medical conditions/infections\n * - DRUG_CLASS: Antibiotic classifications\n * \n * Relationship Types:\n * - TREATS: Antibiotic effectiveness against pathogens\n * - CAUSES: Pathogen association with conditions\n * - BELONGS_TO: Antibiotic classification\n * - SYNERGISTIC_WITH: Drug combination synergies\n * - RESISTANT_TO: Resistance patterns\n * - ALTERNATIVE_TO: Alternative therapy options\n * \n * Advanced Queries:\n * - Treatment path analysis\n * - Superbug identification\n * - Alternative drug discovery\n * - Community detection\n * \n * Usage:\n * const dataset = generateNeo4jDataset(medicalConditions);\n * // Returns complete Neo4j-ready dataset with nodes, relationships, and queries\n */\n\n// =============================================================================\n// DATA TRANSFORMATION UTILITIES\n// =============================================================================\n\n/**\n * Spectrum Scoring Functions:\n * \n * calculateSpectrumScore(antibiotic, pathogenCategory)\n * - Returns 0-10 score for specific pathogen category\n * \n * getAntibioticsBySpectrum(pathogenCategory, minScore)\n * - Returns ranked list of antibiotics for category\n * \n * getSpectrumOverlap(antibiotic1, antibiotic2)\n * - Returns 0-1 similarity score between antibiotics\n * \n * Example:\n * const score = calculateSpectrumScore('Vancomycin', 'positive'); // Returns 10\n * const alternatives = getAntibioticsBySpectrum('atypical', 7);    // High-scoring atypical coverage\n * const overlap = getSpectrumOverlap('Penicillin', 'Ampicillin'); // Similarity score\n */\n\n// =============================================================================\n// INTEGRATION GUIDE\n// =============================================================================\n\n/**\n * Adding New Visualizations to Main App:\n * \n * 1. Import components:\n *    import { AntibioticSpectrumVennDiagram, AntibioticRotatingWheel, \n *             AntibioticSpectrumRadarChart } from './components/PathogenNetworkVisualization';\n * \n * 2. Add to component state:\n *    const [selectedVisualization, setSelectedVisualization] = useState('venn');\n *    const [selectedAntibiotics, setSelectedAntibiotics] = useState([]);\n * \n * 3. Render conditionally:\n *    {selectedVisualization === 'venn' && \n *      <AntibioticSpectrumVennDiagram \n *        selectedAntibiotics={selectedAntibiotics}\n *        onSpectrumAnalysis={handleSpectrumAnalysis}\n *      />\n *    }\n * \n * 4. Add visualization selector:\n *    <select onChange={(e) => setSelectedVisualization(e.target.value)}>\n *      <option value=\"venn\">Venn Diagram</option>\n *      <option value=\"wheel\">Rotating Wheel</option>\n *      <option value=\"radar\">Radar Chart</option>\n *    </select>\n */\n\n// =============================================================================\n// PERFORMANCE OPTIMIZATION\n// =============================================================================\n\n/**\n * Optimization Strategies:\n * \n * 1. Data Memoization:\n *    - Use React.useMemo() for expensive calculations\n *    - Cache spectrum scores and pathogen classifications\n * \n * 2. Virtual Rendering:\n *    - Implement viewport culling for large datasets\n *    - Use requestAnimationFrame for smooth animations\n * \n * 3. Progressive Loading:\n *    - Load visualizations on demand\n *    - Implement lazy loading for Neo4j connections\n * \n * 4. Memory Management:\n *    - Clean up SVG animations and event listeners\n *    - Use WeakMap for temporary data storage\n */\n\n// =============================================================================\n// ACCESSIBILITY FEATURES\n// =============================================================================\n\n/**\n * Accessibility Enhancements:\n * \n * 1. Keyboard Navigation:\n *    - Tab through interactive elements\n *    - Arrow keys for rotation and selection\n *    - Enter/Space for activation\n * \n * 2. Screen Reader Support:\n *    - ARIA labels for all interactive elements\n *    - Live regions for dynamic updates\n *    - Semantic SVG structure\n * \n * 3. Visual Accessibility:\n *    - High contrast color schemes\n *    - Pattern fills for color-blind users\n *    - Scalable text and UI elements\n * \n * 4. Cognitive Accessibility:\n *    - Clear navigation flow\n *    - Consistent interaction patterns\n *    - Help tooltips and guidance\n */\n\n// =============================================================================\n// CLINICAL INTEGRATION\n// =============================================================================\n\n/**\n * Medical Decision Support Features:\n * \n * 1. Evidence-Based Scoring:\n *    - Clinical trial effectiveness data\n *    - Resistance surveillance integration\n *    - Local antibiogram support\n * \n * 2. Clinical Context:\n *    - Patient-specific factors (age, allergies, renal function)\n *    - Severity-based recommendations\n *    - Drug interaction checking\n * \n * 3. Educational Features:\n *    - Mechanism of action explanations\n *    - Resistance pattern tutorials\n *    - Case-based learning scenarios\n * \n * 4. Quality Metrics:\n *    - Antibiotic stewardship tracking\n *    - Learning progress analytics\n *    - Clinical outcome correlation\n */\n\nexport const VISUALIZATION_DOCUMENTATION = {\n  version: '2.0.0',\n  components: ['VennDiagram', 'RotatingWheel', 'RadarChart', 'Neo4jIntegration'],\n  features: ['PathogenClassification', 'SpectrumAnalysis', 'GraphDatabase', 'ClinicalDecisionSupport'],\n  lastUpdated: new Date().toISOString(),\n  apiReference: 'See individual component documentation above'\n};\n\n/**\n * Process all conditions and extract normalized pathogen and antibiotic data\n * @param {Array} conditions - Array of medical condition objects\n * @returns {Object} - Processed data with pathogens and antibiotics\n */\nexport const processConditionsData = conditions => {\n  const pathogens = new Map();\n  const antibiotics = new Map();\n  const conditionMap = new Map();\n  conditions.forEach(condition => {\n    conditionMap.set(condition.id, condition);\n\n    // Process pathogens\n    if (condition.commonPathogens && Array.isArray(condition.commonPathogens)) {\n      condition.commonPathogens.forEach(pathogenText => {\n        const pathogen = parsePathogen(pathogenText);\n        if (pathogen && pathogen.isValid) {\n          if (!pathogens.has(pathogen.name)) {\n            pathogens.set(pathogen.name, {\n              ...pathogen,\n              conditions: new Set(),\n              count: 0\n            });\n          }\n          const pathogenData = pathogens.get(pathogen.name);\n          pathogenData.conditions.add(condition.id);\n          pathogenData.count++;\n        }\n      });\n    }\n\n    // Process antibiotics from empiric therapy\n    if (condition.empiricTherapy && typeof condition.empiricTherapy === 'object') {\n      Object.values(condition.empiricTherapy).forEach(therapyText => {\n        const antibioticsList = parseAntibiotics(therapyText);\n        antibioticsList.forEach(antibiotic => {\n          if (antibiotic && antibiotic.isValid) {\n            if (!antibiotics.has(antibiotic.name)) {\n              antibiotics.set(antibiotic.name, {\n                ...antibiotic,\n                conditions: new Set(),\n                therapyContexts: new Set(),\n                count: 0\n              });\n            }\n            const antibioticData = antibiotics.get(antibiotic.name);\n            antibioticData.conditions.add(condition.id);\n            antibioticData.therapyContexts.add(`${condition.name}: ${therapyText}`);\n            antibioticData.count++;\n          }\n        });\n      });\n    }\n  });\n\n  // Convert Sets to Arrays for serialization\n  const pathogenArray = Array.from(pathogens.values()).map(p => ({\n    ...p,\n    conditions: Array.from(p.conditions),\n    therapyContexts: undefined\n  }));\n  const antibioticArray = Array.from(antibiotics.values()).map(a => ({\n    ...a,\n    conditions: Array.from(a.conditions),\n    therapyContexts: Array.from(a.therapyContexts)\n  }));\n  return {\n    pathogens: pathogenArray,\n    antibiotics: antibioticArray,\n    totalPathogens: pathogenArray.length,\n    totalAntibiotics: antibioticArray.length,\n    conditions: Array.from(conditionMap.values())\n  };\n};","map":{"version":3,"names":["parsePathogen","pathogenText","cleanText","trim","replace","nonPathogenPatterns","some","pattern","test","mainName","details","gramStatus","pathogenType","spectrumCategory","parenthesesMatch","match","gramPositivePatterns","gramNegativePatterns","atypicalPatterns","abbreviationMap","standardizedName","originalText","name","shortName","type","isValid","parseAntibiotics","therapyText","instructionPatterns","forEach","antibiotics","segments","split","segment","antibiotic","parseAntibiotic","push","text","length","cleanName","nonDrugPatterns","drugMap","drugClass","getDrugClass","class","drugName","drugClasses","className","drugs","Object","entries","drug","includes","antibioticSpectrumData","subclass","spectrum","gramPositive","gramNegative","atypical","anaerobes","coverage","typical","limited","resistant","mechanismOfAction","resistance","visualProperties","color","position","angle","radius","calculateSpectrumScore","pathogenCategory","data","getAntibioticsBySpectrum","minScore","filter","map","score","sort","a","b","getSpectrumOverlap","antibiotic1","antibiotic2","data1","data2","categories","totalOverlap","category","min","Math","max","drugClassColors","neo4jSchema","nodeTypes","PATHOGEN","properties","indexes","ANTIBIOTIC","CONDITION","DRUG_CLASS","relationshipTypes","TREATS","from","to","CAUSES","BELONGS_TO","SYNERGISTIC_WITH","RESISTANT_TO","ALTERNATIVE_TO","transformToNeo4jFormat","medicalConditions","nodes","relationships","pathogenSet","Set","antibioticSet","conditionSet","drugClassSet","condition","conditionNode","id","description","severity","has","add","commonPathogens","pathogen","pathogenId","toLowerCase","pathogenNode","frequency","empiricTherapy","context","therapy","antibioticId","_antibioticSpectrumDa","antibioticNode","drugClassId","_antibioticSpectrumDa2","drugClassNode","mechanism","effectiveness","calculateTreatmentEffectiveness","clinical_evidence","resistance_risk","calculateResistanceRisk","synergies","identifyAntibioticSynergies","Array","spectrumData","riskFactors","antibioticIds","knownSynergies","pair","synergy","drug1","drug2","synergy_score","generateCypherQueries","neo4jData","queries","nodeQueries","reduce","acc","node","nodeType","nodeList","batchSize","i","batch","slice","query","parameters","relQueries","rel","relType","relList","advancedGraphQueries","findTreatmentPath","pathogen1","pathogen2","findSuperbugs","findAlternatives","findDrugCommunities","generateNeo4jDataset","cypherQueries","schema","advancedQueries","statistics","nodeCount","relationshipCount","keys","VISUALIZATION_DOCUMENTATION","version","components","features","lastUpdated","Date","toISOString","apiReference","processConditionsData","conditions","pathogens","Map","conditionMap","set","isArray","count","pathogenData","get","values","antibioticsList","therapyContexts","antibioticData","pathogenArray","p","undefined","antibioticArray","totalPathogens","totalAntibiotics"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/utils/dataParser.js"],"sourcesContent":["/**\n * Advanced Data Parser\n * Extracts and normalizes pathogen and antibiotic information from medical conditions data\n * Handles complex text patterns and creates standardized lists for multi-dimensional exploration\n */\n\n/**\n * Extract and normalize pathogen names from commonPathogens arrays\n * @param {string} pathogenText - Raw pathogen text from data\n * @returns {Object} - Normalized pathogen info with metadata\n */\nexport const parsePathogen = (pathogenText) => {\n  if (!pathogenText || typeof pathogenText !== 'string') {\n    return null;\n  }\n\n  // Clean up the text\n  let cleanText = pathogenText.trim();\n  \n  // Remove citation markers and references\n  cleanText = cleanText.replace(/\\[cite.*?\\]/g, '');\n  cleanText = cleanText.replace(/\\(cite.*?\\)/g, '');\n  \n  // Skip entries that are clearly not pathogens (references, notes, etc.)\n  const nonPathogenPatterns = [\n    /^RCTs for/i,\n    /^Observational studies/i,\n    /et al/i,\n    /^Studies/i,\n    /^Research/i\n  ];\n  \n  if (nonPathogenPatterns.some(pattern => pattern.test(cleanText))) {\n    return null;\n  }\n  \n  // Extract the main pathogen name\n  let mainName = cleanText;\n  let details = '';\n  let gramStatus = 'unknown';\n  let pathogenType = 'bacteria';\n  let spectrumCategory = 'typical'; // New: typical, atypical, mixed\n  \n  // Handle parenthetical information\n  const parenthesesMatch = cleanText.match(/^([^(]+)\\s*\\(([^)]+)\\)/);\n  if (parenthesesMatch) {\n    mainName = parenthesesMatch[1].trim();\n    details = parenthesesMatch[2].trim();\n  }\n  \n  // Determine gram status based on pathogen name\n  const gramPositivePatterns = [\n    /staphylococcus/i,\n    /streptococcus/i,\n    /enterococcus/i,\n    /clostridium/i,\n    /corynebacterium/i,\n    /bacillus/i,\n    /listeria/i\n  ];\n  \n  const gramNegativePatterns = [\n    /escherichia/i,\n    /klebsiella/i,\n    /pseudomonas/i,\n    /enterobacter/i,\n    /proteus/i,\n    /citrobacter/i,\n    /haemophilus/i,\n    /moraxella/i,\n    /neisseria/i,\n    /enterobacterales/i,\n    /salmonella/i,\n    /shigella/i,\n    /acinetobacter/i,\n    /stenotrophomonas/i\n  ];\n  \n  // Enhanced atypical organism patterns\n  const atypicalPatterns = [\n    /mycoplasma/i,\n    /chlamydia/i,\n    /legionella/i,\n    /rickettsia/i,\n    /coxiella/i,\n    /ehrlichia/i,\n    /anaplasma/i,\n    /bartonella/i,\n    /francisella/i,\n    /brucella/i\n  ];\n  \n  // Determine spectrum category and gram status\n  if (atypicalPatterns.some(pattern => pattern.test(mainName))) {\n    spectrumCategory = 'atypical';\n    gramStatus = 'atypical'; // Special category for atypical organisms\n  } else if (gramPositivePatterns.some(pattern => pattern.test(mainName))) {\n    gramStatus = 'positive';\n    spectrumCategory = 'typical';\n  } else if (gramNegativePatterns.some(pattern => pattern.test(mainName))) {\n    gramStatus = 'negative';\n    spectrumCategory = 'typical';\n  }\n  \n  // Determine pathogen type with enhanced categories\n  if (/virus/i.test(cleanText) || /viral/i.test(cleanText) || /HSV/i.test(cleanText)) {\n    pathogenType = 'virus';\n    spectrumCategory = 'atypical';\n  } else if (/fungal/i.test(cleanText) || /candida/i.test(cleanText) || /aspergillus/i.test(cleanText)) {\n    pathogenType = 'fungus';\n    spectrumCategory = 'atypical';\n  } else if (/mycobacteri/i.test(cleanText)) {\n    pathogenType = 'mycobacteria';\n    spectrumCategory = 'atypical';\n    gramStatus = 'acid-fast'; // Special classification for mycobacteria\n  } else if (atypicalPatterns.some(pattern => pattern.test(mainName))) {\n    pathogenType = 'atypical bacteria';\n  }\n  \n  // Standardize common abbreviations\n  const abbreviationMap = {\n    'S aureus': 'Staphylococcus aureus',\n    'S pyogenes': 'Streptococcus pyogenes', \n    'S pneumoniae': 'Streptococcus pneumoniae',\n    'E coli': 'Escherichia coli',\n    'E faecalis': 'Enterococcus faecalis',\n    'E faecium': 'Enterococcus faecium',\n    'H influenzae': 'Haemophilus influenzae',\n    'P aeruginosa': 'Pseudomonas aeruginosa',\n    'K kingae': 'Kingella kingae',\n    'K pneumoniae': 'Klebsiella pneumoniae',\n    'M catarrhalis': 'Moraxella catarrhalis',\n    'N meningitidis': 'Neisseria meningitidis',\n    'M pneumoniae': 'Mycoplasma pneumoniae',\n    'C pneumoniae': 'Chlamydia pneumoniae',\n    'L pneumophila': 'Legionella pneumophila',\n    'GBS': 'Group B Streptococcus',\n    'HSV': 'Herpes Simplex Virus'\n  };\n  \n  const standardizedName = abbreviationMap[mainName] || mainName;\n  \n  return {\n    originalText: pathogenText,\n    name: standardizedName,\n    shortName: mainName,\n    details: details,\n    gramStatus: gramStatus,\n    type: pathogenType,\n    spectrumCategory: spectrumCategory, // New field for visualization grouping\n    isValid: true\n  };\n};;\n\n/**\n * Extract antibiotic names from therapy strings\n * @param {string} therapyText - Raw therapy text from empiricTherapy\n * @returns {Array} - Array of antibiotic objects with metadata\n */\nexport const parseAntibiotics = (therapyText) => {\n  if (!therapyText || typeof therapyText !== 'string') {\n    return [];\n  }\n  \n  let cleanText = therapyText.trim();\n  \n  // Remove non-drug instructions and context\n  const instructionPatterns = [\n    /Consider surgical drainage[^.]*\\./i,\n    /Drainage[^.]*\\./i,\n    /Choice depends on[^.]*\\./i,\n    /These are empiric[^.]*\\./i,\n    /if.*available\\)/i,\n    /some experts[^)]*\\)/i\n  ];\n  \n  instructionPatterns.forEach(pattern => {\n    cleanText = cleanText.replace(pattern, '');\n  });\n  \n  // Handle empty or non-specific guidance\n  if (!cleanText.trim() || \n      /choice depends/i.test(cleanText) || \n      /guided by culture/i.test(cleanText)) {\n    return [];\n  }\n  \n  const antibiotics = [];\n  \n  // Split on combinations and alternatives\n  const segments = cleanText.split(/\\s+(?:PLUS|plus|\\+|OR|or)\\s+/i);\n  \n  segments.forEach(segment => {\n    const antibiotic = parseAntibiotic(segment.trim());\n    if (antibiotic) {\n      antibiotics.push(antibiotic);\n    }\n  });\n  \n  return antibiotics;\n};\n\n/**\n * Parse individual antibiotic from text segment\n * @param {string} text - Text segment containing antibiotic name\n * @returns {Object|null} - Antibiotic object or null if invalid\n */\nconst parseAntibiotic = (text) => {\n  if (!text || text.length < 2) return null;\n  \n  // Remove parenthetical information\n  let cleanName = text.replace(/\\([^)]*\\)/g, '').trim();\n  \n  // Remove dosing information and routes\n  cleanName = cleanName.replace(/\\d+\\s*(mg|g|units|mcg).*$/i, '');\n  cleanName = cleanName.replace(/\\b(IV|PO|IM|oral|intravenous|intramuscular)\\b/gi, '');\n  \n  // Skip if it's not actually a drug name\n  const nonDrugPatterns = [\n    /^if\\b/i,\n    /^for\\b/i, \n    /^consider\\b/i,\n    /^add\\b/i,\n    /days?$/i,\n    /weeks?$/i,\n    /\\d+\\s*days?/i,\n    /allergyb?:?/i,\n    /standard/i,\n    /treatment/i\n  ];\n  \n  if (nonDrugPatterns.some(pattern => pattern.test(cleanName))) {\n    return null;\n  }\n  \n  // Standardize drug names\n  const drugMap = {\n    'Ampicillin-sulbactam': 'Ampicillin/sulbactam',\n    'Ampicillin- sulbactam': 'Ampicillin/sulbactam',\n    'Amoxicillin-clavulanate': 'Amoxicillin/clavulanate', \n    'Amoxicillin- clavulanate': 'Amoxicillin/clavulanate',\n    'Piperacillin-tazobactam': 'Piperacillin/tazobactam',\n    'Piperacillin- tazobactam': 'Piperacillin/tazobactam',\n    'TMP-SMX': 'Trimethoprim/sulfamethoxazole',\n    'TMP/SMX': 'Trimethoprim/sulfamethoxazole'\n  };\n  \n  const standardizedName = drugMap[cleanName] || cleanName;\n  \n  // Determine drug class\n  const drugClass = getDrugClass(standardizedName);\n  \n  return {\n    originalText: text,\n    name: standardizedName,\n    class: drugClass,\n    isValid: true\n  };\n};\n\n/**\n * Determine drug class based on antibiotic name\n * @param {string} drugName - Standardized drug name\n * @returns {string} - Drug class\n */\nconst getDrugClass = (drugName) => {\n  const drugClasses = {\n    'Penicillins': [\n      'Penicillin', 'Ampicillin', 'Amoxicillin', 'Oxacillin', 'Nafcillin',\n      'Ampicillin/sulbactam', 'Amoxicillin/clavulanate', 'Piperacillin/tazobactam'\n    ],\n    'Cephalosporins': [\n      'Cefazolin', 'Cephalexin', 'Ceftriaxone', 'Cefotaxime', 'Ceftazidime', \n      'Cefepime', 'Cefdinir', 'Cefpodoxime', 'Cefuroxime', 'Ceftaroline'\n    ],\n    'Glycopeptides': ['Vancomycin'],\n    'Lincosamides': ['Clindamycin'],\n    'Oxazolidinones': ['Linezolid'],\n    'Lipopeptides': ['Daptomycin'],\n    'Macrolides': ['Azithromycin', 'Erythromycin'],\n    'Aminoglycosides': ['Gentamicin', 'Amikacin', 'Tobramycin'],\n    'Fluoroquinolones': ['Ciprofloxacin', 'Levofloxacin'],\n    'Tetracyclines': ['Doxycycline'],\n    'Folate Antagonists': ['Trimethoprim/sulfamethoxazole'],\n    'Nitroimidazoles': ['Metronidazole'],\n    'Nitrofurans': ['Nitrofurantoin'],\n    'Antivirals': ['Acyclovir']\n  };\n  \n  for (const [className, drugs] of Object.entries(drugClasses)) {\n    if (drugs.some(drug => drugName.includes(drug) || drug.includes(drugName))) {\n      return className;\n    }\n  }\n  \n  return 'Other';\n};\n\n// Enhanced antibiotic spectrum database with coverage scoring and visualization data\nexport const antibioticSpectrumData = {\n  // Penicillins\n  'Penicillin': {\n    class: 'Penicillins',\n    subclass: 'Natural Penicillins',\n    spectrum: {\n      gramPositive: 9, // Score 0-10\n      gramNegative: 2,\n      atypical: 1,\n      anaerobes: 7\n    },\n    coverage: {\n      typical: ['Streptococcus pyogenes', 'Streptococcus pneumoniae', 'Enterococcus faecalis'],\n      limited: ['Staphylococcus aureus (MSSA only)'],\n      resistant: ['MRSA', 'Most gram-negatives', 'Atypicals']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production', 'PBP mutations'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: { angle: 0, radius: 0.8 }\n    }\n  },\n  \n  'Ampicillin': {\n    class: 'Penicillins',\n    subclass: 'Aminopenicillins',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 5,\n      atypical: 1,\n      anaerobes: 6\n    },\n    coverage: {\n      typical: ['Enterococcus species', 'Listeria monocytogenes', 'Some E. coli'],\n      limited: ['Streptococcus species', 'Haemophilus influenzae (if sensitive)'],\n      resistant: ['MRSA', 'Most Enterobacterales', 'Pseudomonas']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: { angle: 30, radius: 0.8 }\n    }\n  },\n\n  'Amoxicillin': {\n    class: 'Penicillins',\n    subclass: 'Aminopenicillins',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 5,\n      atypical: 1,\n      anaerobes: 6\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Enterococcus faecalis', 'Some E. coli'],\n      limited: ['Haemophilus influenzae', 'Moraxella catarrhalis'],\n      resistant: ['MRSA', 'Beta-lactamase producing organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production'],\n    visualProperties: {\n      color: '#3b82f6',\n      position: { angle: 45, radius: 0.8 }\n    }\n  },\n\n  'Amoxicillin/clavulanate': {\n    class: 'Penicillins',\n    subclass: 'Beta-lactamase inhibitor combinations',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 7,\n      atypical: 1,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'H. influenzae', 'M. catarrhalis', 'E. coli'],\n      limited: ['Some Klebsiella species', 'Anaerobes'],\n      resistant: ['MRSA', 'Pseudomonas', 'ESBL producers']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition + beta-lactamase inhibition',\n    resistance: ['ESBL production', 'AmpC beta-lactamases'],\n    visualProperties: {\n      color: '#1e40af',\n      position: { angle: 60, radius: 0.9 }\n    }\n  },\n\n  'Piperacillin/tazobactam': {\n    class: 'Penicillins',\n    subclass: 'Antipseudomonal penicillins',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 9,\n      atypical: 1,\n      anaerobes: 9\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'MSSA', 'Streptococcus species'],\n      limited: ['Some ESBL producers', 'Anaerobes'],\n      resistant: ['MRSA', 'Enterococcus faecium', 'Carbapenem-resistant organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition + beta-lactamase inhibition',\n    resistance: ['Carbapenemases', 'AmpC hyperproduction'],\n    visualProperties: {\n      color: '#1e40af',\n      position: { angle: 75, radius: 1.0 }\n    }\n  },\n\n  // Cephalosporins\n  'Cefazolin': {\n    class: 'Cephalosporins',\n    subclass: '1st Generation',\n    spectrum: {\n      gramPositive: 9,\n      gramNegative: 4,\n      atypical: 0,\n      anaerobes: 2\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'Some E. coli', 'Proteus mirabilis'],\n      limited: ['Klebsiella pneumoniae'],\n      resistant: ['MRSA', 'Enterococcus', 'Pseudomonas', 'Anaerobes']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Beta-lactamase production', 'PBP mutations'],\n    visualProperties: {\n      color: '#10b981',\n      position: { angle: 90, radius: 0.8 }\n    }\n  },\n\n  'Ceftriaxone': {\n    class: 'Cephalosporins',\n    subclass: '3rd Generation',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 8,\n      atypical: 0,\n      anaerobes: 1\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Most Enterobacterales', 'H. influenzae', 'N. meningitidis'],\n      limited: ['Some MSSA', 'Moraxella catarrhalis'],\n      resistant: ['MRSA', 'Enterococcus', 'Pseudomonas', 'ESBL producers']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['ESBL production', 'AmpC beta-lactamases'],\n    visualProperties: {\n      color: '#059669',\n      position: { angle: 120, radius: 0.9 }\n    }\n  },\n\n  'Cefepime': {\n    class: 'Cephalosporins',\n    subclass: '4th Generation',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 9,\n      atypical: 0,\n      anaerobes: 1\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'Streptococcus pneumoniae'],\n      limited: ['Some ESBL producers', 'MSSA'],\n      resistant: ['MRSA', 'Enterococcus', 'Carbapenem-resistant organisms']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition',\n    resistance: ['Carbapenemases', 'AmpC hyperproduction'],\n    visualProperties: {\n      color: '#047857',\n      position: { angle: 135, radius: 1.0 }\n    }\n  },\n\n  // Glycopeptides\n  'Vancomycin': {\n    class: 'Glycopeptides',\n    subclass: 'Glycopeptides',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 0,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MRSA', 'MSSA', 'Enterococcus faecalis', 'CoNS', 'C. difficile (oral)'],\n      limited: ['Streptococcus species'],\n      resistant: ['Gram-negatives', 'VRE', 'Some atypicals']\n    },\n    mechanismOfAction: 'Cell wall synthesis inhibition (different target than beta-lactams)',\n    resistance: ['van gene cluster', 'Thick cell wall (hetero-resistance)'],\n    visualProperties: {\n      color: '#7c3aed',\n      position: { angle: 150, radius: 0.9 }\n    }\n  },\n\n  // Lincosamides\n  'Clindamycin': {\n    class: 'Lincosamides',\n    subclass: 'Lincosamides',\n    spectrum: {\n      gramPositive: 8,\n      gramNegative: 1,\n      atypical: 2,\n      anaerobes: 9\n    },\n    coverage: {\n      typical: ['MSSA', 'Streptococcus species', 'Anaerobes (most)'],\n      limited: ['Some MRSA (if D-test negative)', 'Some atypicals'],\n      resistant: ['Gram-negatives', 'Enterococcus', 'C. difficile']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit)',\n    resistance: ['erm genes (inducible)', 'lincosamide resistance'],\n    visualProperties: {\n      color: '#dc2626',\n      position: { angle: 180, radius: 0.8 }\n    }\n  },\n\n  // Macrolides\n  'Azithromycin': {\n    class: 'Macrolides',\n    subclass: 'Azalides',\n    spectrum: {\n      gramPositive: 6,\n      gramNegative: 3,\n      atypical: 9,\n      anaerobes: 4\n    },\n    coverage: {\n      typical: ['Streptococcus pyogenes', 'Some Streptococcus pneumoniae', 'H. influenzae'],\n      atypical: ['Mycoplasma pneumoniae', 'Chlamydia species', 'Legionella pneumophila'],\n      resistant: ['MRSA', 'Most Enterobacterales', 'Pseudomonas']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit)',\n    resistance: ['erm genes', 'efflux pumps'],\n    visualProperties: {\n      color: '#f59e0b',\n      position: { angle: 210, radius: 0.8 }\n    }\n  },\n\n  // Fluoroquinolones\n  'Ciprofloxacin': {\n    class: 'Fluoroquinolones',\n    subclass: 'Fluoroquinolones',\n    spectrum: {\n      gramPositive: 5,\n      gramNegative: 9,\n      atypical: 7,\n      anaerobes: 2\n    },\n    coverage: {\n      typical: ['Pseudomonas aeruginosa', 'Most Enterobacterales', 'Some Streptococcus species'],\n      atypical: ['Some Mycoplasma', 'Some Chlamydia'],\n      resistant: ['MRSA', 'Streptococcus pneumoniae', 'Anaerobes']\n    },\n    mechanismOfAction: 'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',\n    resistance: ['gyr/par mutations', 'efflux pumps', 'qnr genes'],\n    visualProperties: {\n      color: '#8b5cf6',\n      position: { angle: 240, radius: 0.9 }\n    }\n  },\n\n  'Levofloxacin': {\n    class: 'Fluoroquinolones',\n    subclass: 'Respiratory Fluoroquinolones',\n    spectrum: {\n      gramPositive: 7,\n      gramNegative: 8,\n      atypical: 8,\n      anaerobes: 3\n    },\n    coverage: {\n      typical: ['Streptococcus pneumoniae', 'Most Enterobacterales', 'Some Pseudomonas'],\n      atypical: ['Mycoplasma pneumoniae', 'Chlamydia species', 'Legionella pneumophila'],\n      resistant: ['MRSA (variable)', 'Anaerobes']\n    },\n    mechanismOfAction: 'DNA synthesis inhibition (DNA gyrase, topoisomerase IV)',\n    resistance: ['gyr/par mutations', 'efflux pumps'],\n    visualProperties: {\n      color: '#7c3aed',\n      position: { angle: 255, radius: 0.9 }\n    }\n  },\n\n  // Aminoglycosides\n  'Gentamicin': {\n    class: 'Aminoglycosides',\n    subclass: 'Aminoglycosides',\n    spectrum: {\n      gramPositive: 6,\n      gramNegative: 8,\n      atypical: 0,\n      anaerobes: 0\n    },\n    coverage: {\n      typical: ['Most Enterobacterales', 'Pseudomonas aeruginosa', 'Staphylococcus species (synergy)'],\n      limited: ['Enterococcus (synergy only)'],\n      resistant: ['Streptococcus', 'Anaerobes', 'Atypicals']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (30S ribosomal subunit)',\n    resistance: ['Aminoglycoside-modifying enzymes', '16S rRNA methylases'],\n    visualProperties: {\n      color: '#ef4444',\n      position: { angle: 270, radius: 0.7 }\n    }\n  },\n\n  // Oxazolidinones\n  'Linezolid': {\n    class: 'Oxazolidinones',\n    subclass: 'Oxazolidinones',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 2,\n      anaerobes: 7\n    },\n    coverage: {\n      typical: ['MRSA', 'VRE', 'All Streptococcus species', 'CoNS'],\n      limited: ['Some anaerobes'],\n      resistant: ['Gram-negatives', 'Most atypicals']\n    },\n    mechanismOfAction: 'Protein synthesis inhibition (50S ribosomal subunit, unique binding site)',\n    resistance: ['cfr gene', '23S rRNA mutations'],\n    visualProperties: {\n      color: '#be185d',\n      position: { angle: 300, radius: 0.8 }\n    }\n  },\n\n  // Lipopeptides\n  'Daptomycin': {\n    class: 'Lipopeptides',\n    subclass: 'Lipopeptides',\n    spectrum: {\n      gramPositive: 10,\n      gramNegative: 0,\n      atypical: 0,\n      anaerobes: 8\n    },\n    coverage: {\n      typical: ['MRSA', 'VRE', 'All Staphylococcus species', 'Most Streptococcus species'],\n      limited: ['Enterococcus species'],\n      resistant: ['Gram-negatives', 'Atypicals', 'Pneumonia (inactivated by surfactant)']\n    },\n    mechanismOfAction: 'Cell membrane depolarization',\n    resistance: ['Cell membrane changes', 'mprF mutations'],\n    visualProperties: {\n      color: '#991b1b',\n      position: { angle: 330, radius: 0.8 }\n    }\n  }\n};\n\n// Spectrum scoring utilities\nexport const calculateSpectrumScore = (antibiotic, pathogenCategory) => {\n  const data = antibioticSpectrumData[antibiotic];\n  if (!data) return 0;\n  \n  switch (pathogenCategory) {\n    case 'positive': return data.spectrum.gramPositive;\n    case 'negative': return data.spectrum.gramNegative;\n    case 'atypical': return data.spectrum.atypical;\n    case 'anaerobes': return data.spectrum.anaerobes;\n    default: return 0;\n  }\n};\n\nexport const getAntibioticsBySpectrum = (pathogenCategory, minScore = 5) => {\n  return Object.entries(antibioticSpectrumData)\n    .filter(([name, data]) => calculateSpectrumScore(name, pathogenCategory) >= minScore)\n    .map(([name, data]) => ({\n      name,\n      score: calculateSpectrumScore(name, pathogenCategory),\n      class: data.class,\n      ...data\n    }))\n    .sort((a, b) => b.score - a.score);\n};\n\nexport const getSpectrumOverlap = (antibiotic1, antibiotic2) => {\n  const data1 = antibioticSpectrumData[antibiotic1];\n  const data2 = antibioticSpectrumData[antibiotic2];\n  \n  if (!data1 || !data2) return 0;\n  \n  const categories = ['gramPositive', 'gramNegative', 'atypical', 'anaerobes'];\n  let totalOverlap = 0;\n  \n  categories.forEach(category => {\n    const min = Math.min(data1.spectrum[category], data2.spectrum[category]);\n    const max = Math.max(data1.spectrum[category], data2.spectrum[category]);\n    totalOverlap += max > 0 ? min / max : 0;\n  });\n  \n  return totalOverlap / categories.length;\n};\n\n// Drug class color mapping for visualizations\nexport const drugClassColors = {\n  'Penicillins': '#3b82f6',\n  'Cephalosporins': '#10b981',\n  'Glycopeptides': '#7c3aed',\n  'Lincosamides': '#dc2626',\n  'Macrolides': '#f59e0b',\n  'Fluoroquinolones': '#8b5cf6',\n  'Aminoglycosides': '#ef4444',\n  'Oxazolidinones': '#be185d',\n  'Lipopeptides': '#991b1b',\n  'Tetracyclines': '#059669',\n  'Folate Antagonists': '#0d9488',\n  'Nitroimidazoles': '#7c2d12',\n  'Nitrofurans': '#a21caf',\n  'Antivirals': '#1e40af'\n};\n// Neo4j Graph Database Schema and Data Transformation Utilities\n\n// Neo4j Schema Design\nexport const neo4jSchema = {\n  nodeTypes: {\n    PATHOGEN: {\n      properties: ['id', 'name', 'gramStatus', 'type', 'spectrumCategory'],\n      indexes: ['name', 'gramStatus', 'type']\n    },\n    ANTIBIOTIC: {\n      properties: ['id', 'name', 'class', 'subclass', 'mechanismOfAction'],\n      indexes: ['name', 'class']\n    },\n    CONDITION: {\n      properties: ['id', 'name', 'category', 'severity'],\n      indexes: ['name', 'category']\n    },\n    DRUG_CLASS: {\n      properties: ['id', 'name', 'mechanism', 'spectrumType'],\n      indexes: ['name']\n    }\n  },\n  \n  relationshipTypes: {\n    TREATS: {\n      from: 'ANTIBIOTIC',\n      to: 'PATHOGEN',\n      properties: ['effectiveness', 'resistance_risk', 'clinical_evidence']\n    },\n    CAUSES: {\n      from: 'PATHOGEN',\n      to: 'CONDITION',\n      properties: ['frequency', 'severity', 'typical_presentation']\n    },\n    BELONGS_TO: {\n      from: 'ANTIBIOTIC',\n      to: 'DRUG_CLASS',\n      properties: []\n    },\n    SYNERGISTIC_WITH: {\n      from: 'ANTIBIOTIC',\n      to: 'ANTIBIOTIC',\n      properties: ['synergy_score', 'mechanism']\n    },\n    RESISTANT_TO: {\n      from: 'PATHOGEN',\n      to: 'ANTIBIOTIC',\n      properties: ['resistance_mechanism', 'prevalence']\n    },\n    ALTERNATIVE_TO: {\n      from: 'ANTIBIOTIC',\n      to: 'ANTIBIOTIC',\n      properties: ['similarity_score', 'clinical_context']\n    }\n  }\n};\n\n// Transform medical conditions data to Neo4j format\nexport const transformToNeo4jFormat = (medicalConditions) => {\n  const nodes = [];\n  const relationships = [];\n  \n  // Track unique entities\n  const pathogenSet = new Set();\n  const antibioticSet = new Set();\n  const conditionSet = new Set();\n  const drugClassSet = new Set();\n  \n  medicalConditions.forEach(condition => {\n    // Create condition node\n    const conditionNode = {\n      type: 'CONDITION',\n      id: condition.id,\n      properties: {\n        name: condition.name,\n        category: condition.category,\n        description: condition.description,\n        severity: condition.severity || 'unknown'\n      }\n    };\n    \n    if (!conditionSet.has(condition.id)) {\n      nodes.push(conditionNode);\n      conditionSet.add(condition.id);\n    }\n    \n    // Process pathogens\n    if (condition.commonPathogens) {\n      condition.commonPathogens.forEach(pathogenText => {\n        const pathogen = parsePathogen(pathogenText);\n        if (pathogen && pathogen.isValid) {\n          const pathogenId = pathogen.name.toLowerCase().replace(/\\s+/g, '_');\n          \n          // Create pathogen node\n          if (!pathogenSet.has(pathogenId)) {\n            const pathogenNode = {\n              type: 'PATHOGEN',\n              id: pathogenId,\n              properties: {\n                name: pathogen.name,\n                gramStatus: pathogen.gramStatus,\n                type: pathogen.type,\n                spectrumCategory: pathogen.spectrumCategory\n              }\n            };\n            nodes.push(pathogenNode);\n            pathogenSet.add(pathogenId);\n          }\n          \n          // Create CAUSES relationship\n          relationships.push({\n            type: 'CAUSES',\n            from: { type: 'PATHOGEN', id: pathogenId },\n            to: { type: 'CONDITION', id: condition.id },\n            properties: {\n              frequency: 'common', // Would be derived from clinical data\n              severity: condition.severity || 'moderate'\n            }\n          });\n        }\n      });\n    }\n    \n    // Process empiric therapy antibiotics\n    if (condition.empiricTherapy) {\n      Object.entries(condition.empiricTherapy).forEach(([context, therapy]) => {\n        const antibiotics = parseAntibiotics(therapy);\n        antibiotics.forEach(antibiotic => {\n          if (antibiotic && antibiotic.isValid) {\n            const antibioticId = antibiotic.name.toLowerCase().replace(/\\s+/g, '_').replace(/\\//g, '_');\n            \n            // Create antibiotic node\n            if (!antibioticSet.has(antibioticId)) {\n              const antibioticNode = {\n                type: 'ANTIBIOTIC',\n                id: antibioticId,\n                properties: {\n                  name: antibiotic.name,\n                  class: antibiotic.class,\n                  mechanismOfAction: antibioticSpectrumData[antibiotic.name]?.mechanismOfAction || 'unknown'\n                }\n              };\n              nodes.push(antibioticNode);\n              antibioticSet.add(antibioticId);\n              \n              // Create drug class node and relationship\n              const drugClassId = antibiotic.class.toLowerCase().replace(/\\s+/g, '_');\n              if (!drugClassSet.has(drugClassId)) {\n                const drugClassNode = {\n                  type: 'DRUG_CLASS',\n                  id: drugClassId,\n                  properties: {\n                    name: antibiotic.class,\n                    mechanism: antibioticSpectrumData[antibiotic.name]?.mechanismOfAction || 'unknown'\n                  }\n                };\n                nodes.push(drugClassNode);\n                drugClassSet.add(drugClassId);\n              }\n              \n              // Create BELONGS_TO relationship\n              relationships.push({\n                type: 'BELONGS_TO',\n                from: { type: 'ANTIBIOTIC', id: antibioticId },\n                to: { type: 'DRUG_CLASS', id: drugClassId },\n                properties: {}\n              });\n            }\n            \n            // Create treatment relationships with pathogens\n            if (condition.commonPathogens) {\n              condition.commonPathogens.forEach(pathogenText => {\n                const pathogen = parsePathogen(pathogenText);\n                if (pathogen && pathogen.isValid) {\n                  const pathogenId = pathogen.name.toLowerCase().replace(/\\s+/g, '_');\n                  const effectiveness = calculateTreatmentEffectiveness(antibiotic, pathogen);\n                  \n                  relationships.push({\n                    type: 'TREATS',\n                    from: { type: 'ANTIBIOTIC', id: antibioticId },\n                    to: { type: 'PATHOGEN', id: pathogenId },\n                    properties: {\n                      effectiveness: effectiveness,\n                      clinical_evidence: context,\n                      resistance_risk: calculateResistanceRisk(antibiotic, pathogen)\n                    }\n                  });\n                }\n              });\n            }\n          }\n        });\n      });\n    }\n  });\n  \n  // Add synergy relationships\n  const synergies = identifyAntibioticSynergies(Array.from(antibioticSet));\n  relationships.push(...synergies);\n  \n  return { nodes, relationships };\n};\n\n// Calculate treatment effectiveness based on spectrum data\nconst calculateTreatmentEffectiveness = (antibiotic, pathogen) => {\n  const spectrumData = antibioticSpectrumData[antibiotic.name];\n  if (!spectrumData) return 5; // Default moderate effectiveness\n  \n  switch (pathogen.gramStatus) {\n    case 'positive':\n      return spectrumData.spectrum.gramPositive;\n    case 'negative':\n      return spectrumData.spectrum.gramNegative;\n    case 'atypical':\n      return spectrumData.spectrum.atypical;\n    default:\n      return 5;\n  }\n};\n\n// Calculate resistance risk\nconst calculateResistanceRisk = (antibiotic, pathogen) => {\n  const spectrumData = antibioticSpectrumData[antibiotic.name];\n  if (!spectrumData || !spectrumData.resistance) return 'moderate';\n  \n  // Risk factors based on resistance mechanisms\n  const riskFactors = spectrumData.resistance.length;\n  if (riskFactors <= 1) return 'low';\n  if (riskFactors <= 3) return 'moderate';\n  return 'high';\n};\n\n// Identify potential antibiotic synergies\nconst identifyAntibioticSynergies = (antibioticIds) => {\n  const synergies = [];\n  const knownSynergies = [\n    { \n      pair: ['ampicillin', 'gentamicin'], \n      mechanism: 'cell_wall_aminoglycoside_synergy',\n      score: 8\n    },\n    {\n      pair: ['vancomycin', 'gentamicin'],\n      mechanism: 'cell_wall_aminoglycoside_synergy',\n      score: 7\n    },\n    {\n      pair: ['piperacillin_tazobactam', 'vancomycin'],\n      mechanism: 'broad_spectrum_combination',\n      score: 6\n    }\n  ];\n  \n  knownSynergies.forEach(synergy => {\n    const [drug1, drug2] = synergy.pair;\n    if (antibioticIds.includes(drug1) && antibioticIds.includes(drug2)) {\n      synergies.push({\n        type: 'SYNERGISTIC_WITH',\n        from: { type: 'ANTIBIOTIC', id: drug1 },\n        to: { type: 'ANTIBIOTIC', id: drug2 },\n        properties: {\n          synergy_score: synergy.score,\n          mechanism: synergy.mechanism\n        }\n      });\n    }\n  });\n  \n  return synergies;\n};\n\n// Generate Cypher queries for Neo4j\nexport const generateCypherQueries = (neo4jData) => {\n  const { nodes, relationships } = neo4jData;\n  \n  const queries = [];\n  \n  // Node creation queries\n  const nodeQueries = nodes.reduce((acc, node) => {\n    const nodeType = node.type;\n    if (!acc[nodeType]) acc[nodeType] = [];\n    acc[nodeType].push(node);\n    return acc;\n  }, {});\n  \n  Object.entries(nodeQueries).forEach(([type, nodeList]) => {\n    const batchSize = 100;\n    for (let i = 0; i < nodeList.length; i += batchSize) {\n      const batch = nodeList.slice(i, i + batchSize);\n      const query = `\n        UNWIND $nodes AS node\n        CREATE (n:${type})\n        SET n = node.properties\n        SET n.id = node.id\n      `;\n      queries.push({\n        query,\n        parameters: { nodes: batch }\n      });\n    }\n  });\n  \n  // Relationship creation queries\n  const relQueries = relationships.reduce((acc, rel) => {\n    const relType = rel.type;\n    if (!acc[relType]) acc[relType] = [];\n    acc[relType].push(rel);\n    return acc;\n  }, {});\n  \n  Object.entries(relQueries).forEach(([type, relList]) => {\n    const batchSize = 100;\n    for (let i = 0; i < relList.length; i += batchSize) {\n      const batch = relList.slice(i, i + batchSize);\n      const query = `\n        UNWIND $relationships AS rel\n        MATCH (from:${batch[0].from.type} {id: rel.from.id})\n        MATCH (to:${batch[0].to.type} {id: rel.to.id})\n        CREATE (from)-[r:${type}]->(to)\n        SET r = rel.properties\n      `;\n      queries.push({\n        query,\n        parameters: { relationships: batch }\n      });\n    }\n  });\n  \n  return queries;\n};\n\n// Advanced graph analysis queries\nexport const advancedGraphQueries = {\n  // Find shortest antibiotic path between two pathogens\n  findTreatmentPath: (pathogen1, pathogen2) => `\n    MATCH path = shortestPath(\n      (p1:PATHOGEN {name: $pathogen1})-[:TREATS*..4]-(p2:PATHOGEN {name: $pathogen2})\n    )\n    RETURN path, length(path) as pathLength\n  `,\n  \n  // Identify super-bugs (highly connected resistant pathogens)\n  findSuperbugs: () => `\n    MATCH (p:PATHOGEN)-[r:RESISTANT_TO]->(a:ANTIBIOTIC)\n    WITH p, count(r) as resistanceCount\n    WHERE resistanceCount > 3\n    RETURN p.name, resistanceCount\n    ORDER BY resistanceCount DESC\n    LIMIT 10\n  `,\n  \n  // Find antibiotic alternatives based on spectrum similarity\n  findAlternatives: (antibiotic) => `\n    MATCH (target:ANTIBIOTIC {name: $antibiotic})-[:TREATS]->(p:PATHOGEN)\n    MATCH (alt:ANTIBIOTIC)-[:TREATS]->(p)\n    WHERE alt <> target\n    WITH alt, count(p) as sharedPathogens\n    MATCH (alt)-[:TREATS]->(allP:PATHOGEN)\n    WITH alt, sharedPathogens, count(allP) as totalPathogens\n    RETURN alt.name, sharedPathogens, totalPathogens, \n           toFloat(sharedPathogens)/totalPathogens as similarity\n    ORDER BY similarity DESC\n    LIMIT 5\n  `,\n  \n  // Community detection for drug classes\n  findDrugCommunities: () => `\n    CALL gds.louvain.stream('antibioticGraph')\n    YIELD nodeId, communityId\n    MATCH (a:ANTIBIOTIC)-[:BELONGS_TO]->(dc:DRUG_CLASS)\n    WHERE id(a) = nodeId\n    RETURN dc.name, communityId, collect(a.name) as antibiotics\n  `\n};\n\n// Export utility for generating complete Neo4j dataset\nexport const generateNeo4jDataset = (medicalConditions) => {\n  const neo4jData = transformToNeo4jFormat(medicalConditions);\n  const cypherQueries = generateCypherQueries(neo4jData);\n  \n  return {\n    schema: neo4jSchema,\n    data: neo4jData,\n    queries: cypherQueries,\n    advancedQueries: advancedGraphQueries,\n    statistics: {\n      nodeCount: neo4jData.nodes.length,\n      relationshipCount: neo4jData.relationships.length,\n      nodeTypes: Object.keys(neo4jSchema.nodeTypes),\n      relationshipTypes: Object.keys(neo4jSchema.relationshipTypes)\n    }\n  };\n};\n/**\n * ANTIBIOTIC LEARNING APP - ADVANCED VISUALIZATION DOCUMENTATION\n * ==============================================================\n * \n * This module provides comprehensive data visualization capabilities for pediatric\n * antibiotic learning, including Venn diagrams, rotating wheels, radar charts,\n * and Neo4j graph database integration.\n * \n * @version 2.0.0\n * @author Claude AI Assistant\n * @date 2024\n */\n\n// =============================================================================\n// PATHOGEN CLASSIFICATION SYSTEM\n// =============================================================================\n\n/**\n * Enhanced pathogen classification supporting typical and atypical organisms\n * \n * Categories:\n * - Gram Positive: Traditional gram-positive bacteria (Staphylococcus, Streptococcus, etc.)\n * - Gram Negative: Traditional gram-negative bacteria (E. coli, Pseudomonas, etc.)\n * - Atypical: Mycoplasma, Chlamydia, Legionella, and other special organisms\n * - Acid-fast: Mycobacteria (special classification)\n * \n * Usage:\n * const pathogen = parsePathogen(\"Mycoplasma pneumoniae\");\n * // Returns: { gramStatus: 'atypical', spectrumCategory: 'atypical', ... }\n */\n\n// =============================================================================\n// ANTIBIOTIC SPECTRUM DATABASE\n// =============================================================================\n\n/**\n * Comprehensive antibiotic spectrum database with 10-point scoring system\n * \n * Scoring System (0-10):\n * - 0-2: Poor coverage\n * - 3-4: Limited coverage  \n * - 5-6: Moderate coverage\n * - 7-8: Good coverage\n * - 9-10: Excellent coverage\n * \n * Spectrum Categories:\n * - gramPositive: Coverage against gram-positive bacteria\n * - gramNegative: Coverage against gram-negative bacteria\n * - atypical: Coverage against atypical organisms\n * - anaerobes: Coverage against anaerobic bacteria\n * \n * Example:\n * const vancomycin = antibioticSpectrumData['Vancomycin'];\n * // Returns: { spectrum: { gramPositive: 10, gramNegative: 0, ... }, ... }\n */\n\n// =============================================================================\n// VISUALIZATION COMPONENTS\n// =============================================================================\n\n/**\n * 1. ANTIBIOTIC SPECTRUM VENN DIAGRAM\n * ===================================\n * \n * Interactive 3-circle Venn diagram showing antibiotic coverage across\n * Gram-positive, Gram-negative, and Atypical pathogen categories.\n * \n * Features:\n * - Clickable regions show antibiotics with specific coverage patterns\n * - Hover tooltips display antibiotic counts and examples\n * - Animated pulse effects for region selection\n * - Real-time coverage analysis\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotic names to highlight\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onSpectrumAnalysis: Callback for region analysis\n * \n * Usage:\n * <AntibioticSpectrumVennDiagram \n *   selectedAntibiotics={['Vancomycin', 'Ciprofloxacin']}\n *   onSpectrumAnalysis={(data) => console.log(data)}\n * />\n */\n\n/**\n * 2. NORTHWESTERN-STYLE ROTATING WHEEL\n * ====================================\n * \n * Rotating antibiotic selection wheel inspired by Northwestern University's\n * antibiotic decision support tools.\n * \n * Structure:\n * - Center: Medical condition selector\n * - Inner ring: Pathogen categories\n * - Outer ring: Drug classes (rotating)\n * - Antibiotic nodes: Individual antibiotics within classes\n * \n * Features:\n * - Manual and automatic rotation\n * - Connection lines showing effectiveness\n * - Drug class filtering and selection\n * - Variable rotation speed control\n * \n * Props:\n * - selectedCondition: Medical condition object\n * - onAntibioticSelect: Callback for antibiotic selection\n * - onDrugClassSelect: Callback for drug class selection\n * \n * Usage:\n * <AntibioticRotatingWheel \n *   selectedCondition={pneumoniaCondition}\n *   onAntibioticSelect={(ab) => console.log(ab)}\n * />\n */\n\n/**\n * 3. ANTIBIOTIC SPECTRUM RADAR CHART\n * ==================================\n * \n * Multi-dimensional radar chart for antibiotic spectrum analysis and comparison.\n * \n * Metrics:\n * - Gram Positive Coverage (0-10)\n * - Gram Negative Coverage (0-10)\n * - Atypical Coverage (0-10)\n * - Anaerobe Coverage (0-10)\n * - Resistance Profile (calculated)\n * - Safety Profile (calculated)\n * \n * Features:\n * - Multiple antibiotic overlay\n * - Comparative analysis panel\n * - Interactive metric selection\n * - Hover tooltips with detailed scores\n * - Statistical comparison (min/max/avg)\n * \n * Props:\n * - selectedAntibiotics: Array of antibiotics to compare\n * - comparisonMode: Enable comparative analysis\n * - onMetricSelect: Callback for metric analysis\n * \n * Usage:\n * <AntibioticSpectrumRadarChart \n *   selectedAntibiotics={['Vancomycin', 'Linezolid', 'Daptomycin']}\n *   comparisonMode={true}\n * />\n */\n\n// =============================================================================\n// NEO4J GRAPH DATABASE INTEGRATION\n// =============================================================================\n\n/**\n * Graph database schema for advanced antibiotic relationship analysis\n * \n * Node Types:\n * - PATHOGEN: Bacterial, viral, fungal pathogens\n * - ANTIBIOTIC: Individual antimicrobial agents\n * - CONDITION: Medical conditions/infections\n * - DRUG_CLASS: Antibiotic classifications\n * \n * Relationship Types:\n * - TREATS: Antibiotic effectiveness against pathogens\n * - CAUSES: Pathogen association with conditions\n * - BELONGS_TO: Antibiotic classification\n * - SYNERGISTIC_WITH: Drug combination synergies\n * - RESISTANT_TO: Resistance patterns\n * - ALTERNATIVE_TO: Alternative therapy options\n * \n * Advanced Queries:\n * - Treatment path analysis\n * - Superbug identification\n * - Alternative drug discovery\n * - Community detection\n * \n * Usage:\n * const dataset = generateNeo4jDataset(medicalConditions);\n * // Returns complete Neo4j-ready dataset with nodes, relationships, and queries\n */\n\n// =============================================================================\n// DATA TRANSFORMATION UTILITIES\n// =============================================================================\n\n/**\n * Spectrum Scoring Functions:\n * \n * calculateSpectrumScore(antibiotic, pathogenCategory)\n * - Returns 0-10 score for specific pathogen category\n * \n * getAntibioticsBySpectrum(pathogenCategory, minScore)\n * - Returns ranked list of antibiotics for category\n * \n * getSpectrumOverlap(antibiotic1, antibiotic2)\n * - Returns 0-1 similarity score between antibiotics\n * \n * Example:\n * const score = calculateSpectrumScore('Vancomycin', 'positive'); // Returns 10\n * const alternatives = getAntibioticsBySpectrum('atypical', 7);    // High-scoring atypical coverage\n * const overlap = getSpectrumOverlap('Penicillin', 'Ampicillin'); // Similarity score\n */\n\n// =============================================================================\n// INTEGRATION GUIDE\n// =============================================================================\n\n/**\n * Adding New Visualizations to Main App:\n * \n * 1. Import components:\n *    import { AntibioticSpectrumVennDiagram, AntibioticRotatingWheel, \n *             AntibioticSpectrumRadarChart } from './components/PathogenNetworkVisualization';\n * \n * 2. Add to component state:\n *    const [selectedVisualization, setSelectedVisualization] = useState('venn');\n *    const [selectedAntibiotics, setSelectedAntibiotics] = useState([]);\n * \n * 3. Render conditionally:\n *    {selectedVisualization === 'venn' && \n *      <AntibioticSpectrumVennDiagram \n *        selectedAntibiotics={selectedAntibiotics}\n *        onSpectrumAnalysis={handleSpectrumAnalysis}\n *      />\n *    }\n * \n * 4. Add visualization selector:\n *    <select onChange={(e) => setSelectedVisualization(e.target.value)}>\n *      <option value=\"venn\">Venn Diagram</option>\n *      <option value=\"wheel\">Rotating Wheel</option>\n *      <option value=\"radar\">Radar Chart</option>\n *    </select>\n */\n\n// =============================================================================\n// PERFORMANCE OPTIMIZATION\n// =============================================================================\n\n/**\n * Optimization Strategies:\n * \n * 1. Data Memoization:\n *    - Use React.useMemo() for expensive calculations\n *    - Cache spectrum scores and pathogen classifications\n * \n * 2. Virtual Rendering:\n *    - Implement viewport culling for large datasets\n *    - Use requestAnimationFrame for smooth animations\n * \n * 3. Progressive Loading:\n *    - Load visualizations on demand\n *    - Implement lazy loading for Neo4j connections\n * \n * 4. Memory Management:\n *    - Clean up SVG animations and event listeners\n *    - Use WeakMap for temporary data storage\n */\n\n// =============================================================================\n// ACCESSIBILITY FEATURES\n// =============================================================================\n\n/**\n * Accessibility Enhancements:\n * \n * 1. Keyboard Navigation:\n *    - Tab through interactive elements\n *    - Arrow keys for rotation and selection\n *    - Enter/Space for activation\n * \n * 2. Screen Reader Support:\n *    - ARIA labels for all interactive elements\n *    - Live regions for dynamic updates\n *    - Semantic SVG structure\n * \n * 3. Visual Accessibility:\n *    - High contrast color schemes\n *    - Pattern fills for color-blind users\n *    - Scalable text and UI elements\n * \n * 4. Cognitive Accessibility:\n *    - Clear navigation flow\n *    - Consistent interaction patterns\n *    - Help tooltips and guidance\n */\n\n// =============================================================================\n// CLINICAL INTEGRATION\n// =============================================================================\n\n/**\n * Medical Decision Support Features:\n * \n * 1. Evidence-Based Scoring:\n *    - Clinical trial effectiveness data\n *    - Resistance surveillance integration\n *    - Local antibiogram support\n * \n * 2. Clinical Context:\n *    - Patient-specific factors (age, allergies, renal function)\n *    - Severity-based recommendations\n *    - Drug interaction checking\n * \n * 3. Educational Features:\n *    - Mechanism of action explanations\n *    - Resistance pattern tutorials\n *    - Case-based learning scenarios\n * \n * 4. Quality Metrics:\n *    - Antibiotic stewardship tracking\n *    - Learning progress analytics\n *    - Clinical outcome correlation\n */\n\nexport const VISUALIZATION_DOCUMENTATION = {\n  version: '2.0.0',\n  components: ['VennDiagram', 'RotatingWheel', 'RadarChart', 'Neo4jIntegration'],\n  features: ['PathogenClassification', 'SpectrumAnalysis', 'GraphDatabase', 'ClinicalDecisionSupport'],\n  lastUpdated: new Date().toISOString(),\n  apiReference: 'See individual component documentation above'\n};\n\n/**\n * Process all conditions and extract normalized pathogen and antibiotic data\n * @param {Array} conditions - Array of medical condition objects\n * @returns {Object} - Processed data with pathogens and antibiotics\n */\nexport const processConditionsData = (conditions) => {\n  const pathogens = new Map();\n  const antibiotics = new Map();\n  const conditionMap = new Map();\n  \n  conditions.forEach(condition => {\n    conditionMap.set(condition.id, condition);\n    \n    // Process pathogens\n    if (condition.commonPathogens && Array.isArray(condition.commonPathogens)) {\n      condition.commonPathogens.forEach(pathogenText => {\n        const pathogen = parsePathogen(pathogenText);\n        if (pathogen && pathogen.isValid) {\n          if (!pathogens.has(pathogen.name)) {\n            pathogens.set(pathogen.name, {\n              ...pathogen,\n              conditions: new Set(),\n              count: 0\n            });\n          }\n          \n          const pathogenData = pathogens.get(pathogen.name);\n          pathogenData.conditions.add(condition.id);\n          pathogenData.count++;\n        }\n      });\n    }\n    \n    // Process antibiotics from empiric therapy\n    if (condition.empiricTherapy && typeof condition.empiricTherapy === 'object') {\n      Object.values(condition.empiricTherapy).forEach(therapyText => {\n        const antibioticsList = parseAntibiotics(therapyText);\n        antibioticsList.forEach(antibiotic => {\n          if (antibiotic && antibiotic.isValid) {\n            if (!antibiotics.has(antibiotic.name)) {\n              antibiotics.set(antibiotic.name, {\n                ...antibiotic,\n                conditions: new Set(),\n                therapyContexts: new Set(),\n                count: 0\n              });\n            }\n            \n            const antibioticData = antibiotics.get(antibiotic.name);\n            antibioticData.conditions.add(condition.id);\n            antibioticData.therapyContexts.add(`${condition.name}: ${therapyText}`);\n            antibioticData.count++;\n          }\n        });\n      });\n    }\n  });\n  \n  // Convert Sets to Arrays for serialization\n  const pathogenArray = Array.from(pathogens.values()).map(p => ({\n    ...p,\n    conditions: Array.from(p.conditions),\n    therapyContexts: undefined\n  }));\n  \n  const antibioticArray = Array.from(antibiotics.values()).map(a => ({\n    ...a,\n    conditions: Array.from(a.conditions),\n    therapyContexts: Array.from(a.therapyContexts)\n  }));\n  \n  return {\n    pathogens: pathogenArray,\n    antibiotics: antibioticArray,\n    totalPathogens: pathogenArray.length,\n    totalAntibiotics: antibioticArray.length,\n    conditions: Array.from(conditionMap.values())\n  };\n};"],"mappings":"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BAAoB;IACrCW,UAAU,EAAE;MACVC,SAAS,EAAE9B,SAAS,CAAChD,KAAK,CAAC3E,MAAM;MACjC0J,iBAAiB,EAAE/B,SAAS,CAAC/C,aAAa,CAAC5E,MAAM;MACjDyD,SAAS,EAAE9C,MAAM,CAACgJ,IAAI,CAACnG,WAAW,CAACC,SAAS,CAAC;MAC7CO,iBAAiB,EAAErD,MAAM,CAACgJ,IAAI,CAACnG,WAAW,CAACQ,iBAAiB;IAC9D;EACF,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM4F,2BAA2B,GAAG;EACzCC,OAAO,EAAE,OAAO;EAChBC,UAAU,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,YAAY,EAAE,kBAAkB,CAAC;EAC9EC,QAAQ,EAAE,CAAC,wBAAwB,EAAE,kBAAkB,EAAE,eAAe,EAAE,yBAAyB,CAAC;EACpGC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACrCC,YAAY,EAAE;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,UAAU,IAAK;EACnD,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B,MAAM/K,WAAW,GAAG,IAAI+K,GAAG,CAAC,CAAC;EAC7B,MAAMC,YAAY,GAAG,IAAID,GAAG,CAAC,CAAC;EAE9BF,UAAU,CAAC9K,OAAO,CAAC2F,SAAS,IAAI;IAC9BsF,YAAY,CAACC,GAAG,CAACvF,SAAS,CAACE,EAAE,EAAEF,SAAS,CAAC;;IAEzC;IACA,IAAIA,SAAS,CAACO,eAAe,IAAIuB,KAAK,CAAC0D,OAAO,CAACxF,SAAS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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}