{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * usePathogenData Hook\n * Custom hook for managing pathogen data, search, and condition lookup\n * Provides pathogen exploration functionality with filtering and cross-references\n */\n\nimport { useMemo, useState } from 'react';\nimport { buildIndexes, searchPathogens, getConditionsForPathogen, getAntibioticsForPathogen } from '../utils/dataIndexer';\nconst usePathogenData = medicalConditions => {\n  _s();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [gramFilter, setGramFilter] = useState('all'); // 'all', 'positive', 'negative'\n  const [typeFilter, setTypeFilter] = useState('all'); // 'all', 'bacteria', 'virus', 'fungus'\n  const [sortBy, setSortBy] = useState('name'); // 'name', 'count', 'conditions'\n  const [selectedPathogen, setSelectedPathogen] = useState(null);\n\n  // Build indexes once when conditions data changes\n  const indexes = useMemo(() => {\n    if (!medicalConditions || medicalConditions.length === 0) {\n      return null;\n    }\n    return buildIndexes(medicalConditions);\n  }, [medicalConditions]);\n\n  // Get filtered and sorted pathogens\n  const pathogens = useMemo(() => {\n    if (!indexes) return [];\n    return searchPathogens(indexes, {\n      query: searchQuery,\n      gramStatus: gramFilter,\n      pathogenType: typeFilter,\n      sortBy: sortBy\n    });\n  }, [indexes, searchQuery, gramFilter, typeFilter, sortBy]);\n\n  // Get conditions for selected pathogen\n  const selectedPathogenConditions = useMemo(() => {\n    if (!indexes || !selectedPathogen) return [];\n    return getConditionsForPathogen(indexes, selectedPathogen.name);\n  }, [indexes, selectedPathogen]);\n\n  // Get antibiotics for selected pathogen\n  const selectedPathogenAntibiotics = useMemo(() => {\n    if (!indexes || !selectedPathogen) return [];\n    return getAntibioticsForPathogen(indexes, selectedPathogen.name);\n  }, [indexes, selectedPathogen]);\n\n  // Get pathogen statistics\n  const pathogenStats = useMemo(() => {\n    if (!indexes) return null;\n    const gramPositive = indexes.gramPositivePathogens.length;\n    const gramNegative = indexes.gramNegativePathogens.length;\n    const total = indexes.pathogens.length;\n\n    // Calculate condition coverage\n    const pathogenConditionCounts = indexes.pathogens.map(p => p.conditions.length);\n    const maxConditions = Math.max(...pathogenConditionCounts, 0);\n    const avgConditions = pathogenConditionCounts.length > 0 ? (pathogenConditionCounts.reduce((a, b) => a + b, 0) / pathogenConditionCounts.length).toFixed(1) : 0;\n    return {\n      total,\n      gramPositive,\n      gramNegative,\n      unknown: total - gramPositive - gramNegative,\n      maxConditions,\n      avgConditions\n    };\n  }, [indexes]);\n\n  // Get gram status distribution for filtered results\n  const filteredStats = useMemo(() => {\n    const gramPositiveCount = pathogens.filter(p => p.gramStatus === 'positive').length;\n    const gramNegativeCount = pathogens.filter(p => p.gramStatus === 'negative').length;\n    const unknownCount = pathogens.filter(p => p.gramStatus === 'unknown').length;\n    return {\n      total: pathogens.length,\n      gramPositive: gramPositiveCount,\n      gramNegative: gramNegativeCount,\n      unknown: unknownCount\n    };\n  }, [pathogens]);\n\n  // Search functions\n  const searchPathogens = query => {\n    setSearchQuery(query);\n  };\n  const filterByGramStatus = status => {\n    setGramFilter(status);\n  };\n  const filterByType = type => {\n    setTypeFilter(type);\n  };\n  const setSortOrder = order => {\n    setSortBy(order);\n  };\n  const selectPathogen = pathogen => {\n    setSelectedPathogen(pathogen);\n  };\n  const clearSelection = () => {\n    setSelectedPathogen(null);\n  };\n  const clearFilters = () => {\n    setSearchQuery('');\n    setGramFilter('all');\n    setTypeFilter('all');\n    setSortBy('name');\n  };\n\n  // Get pathogen by name (for external lookups)\n  const getPathogenByName = name => {\n    if (!indexes) return null;\n    return indexes.pathogens.find(p => p.name === name);\n  };\n\n  // Find similar pathogens (same gram status or conditions)\n  const findSimilarPathogens = pathogen => {\n    if (!indexes || !pathogen) return [];\n    return indexes.pathogens.filter(p => p.name !== pathogen.name).filter(p => {\n      // Same gram status\n      if (p.gramStatus === pathogen.gramStatus && pathogen.gramStatus !== 'unknown') {\n        return true;\n      }\n\n      // Shared conditions\n      const sharedConditions = p.conditions.filter(c => pathogen.conditions.includes(c));\n      return sharedConditions.length > 0;\n    }).sort((a, b) => {\n      // Sort by number of shared conditions\n      const aShared = a.conditions.filter(c => pathogen.conditions.includes(c)).length;\n      const bShared = b.conditions.filter(c => pathogen.conditions.includes(c)).length;\n      return bShared - aShared;\n    }).slice(0, 5); // Top 5 similar pathogens\n  };\n  return {\n    // Data\n    pathogens,\n    selectedPathogen,\n    selectedPathogenConditions,\n    selectedPathogenAntibiotics,\n    // Statistics\n    pathogenStats,\n    filteredStats,\n    // Search state\n    searchQuery,\n    gramFilter,\n    typeFilter,\n    sortBy,\n    // Actions\n    searchPathogens,\n    filterByGramStatus,\n    filterByType,\n    setSortOrder,\n    selectPathogen,\n    clearSelection,\n    clearFilters,\n    // Utilities\n    getPathogenByName,\n    findSimilarPathogens,\n    // Loading state\n    isLoading: !indexes\n  };\n};\n_s(usePathogenData, \"70h155xmLRABnWd3GNTYYHHSq94=\");\nexport default usePathogenData;","map":{"version":3,"names":["useMemo","useState","buildIndexes","searchPathogens","getConditionsForPathogen","getAntibioticsForPathogen","usePathogenData","medicalConditions","_s","searchQuery","setSearchQuery","gramFilter","setGramFilter","typeFilter","setTypeFilter","sortBy","setSortBy","selectedPathogen","setSelectedPathogen","indexes","length","pathogens","query","gramStatus","pathogenType","selectedPathogenConditions","name","selectedPathogenAntibiotics","pathogenStats","gramPositive","gramPositivePathogens","gramNegative","gramNegativePathogens","total","pathogenConditionCounts","map","p","conditions","maxConditions","Math","max","avgConditions","reduce","a","b","toFixed","unknown","filteredStats","gramPositiveCount","filter","gramNegativeCount","unknownCount","filterByGramStatus","status","filterByType","type","setSortOrder","order","selectPathogen","pathogen","clearSelection","clearFilters","getPathogenByName","find","findSimilarPathogens","sharedConditions","c","includes","sort","aShared","bShared","slice","isLoading"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/usePathogenData.js"],"sourcesContent":["/**\n * usePathogenData Hook\n * Custom hook for managing pathogen data, search, and condition lookup\n * Provides pathogen exploration functionality with filtering and cross-references\n */\n\nimport { useMemo, useState } from 'react';\nimport { buildIndexes, searchPathogens, getConditionsForPathogen, getAntibioticsForPathogen } from '../utils/dataIndexer';\n\nconst usePathogenData = (medicalConditions) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [gramFilter, setGramFilter] = useState('all'); // 'all', 'positive', 'negative'\n  const [typeFilter, setTypeFilter] = useState('all'); // 'all', 'bacteria', 'virus', 'fungus'\n  const [sortBy, setSortBy] = useState('name'); // 'name', 'count', 'conditions'\n  const [selectedPathogen, setSelectedPathogen] = useState(null);\n\n  // Build indexes once when conditions data changes\n  const indexes = useMemo(() => {\n    if (!medicalConditions || medicalConditions.length === 0) {\n      return null;\n    }\n    return buildIndexes(medicalConditions);\n  }, [medicalConditions]);\n\n  // Get filtered and sorted pathogens\n  const pathogens = useMemo(() => {\n    if (!indexes) return [];\n    \n    return searchPathogens(indexes, {\n      query: searchQuery,\n      gramStatus: gramFilter,\n      pathogenType: typeFilter,\n      sortBy: sortBy\n    });\n  }, [indexes, searchQuery, gramFilter, typeFilter, sortBy]);\n\n  // Get conditions for selected pathogen\n  const selectedPathogenConditions = useMemo(() => {\n    if (!indexes || !selectedPathogen) return [];\n    return getConditionsForPathogen(indexes, selectedPathogen.name);\n  }, [indexes, selectedPathogen]);\n\n  // Get antibiotics for selected pathogen\n  const selectedPathogenAntibiotics = useMemo(() => {\n    if (!indexes || !selectedPathogen) return [];\n    return getAntibioticsForPathogen(indexes, selectedPathogen.name);\n  }, [indexes, selectedPathogen]);\n\n  // Get pathogen statistics\n  const pathogenStats = useMemo(() => {\n    if (!indexes) return null;\n    \n    const gramPositive = indexes.gramPositivePathogens.length;\n    const gramNegative = indexes.gramNegativePathogens.length;\n    const total = indexes.pathogens.length;\n    \n    // Calculate condition coverage\n    const pathogenConditionCounts = indexes.pathogens.map(p => p.conditions.length);\n    const maxConditions = Math.max(...pathogenConditionCounts, 0);\n    const avgConditions = pathogenConditionCounts.length > 0 \n      ? (pathogenConditionCounts.reduce((a, b) => a + b, 0) / pathogenConditionCounts.length).toFixed(1)\n      : 0;\n\n    return {\n      total,\n      gramPositive,\n      gramNegative,\n      unknown: total - gramPositive - gramNegative,\n      maxConditions,\n      avgConditions\n    };\n  }, [indexes]);\n\n  // Get gram status distribution for filtered results\n  const filteredStats = useMemo(() => {\n    const gramPositiveCount = pathogens.filter(p => p.gramStatus === 'positive').length;\n    const gramNegativeCount = pathogens.filter(p => p.gramStatus === 'negative').length;\n    const unknownCount = pathogens.filter(p => p.gramStatus === 'unknown').length;\n    \n    return {\n      total: pathogens.length,\n      gramPositive: gramPositiveCount,\n      gramNegative: gramNegativeCount,\n      unknown: unknownCount\n    };\n  }, [pathogens]);\n\n  // Search functions\n  const searchPathogens = (query) => {\n    setSearchQuery(query);\n  };\n\n  const filterByGramStatus = (status) => {\n    setGramFilter(status);\n  };\n\n  const filterByType = (type) => {\n    setTypeFilter(type);\n  };\n\n  const setSortOrder = (order) => {\n    setSortBy(order);\n  };\n\n  const selectPathogen = (pathogen) => {\n    setSelectedPathogen(pathogen);\n  };\n\n  const clearSelection = () => {\n    setSelectedPathogen(null);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setGramFilter('all');\n    setTypeFilter('all');\n    setSortBy('name');\n  };\n\n  // Get pathogen by name (for external lookups)\n  const getPathogenByName = (name) => {\n    if (!indexes) return null;\n    return indexes.pathogens.find(p => p.name === name);\n  };\n\n  // Find similar pathogens (same gram status or conditions)\n  const findSimilarPathogens = (pathogen) => {\n    if (!indexes || !pathogen) return [];\n    \n    return indexes.pathogens\n      .filter(p => p.name !== pathogen.name)\n      .filter(p => {\n        // Same gram status\n        if (p.gramStatus === pathogen.gramStatus && pathogen.gramStatus !== 'unknown') {\n          return true;\n        }\n        \n        // Shared conditions\n        const sharedConditions = p.conditions.filter(c => pathogen.conditions.includes(c));\n        return sharedConditions.length > 0;\n      })\n      .sort((a, b) => {\n        // Sort by number of shared conditions\n        const aShared = a.conditions.filter(c => pathogen.conditions.includes(c)).length;\n        const bShared = b.conditions.filter(c => pathogen.conditions.includes(c)).length;\n        return bShared - aShared;\n      })\n      .slice(0, 5); // Top 5 similar pathogens\n  };\n\n  return {\n    // Data\n    pathogens,\n    selectedPathogen,\n    selectedPathogenConditions,\n    selectedPathogenAntibiotics,\n    \n    // Statistics\n    pathogenStats,\n    filteredStats,\n    \n    // Search state\n    searchQuery,\n    gramFilter,\n    typeFilter,\n    sortBy,\n    \n    // Actions\n    searchPathogens,\n    filterByGramStatus,\n    filterByType,\n    setSortOrder,\n    selectPathogen,\n    clearSelection,\n    clearFilters,\n    \n    // Utilities\n    getPathogenByName,\n    findSimilarPathogens,\n    \n    // Loading state\n    isLoading: !indexes\n  };\n};\n\nexport default usePathogenData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}