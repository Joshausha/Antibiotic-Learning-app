{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useQuizProgress Hook\n * Custom hook to track quiz completion history and progress analytics\n * \n * @returns {Object} - Quiz progress state and methods\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from './useLocalStorage';\nconst useQuizProgress = () => {\n  _s();\n  const [quizHistory, setQuizHistory] = useLocalStorage('quizHistory', []);\n  const [currentSession, setCurrentSession] = useState(null);\n\n  // Calculate statistics\n  const stats = {\n    totalQuizzes: quizHistory.length,\n    averageScore: quizHistory.length > 0 ? Math.round(quizHistory.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / quizHistory.length) : 0,\n    bestScore: quizHistory.length > 0 ? Math.max(...quizHistory.map(quiz => quiz.scorePercentage)) : 0,\n    recentQuizzes: quizHistory.slice(-5).reverse(),\n    // Last 5 quizzes\n    improvementTrend: calculateImprovementTrend(quizHistory),\n    weakAreas: identifyWeakAreas(quizHistory),\n    streakCount: calculateStreakCount(quizHistory)\n  };\n\n  // Start a new quiz session\n  const startQuiz = useCallback((quizId, totalQuestions) => {\n    const session = {\n      quizId,\n      totalQuestions,\n      startTime: new Date().toISOString(),\n      answers: [],\n      currentQuestion: 0\n    };\n    setCurrentSession(session);\n    return session;\n  }, []);\n\n  // Record an answer\n  const recordAnswer = useCallback((questionIndex, selectedAnswer, correctAnswer, questionText) => {\n    if (!currentSession) return;\n    const answerRecord = {\n      questionIndex,\n      questionText,\n      selectedAnswer,\n      correctAnswer,\n      isCorrect: selectedAnswer === correctAnswer,\n      timestamp: new Date().toISOString()\n    };\n    setCurrentSession(prev => ({\n      ...prev,\n      answers: [...prev.answers, answerRecord],\n      currentQuestion: questionIndex + 1\n    }));\n  }, [currentSession]);\n\n  // Complete the quiz and save to history\n  const completeQuiz = useCallback(() => {\n    if (!currentSession || currentSession.answers.length === 0) return null;\n    const endTime = new Date().toISOString();\n    const correctAnswers = currentSession.answers.filter(answer => answer.isCorrect).length;\n    const scorePercentage = Math.round(correctAnswers / currentSession.totalQuestions * 100);\n    const completedQuiz = {\n      ...currentSession,\n      endTime,\n      correctAnswers,\n      scorePercentage,\n      duration: calculateDuration(currentSession.startTime, endTime),\n      completedAt: endTime\n    };\n\n    // Add to history\n    setQuizHistory(prev => [...prev, completedQuiz]);\n\n    // Clear current session\n    setCurrentSession(null);\n    return completedQuiz;\n  }, [currentSession, setQuizHistory]);\n\n  // Reset current session\n  const resetCurrentSession = useCallback(() => {\n    setCurrentSession(null);\n  }, []);\n\n  // Clear all history\n  const clearHistory = useCallback(() => {\n    setQuizHistory([]);\n  }, [setQuizHistory]);\n\n  // Get performance for a specific topic/category\n  const getTopicPerformance = useCallback(topic => {\n    const topicQuizzes = quizHistory.filter(quiz => quiz.answers.some(answer => answer.questionText.toLowerCase().includes(topic.toLowerCase())));\n    if (topicQuizzes.length === 0) return null;\n    const totalTopicQuestions = topicQuizzes.reduce((sum, quiz) => sum + quiz.answers.filter(answer => answer.questionText.toLowerCase().includes(topic.toLowerCase())).length, 0);\n    const correctTopicAnswers = topicQuizzes.reduce((sum, quiz) => sum + quiz.answers.filter(answer => answer.questionText.toLowerCase().includes(topic.toLowerCase()) && answer.isCorrect).length, 0);\n    return {\n      topic,\n      totalQuestions: totalTopicQuestions,\n      correctAnswers: correctTopicAnswers,\n      accuracy: Math.round(correctTopicAnswers / totalTopicQuestions * 100)\n    };\n  }, [quizHistory]);\n  return {\n    // State\n    quizHistory,\n    currentSession,\n    stats,\n    // Actions\n    startQuiz,\n    recordAnswer,\n    completeQuiz,\n    resetCurrentSession,\n    clearHistory,\n    getTopicPerformance\n  };\n};\n\n// Helper functions\n_s(useQuizProgress, \"r5TyYo+TB1PpcFOsBzJ46W/5Em8=\", false, function () {\n  return [useLocalStorage];\n});\nfunction calculateDuration(startTime, endTime) {\n  const start = new Date(startTime);\n  const end = new Date(endTime);\n  const durationMs = end - start;\n  const minutes = Math.floor(durationMs / 60000);\n  const seconds = Math.floor(durationMs % 60000 / 1000);\n  return `${minutes}m ${seconds}s`;\n}\nfunction calculateImprovementTrend(history) {\n  if (history.length < 2) return 'insufficient_data';\n  const recent = history.slice(-5);\n  const older = history.slice(-10, -5);\n  if (older.length === 0) return 'insufficient_data';\n  const recentAvg = recent.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / recent.length;\n  const olderAvg = older.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / older.length;\n  const difference = recentAvg - olderAvg;\n  if (difference > 5) return 'improving';\n  if (difference < -5) return 'declining';\n  return 'stable';\n}\nfunction identifyWeakAreas(history) {\n  const topicPerformance = {};\n  history.forEach(quiz => {\n    quiz.answers.forEach(answer => {\n      // Extract topic from question (simplified - in real app you'd have better categorization)\n      const topics = extractTopicsFromQuestion(answer.questionText);\n      topics.forEach(topic => {\n        if (!topicPerformance[topic]) {\n          topicPerformance[topic] = {\n            correct: 0,\n            total: 0\n          };\n        }\n        topicPerformance[topic].total++;\n        if (answer.isCorrect) {\n          topicPerformance[topic].correct++;\n        }\n      });\n    });\n  });\n\n  // Find topics with < 70% accuracy\n  return Object.entries(topicPerformance).map(([topic, data]) => ({\n    topic,\n    accuracy: Math.round(data.correct / data.total * 100),\n    totalQuestions: data.total\n  })).filter(item => item.accuracy < 70 && item.totalQuestions >= 3).sort((a, b) => a.accuracy - b.accuracy);\n}\nfunction extractTopicsFromQuestion(questionText) {\n  const topics = [];\n  const text = questionText.toLowerCase();\n\n  // Simple topic extraction based on keywords\n  if (text.includes('pneumonia')) topics.push('pneumonia');\n  if (text.includes('uti') || text.includes('urinary')) topics.push('uti');\n  if (text.includes('sepsis')) topics.push('sepsis');\n  if (text.includes('meningitis')) topics.push('meningitis');\n  if (text.includes('antibiotic') || text.includes('antimicrobial')) topics.push('antibiotics');\n  return topics.length > 0 ? topics : ['general'];\n}\nfunction calculateStreakCount(history) {\n  if (history.length === 0) return 0;\n  let streak = 0;\n  // Count consecutive quizzes with score >= 80%\n  for (let i = history.length - 1; i >= 0; i--) {\n    if (history[i].scorePercentage >= 80) {\n      streak++;\n    } else {\n      break;\n    }\n  }\n  return streak;\n}\nexport default useQuizProgress;","map":{"version":3,"names":["useState","useEffect","useCallback","useLocalStorage","useQuizProgress","_s","quizHistory","setQuizHistory","currentSession","setCurrentSession","stats","totalQuizzes","length","averageScore","Math","round","reduce","sum","quiz","scorePercentage","bestScore","max","map","recentQuizzes","slice","reverse","improvementTrend","calculateImprovementTrend","weakAreas","identifyWeakAreas","streakCount","calculateStreakCount","startQuiz","quizId","totalQuestions","session","startTime","Date","toISOString","answers","currentQuestion","recordAnswer","questionIndex","selectedAnswer","correctAnswer","questionText","answerRecord","isCorrect","timestamp","prev","completeQuiz","endTime","correctAnswers","filter","answer","completedQuiz","duration","calculateDuration","completedAt","resetCurrentSession","clearHistory","getTopicPerformance","topic","topicQuizzes","some","toLowerCase","includes","totalTopicQuestions","correctTopicAnswers","accuracy","start","end","durationMs","minutes","floor","seconds","history","recent","older","recentAvg","olderAvg","difference","topicPerformance","forEach","topics","extractTopicsFromQuestion","correct","total","Object","entries","data","item","sort","a","b","text","push","streak","i"],"sources":["/Users/joshpankin/My Drive/Obsidian/1. Projects/Antibiotic Learning app/src/hooks/useQuizProgress.js"],"sourcesContent":["/**\n * useQuizProgress Hook\n * Custom hook to track quiz completion history and progress analytics\n * \n * @returns {Object} - Quiz progress state and methods\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from './useLocalStorage';\n\nconst useQuizProgress = () => {\n  const [quizHistory, setQuizHistory] = useLocalStorage('quizHistory', []);\n  const [currentSession, setCurrentSession] = useState(null);\n\n  // Calculate statistics\n  const stats = {\n    totalQuizzes: quizHistory.length,\n    averageScore: quizHistory.length > 0 \n      ? Math.round(quizHistory.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / quizHistory.length)\n      : 0,\n    bestScore: quizHistory.length > 0\n      ? Math.max(...quizHistory.map(quiz => quiz.scorePercentage))\n      : 0,\n    recentQuizzes: quizHistory.slice(-5).reverse(), // Last 5 quizzes\n    improvementTrend: calculateImprovementTrend(quizHistory),\n    weakAreas: identifyWeakAreas(quizHistory),\n    streakCount: calculateStreakCount(quizHistory)\n  };\n\n  // Start a new quiz session\n  const startQuiz = useCallback((quizId, totalQuestions) => {\n    const session = {\n      quizId,\n      totalQuestions,\n      startTime: new Date().toISOString(),\n      answers: [],\n      currentQuestion: 0\n    };\n    setCurrentSession(session);\n    return session;\n  }, []);\n\n  // Record an answer\n  const recordAnswer = useCallback((questionIndex, selectedAnswer, correctAnswer, questionText) => {\n    if (!currentSession) return;\n\n    const answerRecord = {\n      questionIndex,\n      questionText,\n      selectedAnswer,\n      correctAnswer,\n      isCorrect: selectedAnswer === correctAnswer,\n      timestamp: new Date().toISOString()\n    };\n\n    setCurrentSession(prev => ({\n      ...prev,\n      answers: [...prev.answers, answerRecord],\n      currentQuestion: questionIndex + 1\n    }));\n  }, [currentSession]);\n\n  // Complete the quiz and save to history\n  const completeQuiz = useCallback(() => {\n    if (!currentSession || currentSession.answers.length === 0) return null;\n\n    const endTime = new Date().toISOString();\n    const correctAnswers = currentSession.answers.filter(answer => answer.isCorrect).length;\n    const scorePercentage = Math.round((correctAnswers / currentSession.totalQuestions) * 100);\n    \n    const completedQuiz = {\n      ...currentSession,\n      endTime,\n      correctAnswers,\n      scorePercentage,\n      duration: calculateDuration(currentSession.startTime, endTime),\n      completedAt: endTime\n    };\n\n    // Add to history\n    setQuizHistory(prev => [...prev, completedQuiz]);\n    \n    // Clear current session\n    setCurrentSession(null);\n\n    return completedQuiz;\n  }, [currentSession, setQuizHistory]);\n\n  // Reset current session\n  const resetCurrentSession = useCallback(() => {\n    setCurrentSession(null);\n  }, []);\n\n  // Clear all history\n  const clearHistory = useCallback(() => {\n    setQuizHistory([]);\n  }, [setQuizHistory]);\n\n  // Get performance for a specific topic/category\n  const getTopicPerformance = useCallback((topic) => {\n    const topicQuizzes = quizHistory.filter(quiz => \n      quiz.answers.some(answer => \n        answer.questionText.toLowerCase().includes(topic.toLowerCase())\n      )\n    );\n\n    if (topicQuizzes.length === 0) return null;\n\n    const totalTopicQuestions = topicQuizzes.reduce((sum, quiz) => \n      sum + quiz.answers.filter(answer => \n        answer.questionText.toLowerCase().includes(topic.toLowerCase())\n      ).length, 0\n    );\n\n    const correctTopicAnswers = topicQuizzes.reduce((sum, quiz) => \n      sum + quiz.answers.filter(answer => \n        answer.questionText.toLowerCase().includes(topic.toLowerCase()) && answer.isCorrect\n      ).length, 0\n    );\n\n    return {\n      topic,\n      totalQuestions: totalTopicQuestions,\n      correctAnswers: correctTopicAnswers,\n      accuracy: Math.round((correctTopicAnswers / totalTopicQuestions) * 100)\n    };\n  }, [quizHistory]);\n\n  return {\n    // State\n    quizHistory,\n    currentSession,\n    stats,\n    \n    // Actions\n    startQuiz,\n    recordAnswer,\n    completeQuiz,\n    resetCurrentSession,\n    clearHistory,\n    getTopicPerformance\n  };\n};\n\n// Helper functions\nfunction calculateDuration(startTime, endTime) {\n  const start = new Date(startTime);\n  const end = new Date(endTime);\n  const durationMs = end - start;\n  const minutes = Math.floor(durationMs / 60000);\n  const seconds = Math.floor((durationMs % 60000) / 1000);\n  return `${minutes}m ${seconds}s`;\n}\n\nfunction calculateImprovementTrend(history) {\n  if (history.length < 2) return 'insufficient_data';\n  \n  const recent = history.slice(-5);\n  const older = history.slice(-10, -5);\n  \n  if (older.length === 0) return 'insufficient_data';\n  \n  const recentAvg = recent.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / recent.length;\n  const olderAvg = older.reduce((sum, quiz) => sum + quiz.scorePercentage, 0) / older.length;\n  \n  const difference = recentAvg - olderAvg;\n  \n  if (difference > 5) return 'improving';\n  if (difference < -5) return 'declining';\n  return 'stable';\n}\n\nfunction identifyWeakAreas(history) {\n  const topicPerformance = {};\n  \n  history.forEach(quiz => {\n    quiz.answers.forEach(answer => {\n      // Extract topic from question (simplified - in real app you'd have better categorization)\n      const topics = extractTopicsFromQuestion(answer.questionText);\n      \n      topics.forEach(topic => {\n        if (!topicPerformance[topic]) {\n          topicPerformance[topic] = { correct: 0, total: 0 };\n        }\n        \n        topicPerformance[topic].total++;\n        if (answer.isCorrect) {\n          topicPerformance[topic].correct++;\n        }\n      });\n    });\n  });\n  \n  // Find topics with < 70% accuracy\n  return Object.entries(topicPerformance)\n    .map(([topic, data]) => ({\n      topic,\n      accuracy: Math.round((data.correct / data.total) * 100),\n      totalQuestions: data.total\n    }))\n    .filter(item => item.accuracy < 70 && item.totalQuestions >= 3)\n    .sort((a, b) => a.accuracy - b.accuracy);\n}\n\nfunction extractTopicsFromQuestion(questionText) {\n  const topics = [];\n  const text = questionText.toLowerCase();\n  \n  // Simple topic extraction based on keywords\n  if (text.includes('pneumonia')) topics.push('pneumonia');\n  if (text.includes('uti') || text.includes('urinary')) topics.push('uti');\n  if (text.includes('sepsis')) topics.push('sepsis');\n  if (text.includes('meningitis')) topics.push('meningitis');\n  if (text.includes('antibiotic') || text.includes('antimicrobial')) topics.push('antibiotics');\n  \n  return topics.length > 0 ? topics : ['general'];\n}\n\nfunction calculateStreakCount(history) {\n  if (history.length === 0) return 0;\n  \n  let streak = 0;\n  // Count consecutive quizzes with score >= 80%\n  for (let i = history.length - 1; i >= 0; i--) {\n    if (history[i].scorePercentage >= 80) {\n      streak++;\n    } else {\n      break;\n    }\n  }\n  \n  return streak;\n}\n\nexport default useQuizProgress;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,eAAe,CAAC,aAAa,EAAE,EAAE,CAAC;EACxE,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAMU,KAAK,GAAG;IACZC,YAAY,EAAEL,WAAW,CAACM,MAAM;IAChCC,YAAY,EAAEP,WAAW,CAACM,MAAM,GAAG,CAAC,GAChCE,IAAI,CAACC,KAAK,CAACT,WAAW,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,eAAe,EAAE,CAAC,CAAC,GAAGb,WAAW,CAACM,MAAM,CAAC,GACjG,CAAC;IACLQ,SAAS,EAAEd,WAAW,CAACM,MAAM,GAAG,CAAC,GAC7BE,IAAI,CAACO,GAAG,CAAC,GAAGf,WAAW,CAACgB,GAAG,CAACJ,IAAI,IAAIA,IAAI,CAACC,eAAe,CAAC,CAAC,GAC1D,CAAC;IACLI,aAAa,EAAEjB,WAAW,CAACkB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IAAE;IAChDC,gBAAgB,EAAEC,yBAAyB,CAACrB,WAAW,CAAC;IACxDsB,SAAS,EAAEC,iBAAiB,CAACvB,WAAW,CAAC;IACzCwB,WAAW,EAAEC,oBAAoB,CAACzB,WAAW;EAC/C,CAAC;;EAED;EACA,MAAM0B,SAAS,GAAG9B,WAAW,CAAC,CAAC+B,MAAM,EAAEC,cAAc,KAAK;IACxD,MAAMC,OAAO,GAAG;MACdF,MAAM;MACNC,cAAc;MACdE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,OAAO,EAAE,EAAE;MACXC,eAAe,EAAE;IACnB,CAAC;IACD/B,iBAAiB,CAAC0B,OAAO,CAAC;IAC1B,OAAOA,OAAO;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,YAAY,GAAGvC,WAAW,CAAC,CAACwC,aAAa,EAAEC,cAAc,EAAEC,aAAa,EAAEC,YAAY,KAAK;IAC/F,IAAI,CAACrC,cAAc,EAAE;IAErB,MAAMsC,YAAY,GAAG;MACnBJ,aAAa;MACbG,YAAY;MACZF,cAAc;MACdC,aAAa;MACbG,SAAS,EAAEJ,cAAc,KAAKC,aAAa;MAC3CI,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED7B,iBAAiB,CAACwC,IAAI,KAAK;MACzB,GAAGA,IAAI;MACPV,OAAO,EAAE,CAAC,GAAGU,IAAI,CAACV,OAAO,EAAEO,YAAY,CAAC;MACxCN,eAAe,EAAEE,aAAa,GAAG;IACnC,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAAClC,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAM0C,YAAY,GAAGhD,WAAW,CAAC,MAAM;IACrC,IAAI,CAACM,cAAc,IAAIA,cAAc,CAAC+B,OAAO,CAAC3B,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAEvE,MAAMuC,OAAO,GAAG,IAAId,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACxC,MAAMc,cAAc,GAAG5C,cAAc,CAAC+B,OAAO,CAACc,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACP,SAAS,CAAC,CAACnC,MAAM;IACvF,MAAMO,eAAe,GAAGL,IAAI,CAACC,KAAK,CAAEqC,cAAc,GAAG5C,cAAc,CAAC0B,cAAc,GAAI,GAAG,CAAC;IAE1F,MAAMqB,aAAa,GAAG;MACpB,GAAG/C,cAAc;MACjB2C,OAAO;MACPC,cAAc;MACdjC,eAAe;MACfqC,QAAQ,EAAEC,iBAAiB,CAACjD,cAAc,CAAC4B,SAAS,EAAEe,OAAO,CAAC;MAC9DO,WAAW,EAAEP;IACf,CAAC;;IAED;IACA5C,cAAc,CAAC0C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEM,aAAa,CAAC,CAAC;;IAEhD;IACA9C,iBAAiB,CAAC,IAAI,CAAC;IAEvB,OAAO8C,aAAa;EACtB,CAAC,EAAE,CAAC/C,cAAc,EAAED,cAAc,CAAC,CAAC;;EAEpC;EACA,MAAMoD,mBAAmB,GAAGzD,WAAW,CAAC,MAAM;IAC5CO,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMmD,YAAY,GAAG1D,WAAW,CAAC,MAAM;IACrCK,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAMsD,mBAAmB,GAAG3D,WAAW,CAAE4D,KAAK,IAAK;IACjD,MAAMC,YAAY,GAAGzD,WAAW,CAAC+C,MAAM,CAACnC,IAAI,IAC1CA,IAAI,CAACqB,OAAO,CAACyB,IAAI,CAACV,MAAM,IACtBA,MAAM,CAACT,YAAY,CAACoB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAACG,WAAW,CAAC,CAAC,CAChE,CACF,CAAC;IAED,IAAIF,YAAY,CAACnD,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAE1C,MAAMuD,mBAAmB,GAAGJ,YAAY,CAAC/C,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KACxDD,GAAG,GAAGC,IAAI,CAACqB,OAAO,CAACc,MAAM,CAACC,MAAM,IAC9BA,MAAM,CAACT,YAAY,CAACoB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAACG,WAAW,CAAC,CAAC,CAChE,CAAC,CAACrD,MAAM,EAAE,CACZ,CAAC;IAED,MAAMwD,mBAAmB,GAAGL,YAAY,CAAC/C,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KACxDD,GAAG,GAAGC,IAAI,CAACqB,OAAO,CAACc,MAAM,CAACC,MAAM,IAC9BA,MAAM,CAACT,YAAY,CAACoB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAACG,WAAW,CAAC,CAAC,CAAC,IAAIX,MAAM,CAACP,SAC5E,CAAC,CAACnC,MAAM,EAAE,CACZ,CAAC;IAED,OAAO;MACLkD,KAAK;MACL5B,cAAc,EAAEiC,mBAAmB;MACnCf,cAAc,EAAEgB,mBAAmB;MACnCC,QAAQ,EAAEvD,IAAI,CAACC,KAAK,CAAEqD,mBAAmB,GAAGD,mBAAmB,GAAI,GAAG;IACxE,CAAC;EACH,CAAC,EAAE,CAAC7D,WAAW,CAAC,CAAC;EAEjB,OAAO;IACL;IACAA,WAAW;IACXE,cAAc;IACdE,KAAK;IAEL;IACAsB,SAAS;IACTS,YAAY;IACZS,YAAY;IACZS,mBAAmB;IACnBC,YAAY;IACZC;EACF,CAAC;AACH,CAAC;;AAED;AAAAxD,EAAA,CAtIMD,eAAe;EAAA,QACmBD,eAAe;AAAA;AAsIvD,SAASsD,iBAAiBA,CAACrB,SAAS,EAAEe,OAAO,EAAE;EAC7C,MAAMmB,KAAK,GAAG,IAAIjC,IAAI,CAACD,SAAS,CAAC;EACjC,MAAMmC,GAAG,GAAG,IAAIlC,IAAI,CAACc,OAAO,CAAC;EAC7B,MAAMqB,UAAU,GAAGD,GAAG,GAAGD,KAAK;EAC9B,MAAMG,OAAO,GAAG3D,IAAI,CAAC4D,KAAK,CAACF,UAAU,GAAG,KAAK,CAAC;EAC9C,MAAMG,OAAO,GAAG7D,IAAI,CAAC4D,KAAK,CAAEF,UAAU,GAAG,KAAK,GAAI,IAAI,CAAC;EACvD,OAAO,GAAGC,OAAO,KAAKE,OAAO,GAAG;AAClC;AAEA,SAAShD,yBAAyBA,CAACiD,OAAO,EAAE;EAC1C,IAAIA,OAAO,CAAChE,MAAM,GAAG,CAAC,EAAE,OAAO,mBAAmB;EAElD,MAAMiE,MAAM,GAAGD,OAAO,CAACpD,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMsD,KAAK,GAAGF,OAAO,CAACpD,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EAEpC,IAAIsD,KAAK,CAAClE,MAAM,KAAK,CAAC,EAAE,OAAO,mBAAmB;EAElD,MAAMmE,SAAS,GAAGF,MAAM,CAAC7D,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,eAAe,EAAE,CAAC,CAAC,GAAG0D,MAAM,CAACjE,MAAM;EAC7F,MAAMoE,QAAQ,GAAGF,KAAK,CAAC9D,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,eAAe,EAAE,CAAC,CAAC,GAAG2D,KAAK,CAAClE,MAAM;EAE1F,MAAMqE,UAAU,GAAGF,SAAS,GAAGC,QAAQ;EAEvC,IAAIC,UAAU,GAAG,CAAC,EAAE,OAAO,WAAW;EACtC,IAAIA,UAAU,GAAG,CAAC,CAAC,EAAE,OAAO,WAAW;EACvC,OAAO,QAAQ;AACjB;AAEA,SAASpD,iBAAiBA,CAAC+C,OAAO,EAAE;EAClC,MAAMM,gBAAgB,GAAG,CAAC,CAAC;EAE3BN,OAAO,CAACO,OAAO,CAACjE,IAAI,IAAI;IACtBA,IAAI,CAACqB,OAAO,CAAC4C,OAAO,CAAC7B,MAAM,IAAI;MAC7B;MACA,MAAM8B,MAAM,GAAGC,yBAAyB,CAAC/B,MAAM,CAACT,YAAY,CAAC;MAE7DuC,MAAM,CAACD,OAAO,CAACrB,KAAK,IAAI;QACtB,IAAI,CAACoB,gBAAgB,CAACpB,KAAK,CAAC,EAAE;UAC5BoB,gBAAgB,CAACpB,KAAK,CAAC,GAAG;YAAEwB,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAE,CAAC;QACpD;QAEAL,gBAAgB,CAACpB,KAAK,CAAC,CAACyB,KAAK,EAAE;QAC/B,IAAIjC,MAAM,CAACP,SAAS,EAAE;UACpBmC,gBAAgB,CAACpB,KAAK,CAAC,CAACwB,OAAO,EAAE;QACnC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,OAAOE,MAAM,CAACC,OAAO,CAACP,gBAAgB,CAAC,CACpC5D,GAAG,CAAC,CAAC,CAACwC,KAAK,EAAE4B,IAAI,CAAC,MAAM;IACvB5B,KAAK;IACLO,QAAQ,EAAEvD,IAAI,CAACC,KAAK,CAAE2E,IAAI,CAACJ,OAAO,GAAGI,IAAI,CAACH,KAAK,GAAI,GAAG,CAAC;IACvDrD,cAAc,EAAEwD,IAAI,CAACH;EACvB,CAAC,CAAC,CAAC,CACFlC,MAAM,CAACsC,IAAI,IAAIA,IAAI,CAACtB,QAAQ,GAAG,EAAE,IAAIsB,IAAI,CAACzD,cAAc,IAAI,CAAC,CAAC,CAC9D0D,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACxB,QAAQ,GAAGyB,CAAC,CAACzB,QAAQ,CAAC;AAC5C;AAEA,SAASgB,yBAAyBA,CAACxC,YAAY,EAAE;EAC/C,MAAMuC,MAAM,GAAG,EAAE;EACjB,MAAMW,IAAI,GAAGlD,YAAY,CAACoB,WAAW,CAAC,CAAC;;EAEvC;EACA,IAAI8B,IAAI,CAAC7B,QAAQ,CAAC,WAAW,CAAC,EAAEkB,MAAM,CAACY,IAAI,CAAC,WAAW,CAAC;EACxD,IAAID,IAAI,CAAC7B,QAAQ,CAAC,KAAK,CAAC,IAAI6B,IAAI,CAAC7B,QAAQ,CAAC,SAAS,CAAC,EAAEkB,MAAM,CAACY,IAAI,CAAC,KAAK,CAAC;EACxE,IAAID,IAAI,CAAC7B,QAAQ,CAAC,QAAQ,CAAC,EAAEkB,MAAM,CAACY,IAAI,CAAC,QAAQ,CAAC;EAClD,IAAID,IAAI,CAAC7B,QAAQ,CAAC,YAAY,CAAC,EAAEkB,MAAM,CAACY,IAAI,CAAC,YAAY,CAAC;EAC1D,IAAID,IAAI,CAAC7B,QAAQ,CAAC,YAAY,CAAC,IAAI6B,IAAI,CAAC7B,QAAQ,CAAC,eAAe,CAAC,EAAEkB,MAAM,CAACY,IAAI,CAAC,aAAa,CAAC;EAE7F,OAAOZ,MAAM,CAACxE,MAAM,GAAG,CAAC,GAAGwE,MAAM,GAAG,CAAC,SAAS,CAAC;AACjD;AAEA,SAASrD,oBAAoBA,CAAC6C,OAAO,EAAE;EACrC,IAAIA,OAAO,CAAChE,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EAElC,IAAIqF,MAAM,GAAG,CAAC;EACd;EACA,KAAK,IAAIC,CAAC,GAAGtB,OAAO,CAAChE,MAAM,GAAG,CAAC,EAAEsF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,IAAItB,OAAO,CAACsB,CAAC,CAAC,CAAC/E,eAAe,IAAI,EAAE,EAAE;MACpC8E,MAAM,EAAE;IACV,CAAC,MAAM;MACL;IACF;EACF;EAEA,OAAOA,MAAM;AACf;AAEA,eAAe7F,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}